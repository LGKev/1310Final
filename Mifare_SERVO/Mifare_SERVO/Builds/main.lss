
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000156  00800100  00001146  000011fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001146  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  00800256  00800256  00001350  2**0
                  ALLOC
  3 .eeprom       0000000c  00810000  00810000  00001350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         0000324c  00000000  00000000  0000135c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000150d  00000000  00000000  000045a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00005ab5  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005ac8  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  00005b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  000060fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001d  00000000  00000000  0000669e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  000066bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e4       	ldi	r30, 0x46	; 70
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 35       	cpi	r26, 0x56	; 86
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a6 e5       	ldi	r26, 0x56	; 86
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a4 38       	cpi	r26, 0x84	; 132
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 80 04 	call	0x900	; 0x900 <main>
      9e:	0c 94 a1 08 	jmp	0x1142	; 0x1142 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
      a6:	8a b1       	in	r24, 0x0a	; 10
      a8:	80 7f       	andi	r24, 0xF0	; 240
      aa:	8a b9       	out	0x0a, r24	; 10

	//change LCD mode
	SET_RW();		//Read mode
      ac:	5e 9a       	sbi	0x0b, 6	; 11
	CLEAR_RS();		//Read status
      ae:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCDBusyLoop+0xc>
      b2:	00 c0       	rjmp	.+0      	; 0xb4 <LCDBusyLoop+0xe>

	
	do
	{

		SET_E();
      b4:	5c 9a       	sbi	0x0b, 4	; 11
      b6:	00 c0       	rjmp	.+0      	; 0xb8 <LCDBusyLoop+0x12>
      b8:	00 c0       	rjmp	.+0      	; 0xba <LCDBusyLoop+0x14>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
      ba:	89 b1       	in	r24, 0x09	; 9
		status=status<<4;
      bc:	82 95       	swap	r24
      be:	80 7f       	andi	r24, 0xF0	; 240
      c0:	00 c0       	rjmp	.+0      	; 0xc2 <LCDBusyLoop+0x1c>
      c2:	00 c0       	rjmp	.+0      	; 0xc4 <LCDBusyLoop+0x1e>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
      c4:	5c 98       	cbi	0x0b, 4	; 11
      c6:	92 e0       	ldi	r25, 0x02	; 2
      c8:	9a 95       	dec	r25
      ca:	f1 f7       	brne	.-4      	; 0xc8 <LCDBusyLoop+0x22>
      cc:	00 c0       	rjmp	.+0      	; 0xce <LCDBusyLoop+0x28>
		_delay_us(1);	//tEL

		SET_E();
      ce:	5c 9a       	sbi	0x0b, 4	; 11
      d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCDBusyLoop+0x2c>
      d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCDBusyLoop+0x2e>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
      d4:	99 b1       	in	r25, 0x09	; 9
      d6:	00 c0       	rjmp	.+0      	; 0xd8 <LCDBusyLoop+0x32>
      d8:	00 c0       	rjmp	.+0      	; 0xda <LCDBusyLoop+0x34>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
      da:	5c 98       	cbi	0x0b, 4	; 11
      dc:	92 e0       	ldi	r25, 0x02	; 2
      de:	9a 95       	dec	r25
      e0:	f1 f7       	brne	.-4      	; 0xde <LCDBusyLoop+0x38>
      e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCDBusyLoop+0x3e>
		_delay_us(1);	//tEL
	}while(busy);
      e4:	87 fd       	sbrc	r24, 7
      e6:	e6 cf       	rjmp	.-52     	; 0xb4 <LCDBusyLoop+0xe>

	CLEAR_RW();		//write mode
      e8:	5e 98       	cbi	0x0b, 6	; 11
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
      ea:	8a b1       	in	r24, 0x0a	; 10
      ec:	8f 60       	ori	r24, 0x0F	; 15
      ee:	8a b9       	out	0x0a, r24	; 10
      f0:	08 95       	ret

000000f2 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
      f2:	38 2f       	mov	r19, r24
      f4:	32 95       	swap	r19
      f6:	3f 70       	andi	r19, 0x0F	; 15
ln=(c & 0x0F);
      f8:	28 2f       	mov	r18, r24
      fa:	2f 70       	andi	r18, 0x0F	; 15

if(isdata==0)
      fc:	61 11       	cpse	r22, r1
      fe:	21 c0       	rjmp	.+66     	; 0x142 <LCDByte+0x50>
	CLEAR_RS();
     100:	5d 98       	cbi	0x0b, 5	; 11
     102:	00 c0       	rjmp	.+0      	; 0x104 <LCDByte+0x12>
     104:	00 c0       	rjmp	.+0      	; 0x106 <LCDByte+0x14>
else
	SET_RS();

_delay_us(0.500);		//tAS

SET_E();
     106:	5c 9a       	sbi	0x0b, 4	; 11

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
     108:	9b b1       	in	r25, 0x0b	; 11
     10a:	90 7f       	andi	r25, 0xF0	; 240
     10c:	93 2b       	or	r25, r19
LCD_DATA_PORT=temp;
     10e:	9b b9       	out	0x0b, r25	; 11
     110:	82 e0       	ldi	r24, 0x02	; 2
     112:	8a 95       	dec	r24
     114:	f1 f7       	brne	.-4      	; 0x112 <LCDByte+0x20>
     116:	00 c0       	rjmp	.+0      	; 0x118 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     118:	5c 98       	cbi	0x0b, 4	; 11
     11a:	82 e0       	ldi	r24, 0x02	; 2
     11c:	8a 95       	dec	r24
     11e:	f1 f7       	brne	.-4      	; 0x11c <LCDByte+0x2a>
     120:	00 c0       	rjmp	.+0      	; 0x122 <LCDByte+0x30>

_delay_us(1);

//Send the lower nibble
SET_E();
     122:	5c 9a       	sbi	0x0b, 4	; 11

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     124:	8b b1       	in	r24, 0x0b	; 11
     126:	80 7f       	andi	r24, 0xF0	; 240
     128:	82 2b       	or	r24, r18

LCD_DATA_PORT=temp;
     12a:	8b b9       	out	0x0b, r24	; 11
     12c:	82 e0       	ldi	r24, 0x02	; 2
     12e:	8a 95       	dec	r24
     130:	f1 f7       	brne	.-4      	; 0x12e <LCDByte+0x3c>
     132:	00 c0       	rjmp	.+0      	; 0x134 <LCDByte+0x42>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
     134:	5c 98       	cbi	0x0b, 4	; 11
     136:	82 e0       	ldi	r24, 0x02	; 2
     138:	8a 95       	dec	r24
     13a:	f1 f7       	brne	.-4      	; 0x138 <LCDByte+0x46>
     13c:	00 c0       	rjmp	.+0      	; 0x13e <LCDByte+0x4c>

_delay_us(1);			//tEL

LCDBusyLoop();
     13e:	0c 94 53 00 	jmp	0xa6	; 0xa6 <LCDBusyLoop>
ln=(c & 0x0F);

if(isdata==0)
	CLEAR_RS();
else
	SET_RS();
     142:	5d 9a       	sbi	0x0b, 5	; 11
     144:	de cf       	rjmp	.-68     	; 0x102 <LCDByte+0x10>

00000146 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
     146:	cf 93       	push	r28
     148:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     14a:	8f e5       	ldi	r24, 0x5F	; 95
     14c:	9a ee       	ldi	r25, 0xEA	; 234
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <LCDInit+0x8>
     152:	00 c0       	rjmp	.+0      	; 0x154 <LCDInit+0xe>
     154:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     156:	8a b1       	in	r24, 0x0a	; 10
     158:	8f 60       	ori	r24, 0x0F	; 15
     15a:	8a b9       	out	0x0a, r24	; 10
	LCD_E_DDR|=(1<<LCD_E_POS);
     15c:	54 9a       	sbi	0x0a, 4	; 10
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     15e:	55 9a       	sbi	0x0a, 5	; 10
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     160:	56 9a       	sbi	0x0a, 6	; 10

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
     162:	8b b1       	in	r24, 0x0b	; 11
     164:	80 7f       	andi	r24, 0xF0	; 240
     166:	8b b9       	out	0x0b, r24	; 11
	CLEAR_E();
     168:	5c 98       	cbi	0x0b, 4	; 11
	CLEAR_RW();
     16a:	5e 98       	cbi	0x0b, 6	; 11
	CLEAR_RS();
     16c:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     16e:	00 c0       	rjmp	.+0      	; 0x170 <LCDInit+0x2a>
     170:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
     172:	5c 9a       	sbi	0x0b, 4	; 11
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     174:	59 9a       	sbi	0x0b, 1	; 11
     176:	92 e0       	ldi	r25, 0x02	; 2
     178:	9a 95       	dec	r25
     17a:	f1 f7       	brne	.-4      	; 0x178 <LCDInit+0x32>
     17c:	00 c0       	rjmp	.+0      	; 0x17e <LCDInit+0x38>
	_delay_us(1);
	CLEAR_E();
     17e:	5c 98       	cbi	0x0b, 4	; 11
     180:	82 e0       	ldi	r24, 0x02	; 2
     182:	8a 95       	dec	r24
     184:	f1 f7       	brne	.-4      	; 0x182 <LCDInit+0x3c>
     186:	00 c0       	rjmp	.+0      	; 0x188 <LCDInit+0x42>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     188:	0e 94 53 00 	call	0xa6	; 0xa6 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     18c:	60 e0       	ldi	r22, 0x00	; 0
     18e:	8c 2f       	mov	r24, r28
     190:	8c 60       	ori	r24, 0x0C	; 12
     192:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     196:	60 e0       	ldi	r22, 0x00	; 0
     198:	88 e2       	ldi	r24, 0x28	; 40
     19a:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
     19e:	60 e0       	ldi	r22, 0x00	; 0
     1a0:	80 e8       	ldi	r24, 0x80	; 128
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format

	
	LCDGotoXY(0,0);

}
     1a2:	cf 91       	pop	r28
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
     1a4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <LCDByte>

000001a8 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
     1a8:	0f 93       	push	r16
     1aa:	1f 93       	push	r17
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	ec 01       	movw	r28, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     1b2:	88 81       	ld	r24, Y
     1b4:	81 11       	cpse	r24, r1
     1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <LCDWriteString+0x1a>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
     1b8:	df 91       	pop	r29
     1ba:	cf 91       	pop	r28
     1bc:	1f 91       	pop	r17
     1be:	0f 91       	pop	r16
     1c0:	08 95       	ret

	*****************************************************************/
 while(*msg!='\0')
 {
 	//Custom Char Support
	if(*msg=='%')
     1c2:	85 32       	cpi	r24, 0x25	; 37
     1c4:	99 f4       	brne	.+38     	; 0x1ec <LCDWriteString+0x44>
	{
		msg++;
     1c6:	8e 01       	movw	r16, r28
     1c8:	0f 5f       	subi	r16, 0xFF	; 255
     1ca:	1f 4f       	sbci	r17, 0xFF	; 255
		int8_t cc=*msg-'0';
     1cc:	89 81       	ldd	r24, Y+1	; 0x01
     1ce:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
		{
			LCDData(cc);
     1d0:	61 e0       	ldi	r22, 0x01	; 1
	if(*msg=='%')
	{
		msg++;
		int8_t cc=*msg-'0';

		if(cc>=0 && cc<=7)
     1d2:	88 30       	cpi	r24, 0x08	; 8
     1d4:	28 f4       	brcc	.+10     	; 0x1e0 <LCDWriteString+0x38>
			LCDData(cc);
		}
		else
		{
			LCDData('%');
			LCDData(*msg);
     1d6:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	}
	else
	{
		LCDData(*msg);
	}
	msg++;
     1da:	e8 01       	movw	r28, r16
     1dc:	21 96       	adiw	r28, 0x01	; 1
     1de:	e9 cf       	rjmp	.-46     	; 0x1b2 <LCDWriteString+0xa>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
     1e0:	85 e2       	ldi	r24, 0x25	; 37
     1e2:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
			LCDData(*msg);
     1e6:	61 e0       	ldi	r22, 0x01	; 1
     1e8:	89 81       	ldd	r24, Y+1	; 0x01
     1ea:	f5 cf       	rjmp	.-22     	; 0x1d6 <LCDWriteString+0x2e>
		}
	}
	else
	{
		LCDData(*msg);
     1ec:	61 e0       	ldi	r22, 0x01	; 1
     1ee:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
     1f2:	8e 01       	movw	r16, r28
     1f4:	f2 cf       	rjmp	.-28     	; 0x1da <LCDWriteString+0x32>

000001f6 <LCDWriteInt>:
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
{
     1f6:	ef 92       	push	r14
     1f8:	ff 92       	push	r15
     1fa:	0f 93       	push	r16
     1fc:	1f 93       	push	r17
     1fe:	cf 93       	push	r28
     200:	df 93       	push	r29
     202:	00 d0       	rcall	.+0      	; 0x204 <LCDWriteInt+0xe>
     204:	00 d0       	rcall	.+0      	; 0x206 <LCDWriteInt+0x10>
     206:	1f 92       	push	r1
     208:	cd b7       	in	r28, 0x3d	; 61
     20a:	de b7       	in	r29, 0x3e	; 62
     20c:	9b 01       	movw	r18, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     20e:	ae 01       	movw	r20, r28
     210:	4f 5f       	subi	r20, 0xFF	; 255
     212:	5f 4f       	sbci	r21, 0xFF	; 255
     214:	7a 01       	movw	r14, r20
     216:	45 e0       	ldi	r20, 0x05	; 5
     218:	f7 01       	movw	r30, r14
     21a:	11 92       	st	Z+, r1
     21c:	4a 95       	dec	r20
     21e:	e9 f7       	brne	.-6      	; 0x21a <LCDWriteInt+0x24>
     220:	fe 01       	movw	r30, r28
     222:	36 96       	adiw	r30, 0x06	; 6
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
     224:	0a e0       	ldi	r16, 0x0A	; 10
     226:	10 e0       	ldi	r17, 0x00	; 0

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     228:	00 97       	sbiw	r24, 0x00	; 0
     22a:	f1 f4       	brne	.+60     	; 0x268 <LCDWriteInt+0x72>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     22c:	2f 3f       	cpi	r18, 0xFF	; 255
     22e:	ff ef       	ldi	r31, 0xFF	; 255
     230:	3f 07       	cpc	r19, r31
     232:	01 f5       	brne	.+64     	; 0x274 <LCDWriteInt+0x7e>
     234:	f7 01       	movw	r30, r14
     236:	8f 01       	movw	r16, r30
     238:	0e 19       	sub	r16, r14
     23a:	1f 09       	sbc	r17, r15
		while(str[j]==0) j++;
     23c:	81 91       	ld	r24, Z+
     23e:	88 23       	and	r24, r24
     240:	d1 f3       	breq	.-12     	; 0x236 <LCDWriteInt+0x40>
     242:	0e 0d       	add	r16, r14
     244:	1f 1d       	adc	r17, r15
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     246:	c8 01       	movw	r24, r16
     248:	8e 19       	sub	r24, r14
     24a:	9f 09       	sbc	r25, r15
     24c:	05 97       	sbiw	r24, 0x05	; 5
     24e:	bc f0       	brlt	.+46     	; 0x27e <LCDWriteInt+0x88>
	{
	LCDData(48+str[i]);
	}
}
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
     254:	0f 90       	pop	r0
     256:	0f 90       	pop	r0
     258:	0f 90       	pop	r0
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	1f 91       	pop	r17
     260:	0f 91       	pop	r16
     262:	ff 90       	pop	r15
     264:	ef 90       	pop	r14
     266:	08 95       	ret

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
     268:	b8 01       	movw	r22, r16
     26a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__divmodhi4>
     26e:	82 93       	st	-Z, r24
	val=val/10;
     270:	cb 01       	movw	r24, r22
     272:	da cf       	rjmp	.-76     	; 0x228 <LCDWriteInt+0x32>
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
	else
		j=5-field_length;
     274:	05 e0       	ldi	r16, 0x05	; 5
     276:	10 e0       	ldi	r17, 0x00	; 0
     278:	02 1b       	sub	r16, r18
     27a:	13 0b       	sbc	r17, r19
     27c:	e2 cf       	rjmp	.-60     	; 0x242 <LCDWriteInt+0x4c>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     27e:	f8 01       	movw	r30, r16
     280:	81 91       	ld	r24, Z+
     282:	8f 01       	movw	r16, r30
     284:	61 e0       	ldi	r22, 0x01	; 1
     286:	80 5d       	subi	r24, 0xD0	; 208
     288:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
     28c:	dc cf       	rjmp	.-72     	; 0x246 <LCDWriteInt+0x50>

0000028e <LCDGotoXY>:
	}
}
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
     28e:	84 31       	cpi	r24, 0x14	; 20
     290:	78 f4       	brcc	.+30     	; 0x2b0 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
     292:	62 30       	cpi	r22, 0x02	; 2
     294:	49 f0       	breq	.+18     	; 0x2a8 <LCDGotoXY+0x1a>
     296:	63 30       	cpi	r22, 0x03	; 3
     298:	49 f0       	breq	.+18     	; 0x2ac <LCDGotoXY+0x1e>
     29a:	61 30       	cpi	r22, 0x01	; 1
     29c:	09 f4       	brne	.+2      	; 0x2a0 <LCDGotoXY+0x12>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
     29e:	80 64       	ori	r24, 0x40	; 64
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	80 68       	ori	r24, 0x80	; 128
     2a4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <LCDByte>
			break;
		case 1:
			x|=0b01000000;
			break;
		case 2:
			x+=0x14;
     2a8:	8c 5e       	subi	r24, 0xEC	; 236
     2aa:	fa cf       	rjmp	.-12     	; 0x2a0 <LCDGotoXY+0x12>
			break;
		case 3:
			x+=0x54;
     2ac:	8c 5a       	subi	r24, 0xAC	; 172
     2ae:	f8 cf       	rjmp	.-16     	; 0x2a0 <LCDGotoXY+0x12>
     2b0:	08 95       	ret

000002b2 <LCDHexDumpXY>:
}



void LCDHexDumpXY(uint8_t x, uint8_t y,uint8_t d)
{
     2b2:	cf 93       	push	r28
     2b4:	c4 2f       	mov	r28, r20
	LCDGotoXY(x,y);
     2b6:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
	uint8_t byte = '0';
	(((d>>4)&0x0F)<=9) ? (byte='0'+((d>>4)&0x0F)) : (byte='A'+ ((d>>4)&0x0F)-0x0A);
     2ba:	8c 2f       	mov	r24, r28
     2bc:	82 95       	swap	r24
     2be:	8f 70       	andi	r24, 0x0F	; 15
     2c0:	8a 30       	cpi	r24, 0x0A	; 10
     2c2:	88 f4       	brcc	.+34     	; 0x2e6 <LCDHexDumpXY+0x34>
     2c4:	80 5d       	subi	r24, 0xD0	; 208
	LCDByte(byte,1);
     2c6:	61 e0       	ldi	r22, 0x01	; 1
     2c8:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	LCDBusyLoop();
     2cc:	0e 94 53 00 	call	0xa6	; 0xa6 <LCDBusyLoop>
     2d0:	8c 2f       	mov	r24, r28
     2d2:	8f 70       	andi	r24, 0x0F	; 15
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
     2d4:	8a 30       	cpi	r24, 0x0A	; 10
     2d6:	48 f4       	brcc	.+18     	; 0x2ea <LCDHexDumpXY+0x38>
     2d8:	80 5d       	subi	r24, 0xD0	; 208
	LCDByte(byte,1);
     2da:	61 e0       	ldi	r22, 0x01	; 1
     2dc:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	LCDBusyLoop();
}
     2e0:	cf 91       	pop	r28
	LCDByte(byte,1);
	LCDBusyLoop();
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
	LCDByte(byte,1);
	LCDBusyLoop();
     2e2:	0c 94 53 00 	jmp	0xa6	; 0xa6 <LCDBusyLoop>

void LCDHexDumpXY(uint8_t x, uint8_t y,uint8_t d)
{
	LCDGotoXY(x,y);
	uint8_t byte = '0';
	(((d>>4)&0x0F)<=9) ? (byte='0'+((d>>4)&0x0F)) : (byte='A'+ ((d>>4)&0x0F)-0x0A);
     2e6:	89 5c       	subi	r24, 0xC9	; 201
     2e8:	ee cf       	rjmp	.-36     	; 0x2c6 <LCDHexDumpXY+0x14>
	LCDByte(byte,1);
	LCDBusyLoop();
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
     2ea:	89 5c       	subi	r24, 0xC9	; 201
     2ec:	f6 cf       	rjmp	.-20     	; 0x2da <LCDHexDumpXY+0x28>

000002ee <initServo>:
    //            //make A5 output.
    //            *ddr=BV(pin);      // PORTC declared as output 0xFF is all output 11111 so i have 8 bits i can set and 8 leds....
    //            *port=BV(pin);     // PORTC is initially LOW OFF the led initially /
    //to do make the register parameter work
    
    DDRC = BV(5);
     2ee:	90 e2       	ldi	r25, 0x20	; 32
     2f0:	97 b9       	out	0x07, r25	; 7
    //set to closed position
    PORTC = (BV(5));
     2f2:	98 b9       	out	0x08, r25	; 8
     2f4:	ef ec       	ldi	r30, 0xCF	; 207
     2f6:	f7 e0       	ldi	r31, 0x07	; 7
     2f8:	31 97       	sbiw	r30, 0x01	; 1
     2fa:	f1 f7       	brne	.-4      	; 0x2f8 <initServo+0xa>
     2fc:	00 c0       	rjmp	.+0      	; 0x2fe <initServo+0x10>
     2fe:	00 00       	nop
    _delay_us(1000);
    PORTC   ^=BV(5);
     300:	88 b1       	in	r24, 0x08	; 8
     302:	89 27       	eor	r24, r25
     304:	88 b9       	out	0x08, r24	; 8
     306:	8f e6       	ldi	r24, 0x6F	; 111
     308:	94 e9       	ldi	r25, 0x94	; 148
     30a:	01 97       	sbiw	r24, 0x01	; 1
     30c:	f1 f7       	brne	.-4      	; 0x30a <initServo+0x1c>
     30e:	00 c0       	rjmp	.+0      	; 0x310 <initServo+0x22>
     310:	00 00       	nop
     312:	08 95       	ret

00000314 <initLED>:
    _delay_us(19000); //remember that total period is 2ms or 2k micros and you need to do it this way because of standard 50hz servo
    
}

void initLED(void){
    DDRC |= BV(ledG);
     314:	3a 9a       	sbi	0x07, 2	; 7
    DDRC |= BV(ledR); //output
     316:	39 9a       	sbi	0x07, 1	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     318:	2f ef       	ldi	r18, 0xFF	; 255
     31a:	82 e5       	ldi	r24, 0x52	; 82
     31c:	97 e0       	ldi	r25, 0x07	; 7
     31e:	21 50       	subi	r18, 0x01	; 1
     320:	80 40       	sbci	r24, 0x00	; 0
     322:	90 40       	sbci	r25, 0x00	; 0
     324:	e1 f7       	brne	.-8      	; 0x31e <initLED+0xa>
     326:	00 c0       	rjmp	.+0      	; 0x328 <initLED+0x14>
     328:	00 00       	nop
    
    _delay_ms(300);
    PORTC|= BV(ledG);
     32a:	42 9a       	sbi	0x08, 2	; 8
     32c:	2f ef       	ldi	r18, 0xFF	; 255
     32e:	81 ee       	ldi	r24, 0xE1	; 225
     330:	94 e0       	ldi	r25, 0x04	; 4
     332:	21 50       	subi	r18, 0x01	; 1
     334:	80 40       	sbci	r24, 0x00	; 0
     336:	90 40       	sbci	r25, 0x00	; 0
     338:	e1 f7       	brne	.-8      	; 0x332 <initLED+0x1e>
     33a:	00 c0       	rjmp	.+0      	; 0x33c <initLED+0x28>
     33c:	00 00       	nop
    _delay_ms(200);
    PORTC ^= BV(ledG);
     33e:	88 b1       	in	r24, 0x08	; 8
     340:	94 e0       	ldi	r25, 0x04	; 4
     342:	89 27       	eor	r24, r25
     344:	88 b9       	out	0x08, r24	; 8
     346:	2f ef       	ldi	r18, 0xFF	; 255
     348:	82 e5       	ldi	r24, 0x52	; 82
     34a:	97 e0       	ldi	r25, 0x07	; 7
     34c:	21 50       	subi	r18, 0x01	; 1
     34e:	80 40       	sbci	r24, 0x00	; 0
     350:	90 40       	sbci	r25, 0x00	; 0
     352:	e1 f7       	brne	.-8      	; 0x34c <initLED+0x38>
     354:	00 c0       	rjmp	.+0      	; 0x356 <initLED+0x42>
     356:	00 00       	nop
    
    _delay_ms(300);
    PORTC |= BV(ledR);     _delay_ms(200);
     358:	41 9a       	sbi	0x08, 1	; 8
     35a:	2f ef       	ldi	r18, 0xFF	; 255
     35c:	81 ee       	ldi	r24, 0xE1	; 225
     35e:	94 e0       	ldi	r25, 0x04	; 4
     360:	21 50       	subi	r18, 0x01	; 1
     362:	80 40       	sbci	r24, 0x00	; 0
     364:	90 40       	sbci	r25, 0x00	; 0
     366:	e1 f7       	brne	.-8      	; 0x360 <initLED+0x4c>
     368:	00 c0       	rjmp	.+0      	; 0x36a <initLED+0x56>
     36a:	00 00       	nop
    PORTC ^= BV(ledR);
     36c:	88 b1       	in	r24, 0x08	; 8
     36e:	92 e0       	ldi	r25, 0x02	; 2
     370:	89 27       	eor	r24, r25
     372:	88 b9       	out	0x08, r24	; 8
     374:	08 95       	ret

00000376 <addQ>:
    
    
}

int addQ(int str[], int ADD[]){
     376:	dc 01       	movw	r26, r24
     378:	12 96       	adiw	r26, 0x02	; 2
     37a:	fb 01       	movw	r30, r22
     37c:	32 96       	adiw	r30, 0x02	; 2
     37e:	0c 96       	adiw	r24, 0x0c	; 12
    for(int i=1; i<=5; i++){
        if(str[i] != ADD[i])
     380:	4d 91       	ld	r20, X+
     382:	5d 91       	ld	r21, X+
     384:	21 91       	ld	r18, Z+
     386:	31 91       	ld	r19, Z+
     388:	42 17       	cp	r20, r18
     38a:	53 07       	cpc	r21, r19
     38c:	31 f4       	brne	.+12     	; 0x39a <addQ+0x24>
    
    
}

int addQ(int str[], int ADD[]){
    for(int i=1; i<=5; i++){
     38e:	a8 17       	cp	r26, r24
     390:	b9 07       	cpc	r27, r25
     392:	b1 f7       	brne	.-20     	; 0x380 <addQ+0xa>
        if(str[i] != ADD[i])
            return -1;
    }
    return 0;
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	08 95       	ret
}

int addQ(int str[], int ADD[]){
    for(int i=1; i<=5; i++){
        if(str[i] != ADD[i])
            return -1;
     39a:	8f ef       	ldi	r24, 0xFF	; 255
     39c:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return 0;
}
     39e:	08 95       	ret

000003a0 <addTag>:
unsigned int EEMEM tag[5]= {0,0,0,0,0};
//unsigned int EEMEM tag2[5]= {0,0,0,0,0};
unsigned int ram_tag[5]; //this is where we write the read tag to the stack will be str[] array.

//to do int tagNumber)
void addTag(int str[], int tagNumber){
     3a0:	df 92       	push	r13
     3a2:	ef 92       	push	r14
     3a4:	ff 92       	push	r15
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
    if(tagNumber ==1){
     3ae:	61 30       	cpi	r22, 0x01	; 1
     3b0:	71 05       	cpc	r23, r1
     3b2:	51 f5       	brne	.+84     	; 0x408 <addTag+0x68>
     3b4:	8c 01       	movw	r16, r24
     3b6:	0e 5f       	subi	r16, 0xFE	; 254
     3b8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ba:	32 e6       	ldi	r19, 0x62	; 98
     3bc:	e3 2e       	mov	r14, r19
     3be:	32 e0       	ldi	r19, 0x02	; 2
     3c0:	f3 2e       	mov	r15, r19
     3c2:	ec 01       	movw	r28, r24
     3c4:	2c 96       	adiw	r28, 0x0c	; 12
        for(int i=1; i<=5; i++){
            write_eeprom_word(tag1[i], str[i]);
            PORTC = BV(ledG);
     3c6:	44 e0       	ldi	r20, 0x04	; 4
     3c8:	d4 2e       	mov	r13, r20

//to do int tagNumber)
void addTag(int str[], int tagNumber){
    if(tagNumber ==1){
        for(int i=1; i<=5; i++){
            write_eeprom_word(tag1[i], str[i]);
     3ca:	f8 01       	movw	r30, r16
     3cc:	61 91       	ld	r22, Z+
     3ce:	71 91       	ld	r23, Z+
     3d0:	8f 01       	movw	r16, r30
     3d2:	f7 01       	movw	r30, r14
     3d4:	81 91       	ld	r24, Z+
     3d6:	7f 01       	movw	r14, r30
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 7e 08 	call	0x10fc	; 0x10fc <eeprom_write_word>
            PORTC = BV(ledG);
     3de:	d8 b8       	out	0x08, r13	; 8
     3e0:	ff ef       	ldi	r31, 0xFF	; 255
     3e2:	20 e7       	ldi	r18, 0x70	; 112
     3e4:	82 e0       	ldi	r24, 0x02	; 2
     3e6:	f1 50       	subi	r31, 0x01	; 1
     3e8:	20 40       	sbci	r18, 0x00	; 0
     3ea:	80 40       	sbci	r24, 0x00	; 0
     3ec:	e1 f7       	brne	.-8      	; 0x3e6 <addTag+0x46>
     3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <addTag+0x50>
     3f0:	00 00       	nop
unsigned int ram_tag[5]; //this is where we write the read tag to the stack will be str[] array.

//to do int tagNumber)
void addTag(int str[], int tagNumber){
    if(tagNumber ==1){
        for(int i=1; i<=5; i++){
     3f2:	c0 17       	cp	r28, r16
     3f4:	d1 07       	cpc	r29, r17
     3f6:	49 f7       	brne	.-46     	; 0x3ca <addTag+0x2a>
        for(int i=1; i<=5; i++){
            write_eeprom_word(tag2[i], str[i]);
        }
        tagNumber++; //incriment so we can keep track if we have room or not
    }
}
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	ff 90       	pop	r15
     402:	ef 90       	pop	r14
     404:	df 90       	pop	r13
     406:	08 95       	ret
            PORTC = BV(ledG);
            _delay_ms(100);
        }
        tagNumber++;
    }
    else if(tagNumber ==2){
     408:	62 30       	cpi	r22, 0x02	; 2
     40a:	71 05       	cpc	r23, r1
     40c:	a9 f7       	brne	.-22     	; 0x3f8 <addTag+0x58>
     40e:	8c 01       	movw	r16, r24
     410:	0e 5f       	subi	r16, 0xFE	; 254
     412:	1f 4f       	sbci	r17, 0xFF	; 255
     414:	2c e6       	ldi	r18, 0x6C	; 108
     416:	e2 2e       	mov	r14, r18
     418:	22 e0       	ldi	r18, 0x02	; 2
     41a:	f2 2e       	mov	r15, r18
     41c:	ec 01       	movw	r28, r24
     41e:	2c 96       	adiw	r28, 0x0c	; 12
        for(int i=1; i<=5; i++){
            write_eeprom_word(tag2[i], str[i]);
     420:	f8 01       	movw	r30, r16
     422:	61 91       	ld	r22, Z+
     424:	71 91       	ld	r23, Z+
     426:	8f 01       	movw	r16, r30
     428:	f7 01       	movw	r30, r14
     42a:	81 91       	ld	r24, Z+
     42c:	7f 01       	movw	r14, r30
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 7e 08 	call	0x10fc	; 0x10fc <eeprom_write_word>
            _delay_ms(100);
        }
        tagNumber++;
    }
    else if(tagNumber ==2){
        for(int i=1; i<=5; i++){
     434:	0c 17       	cp	r16, r28
     436:	1d 07       	cpc	r17, r29
     438:	99 f7       	brne	.-26     	; 0x420 <addTag+0x80>
     43a:	de cf       	rjmp	.-68     	; 0x3f8 <addTag+0x58>

0000043c <validTag>:
 
 }
 */

void validTag(int state ){
    if(state == 1){
     43c:	81 30       	cpi	r24, 0x01	; 1
     43e:	91 05       	cpc	r25, r1
     440:	59 f4       	brne	.+22     	; 0x458 <validTag+0x1c>
        PORTC |= BV(ledG);
     442:	42 9a       	sbi	0x08, 2	; 8
     444:	2f ef       	ldi	r18, 0xFF	; 255
     446:	82 e5       	ldi	r24, 0x52	; 82
     448:	97 e0       	ldi	r25, 0x07	; 7
     44a:	21 50       	subi	r18, 0x01	; 1
     44c:	80 40       	sbci	r24, 0x00	; 0
     44e:	90 40       	sbci	r25, 0x00	; 0
     450:	e1 f7       	brne	.-8      	; 0x44a <validTag+0xe>
     452:	00 c0       	rjmp	.+0      	; 0x454 <validTag+0x18>
     454:	00 00       	nop
     456:	08 95       	ret
        _delay_ms(300);
        //PORTC ^= BV(ledG);
    }
    else if(state ==-1){
     458:	01 96       	adiw	r24, 0x01	; 1
     45a:	71 f4       	brne	.+28     	; 0x478 <validTag+0x3c>
        PORTC |= BV(ledR);
     45c:	41 9a       	sbi	0x08, 1	; 8
     45e:	8f ef       	ldi	r24, 0xFF	; 255
     460:	92 e5       	ldi	r25, 0x52	; 82
     462:	27 e0       	ldi	r18, 0x07	; 7
     464:	81 50       	subi	r24, 0x01	; 1
     466:	90 40       	sbci	r25, 0x00	; 0
     468:	20 40       	sbci	r18, 0x00	; 0
     46a:	e1 f7       	brne	.-8      	; 0x464 <validTag+0x28>
     46c:	00 c0       	rjmp	.+0      	; 0x46e <validTag+0x32>
     46e:	00 00       	nop
        _delay_ms(300);
        PORTC ^= BV(ledR);
     470:	88 b1       	in	r24, 0x08	; 8
     472:	92 e0       	ldi	r25, 0x02	; 2
     474:	89 27       	eor	r24, r25
     476:	88 b9       	out	0x08, r24	; 8
     478:	08 95       	ret

0000047a <open>:
 }
 */

void validTag(int state ){
    if(state == 1){
        PORTC |= BV(ledG);
     47a:	42 9a       	sbi	0x08, 2	; 8
     47c:	2f ef       	ldi	r18, 0xFF	; 255
     47e:	82 e5       	ldi	r24, 0x52	; 82
     480:	97 e0       	ldi	r25, 0x07	; 7
     482:	21 50       	subi	r18, 0x01	; 1
     484:	80 40       	sbci	r24, 0x00	; 0
     486:	90 40       	sbci	r25, 0x00	; 0
     488:	e1 f7       	brne	.-8      	; 0x482 <open+0x8>
     48a:	00 c0       	rjmp	.+0      	; 0x48c <open+0x12>
     48c:	00 00       	nop

int open(void){
    
   validTag(1);
//    PORTC |= BV(ledG);
    PORTC = (BV(5));
     48e:	90 e2       	ldi	r25, 0x20	; 32
     490:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     492:	ef e9       	ldi	r30, 0x9F	; 159
     494:	ff e0       	ldi	r31, 0x0F	; 15
     496:	31 97       	sbiw	r30, 0x01	; 1
     498:	f1 f7       	brne	.-4      	; 0x496 <open+0x1c>
     49a:	00 c0       	rjmp	.+0      	; 0x49c <open+0x22>
     49c:	00 00       	nop
    _delay_us(2000);
    PORTC  ^=BV(5);
     49e:	88 b1       	in	r24, 0x08	; 8
     4a0:	89 27       	eor	r24, r25
     4a2:	88 b9       	out	0x08, r24	; 8
     4a4:	8f e9       	ldi	r24, 0x9F	; 159
     4a6:	9c e8       	ldi	r25, 0x8C	; 140
     4a8:	01 97       	sbiw	r24, 0x01	; 1
     4aa:	f1 f7       	brne	.-4      	; 0x4a8 <open+0x2e>
     4ac:	00 c0       	rjmp	.+0      	; 0x4ae <open+0x34>
     4ae:	00 00       	nop
    _delay_us(18000);
    
    return 1;
}
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	08 95       	ret

000004b6 <close>:

int close(void){
    //ToDo: need to update this
    //close sequence
    PORTC = (BV(5));
     4b6:	90 e2       	ldi	r25, 0x20	; 32
     4b8:	98 b9       	out	0x08, r25	; 8
     4ba:	ef ec       	ldi	r30, 0xCF	; 207
     4bc:	f7 e0       	ldi	r31, 0x07	; 7
     4be:	31 97       	sbiw	r30, 0x01	; 1
     4c0:	f1 f7       	brne	.-4      	; 0x4be <close+0x8>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <close+0xe>
     4c4:	00 00       	nop
    _delay_us(1000);
    PORTC   ^=BV(5);
     4c6:	88 b1       	in	r24, 0x08	; 8
     4c8:	89 27       	eor	r24, r25
     4ca:	88 b9       	out	0x08, r24	; 8
     4cc:	8f e6       	ldi	r24, 0x6F	; 111
     4ce:	94 e9       	ldi	r25, 0x94	; 148
     4d0:	01 97       	sbiw	r24, 0x01	; 1
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <close+0x1a>
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <close+0x20>
     4d6:	00 00       	nop
    _delay_us(19000);
    validTag(0);

    return 1;
}
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	08 95       	ret

000004de <initButton>:


void initButton(void){
    // uint8_t button = 3;
    //uint8_t ledG = 2;
    DDRC ^= BV(button); //set as input
     4de:	97 b1       	in	r25, 0x07	; 7
     4e0:	21 e0       	ldi	r18, 0x01	; 1
     4e2:	92 27       	eor	r25, r18
     4e4:	97 b9       	out	0x07, r25	; 7
    DDRC |= BV(ledG); //set output
     4e6:	3a 9a       	sbi	0x07, 2	; 7
    
    PORTC ^= BV(button); // set low
     4e8:	88 b1       	in	r24, 0x08	; 8
     4ea:	82 27       	eor	r24, r18
     4ec:	88 b9       	out	0x08, r24	; 8
     4ee:	08 95       	ret

000004f0 <buttonRead>:
}

int buttonRead(void){
    if(bit_is_clear(PINC, button)){
     4f0:	30 99       	sbic	0x06, 0	; 6
     4f2:	2e c0       	rjmp	.+92     	; 0x550 <buttonRead+0x60>
        LCDClear();
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4fc:	2f ef       	ldi	r18, 0xFF	; 255
     4fe:	89 ef       	ldi	r24, 0xF9	; 249
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	21 50       	subi	r18, 0x01	; 1
     504:	80 40       	sbci	r24, 0x00	; 0
     506:	90 40       	sbci	r25, 0x00	; 0
     508:	e1 f7       	brne	.-8      	; 0x502 <buttonRead+0x12>
     50a:	00 c0       	rjmp	.+0      	; 0x50c <buttonRead+0x1c>
     50c:	00 00       	nop
        _delay_ms(40);
        LCDWriteString("button press");
     50e:	8a e1       	ldi	r24, 0x1A	; 26
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
        open();
     516:	0e 94 3d 02 	call	0x47a	; 0x47a <open>
     51a:	2f ef       	ldi	r18, 0xFF	; 255
     51c:	84 e3       	ldi	r24, 0x34	; 52
     51e:	9c e0       	ldi	r25, 0x0C	; 12
     520:	21 50       	subi	r18, 0x01	; 1
     522:	80 40       	sbci	r24, 0x00	; 0
     524:	90 40       	sbci	r25, 0x00	; 0
     526:	e1 f7       	brne	.-8      	; 0x520 <buttonRead+0x30>
     528:	00 c0       	rjmp	.+0      	; 0x52a <buttonRead+0x3a>
     52a:	00 00       	nop
        _delay_ms(500);
        close();
     52c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <close>
     530:	2f ef       	ldi	r18, 0xFF	; 255
     532:	89 e6       	ldi	r24, 0x69	; 105
     534:	98 e1       	ldi	r25, 0x18	; 24
     536:	21 50       	subi	r18, 0x01	; 1
     538:	80 40       	sbci	r24, 0x00	; 0
     53a:	90 40       	sbci	r25, 0x00	; 0
     53c:	e1 f7       	brne	.-8      	; 0x536 <buttonRead+0x46>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <buttonRead+0x50>
     540:	00 00       	nop
        _delay_ms(1000);
        LCDClear();
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	08 95       	ret
        return 1;
    }
    return 0;
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	90 e0       	ldi	r25, 0x00	; 0
}
     554:	08 95       	ret

00000556 <loadTags>:

void loadTags(void){
     556:	cf 92       	push	r12
     558:	df 92       	push	r13
     55a:	ef 92       	push	r14
     55c:	ff 92       	push	r15
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	c1 e6       	ldi	r28, 0x61	; 97
     568:	d2 e0       	ldi	r29, 0x02	; 2
     56a:	8c e5       	ldi	r24, 0x5C	; 92
     56c:	c8 2e       	mov	r12, r24
     56e:	82 e0       	ldi	r24, 0x02	; 2
     570:	d8 2e       	mov	r13, r24
     572:	9b e6       	ldi	r25, 0x6B	; 107
     574:	e9 2e       	mov	r14, r25
     576:	92 e0       	ldi	r25, 0x02	; 2
     578:	f9 2e       	mov	r15, r25
     57a:	00 e7       	ldi	r16, 0x70	; 112
     57c:	12 e0       	ldi	r17, 0x02	; 2
    for(int i=0; i<5; i++){
        ram_tag1[i] = read_eeprom_word(tag1[i]);
     57e:	89 91       	ld	r24, Y+
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 78 08 	call	0x10f0	; 0x10f0 <eeprom_read_word>
     586:	f6 01       	movw	r30, r12
     588:	81 93       	st	Z+, r24
     58a:	6f 01       	movw	r12, r30
        ram_tag2[i] = read_eeprom_word(tag2[i]);
     58c:	f7 01       	movw	r30, r14
     58e:	81 91       	ld	r24, Z+
     590:	7f 01       	movw	r14, r30
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 78 08 	call	0x10f0	; 0x10f0 <eeprom_read_word>
     598:	f8 01       	movw	r30, r16
     59a:	81 93       	st	Z+, r24
     59c:	8f 01       	movw	r16, r30
    }
    return 0;
}

void loadTags(void){
    for(int i=0; i<5; i++){
     59e:	f2 e0       	ldi	r31, 0x02	; 2
     5a0:	c6 36       	cpi	r28, 0x66	; 102
     5a2:	df 07       	cpc	r29, r31
     5a4:	61 f7       	brne	.-40     	; 0x57e <loadTags+0x28>
        ram_tag1[i] = read_eeprom_word(tag1[i]);
        ram_tag2[i] = read_eeprom_word(tag2[i]);
    }
}
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	ff 90       	pop	r15
     5b0:	ef 90       	pop	r14
     5b2:	df 90       	pop	r13
     5b4:	cf 90       	pop	r12
     5b6:	08 95       	ret

000005b8 <mfrc522_write>:
		mfrc522_write(TxControlReg,byte|0x03);
	}
}

void mfrc522_write(uint8_t reg, uint8_t data)
{
     5b8:	cf 93       	push	r28
     5ba:	c6 2f       	mov	r28, r22
	ENABLE_CHIP();
     5bc:	2a 98       	cbi	0x05, 2	; 5
	spi_transmit((reg<<1)&0x7E);
     5be:	88 0f       	add	r24, r24
     5c0:	8e 77       	andi	r24, 0x7E	; 126
     5c2:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <spi_transmit>
	spi_transmit(data);
     5c6:	8c 2f       	mov	r24, r28
     5c8:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <spi_transmit>
	DISABLE_CHIP();
     5cc:	2a 9a       	sbi	0x05, 2	; 5
}
     5ce:	cf 91       	pop	r28
     5d0:	08 95       	ret

000005d2 <mfrc522_read>:

uint8_t mfrc522_read(uint8_t reg)
{
	uint8_t data;	
	ENABLE_CHIP();
     5d2:	2a 98       	cbi	0x05, 2	; 5
	spi_transmit(((reg<<1)&0x7E)|0x80);
     5d4:	88 0f       	add	r24, r24
     5d6:	8e 77       	andi	r24, 0x7E	; 126
     5d8:	80 68       	ori	r24, 0x80	; 128
     5da:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <spi_transmit>
	data = spi_transmit(0x00);
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <spi_transmit>
	DISABLE_CHIP();
     5e4:	2a 9a       	sbi	0x05, 2	; 5
	return data;
}
     5e6:	08 95       	ret

000005e8 <mfrc522_reset>:

void mfrc522_reset()
{
	mfrc522_write(CommandReg,SoftReset_CMD);
     5e8:	6f e0       	ldi	r22, 0x0F	; 15
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <mfrc522_write>

000005f0 <mfrc522_init>:
#endif

void mfrc522_init()
{
	uint8_t byte;
	mfrc522_reset();
     5f0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <mfrc522_reset>
	
	mfrc522_write(TModeReg, 0x8D);
     5f4:	6d e8       	ldi	r22, 0x8D	; 141
     5f6:	8a e2       	ldi	r24, 0x2A	; 42
     5f8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
    mfrc522_write(TPrescalerReg, 0x3E);
     5fc:	6e e3       	ldi	r22, 0x3E	; 62
     5fe:	8b e2       	ldi	r24, 0x2B	; 43
     600:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
    mfrc522_write(TReloadReg_1, 30);   
     604:	6e e1       	ldi	r22, 0x1E	; 30
     606:	8c e2       	ldi	r24, 0x2C	; 44
     608:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
    mfrc522_write(TReloadReg_2, 0);	
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	8d e2       	ldi	r24, 0x2D	; 45
     610:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
	mfrc522_write(TxASKReg, 0x40);	
     614:	60 e4       	ldi	r22, 0x40	; 64
     616:	85 e1       	ldi	r24, 0x15	; 21
     618:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D);
     61c:	6d e3       	ldi	r22, 0x3D	; 61
     61e:	81 e1       	ldi	r24, 0x11	; 17
     620:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
	
	byte = mfrc522_read(TxControlReg);
     624:	84 e1       	ldi	r24, 0x14	; 20
     626:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <mfrc522_read>
	if(!(byte&0x03))
     62a:	98 2f       	mov	r25, r24
     62c:	93 70       	andi	r25, 0x03	; 3
     62e:	29 f4       	brne	.+10     	; 0x63a <mfrc522_init+0x4a>
	{
		mfrc522_write(TxControlReg,byte|0x03);
     630:	68 2f       	mov	r22, r24
     632:	63 60       	ori	r22, 0x03	; 3
     634:	84 e1       	ldi	r24, 0x14	; 20
     636:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <mfrc522_write>
     63a:	08 95       	ret

0000063c <mfrc522_to_card>:
   
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
     63c:	3f 92       	push	r3
     63e:	4f 92       	push	r4
     640:	5f 92       	push	r5
     642:	6f 92       	push	r6
     644:	7f 92       	push	r7
     646:	8f 92       	push	r8
     648:	9f 92       	push	r9
     64a:	af 92       	push	r10
     64c:	bf 92       	push	r11
     64e:	cf 92       	push	r12
     650:	df 92       	push	r13
     652:	ef 92       	push	r14
     654:	ff 92       	push	r15
     656:	0f 93       	push	r16
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	d8 2e       	mov	r13, r24
     660:	5b 01       	movw	r10, r22
     662:	84 2e       	mov	r8, r20
     664:	79 01       	movw	r14, r18
     666:	e8 01       	movw	r28, r16
    uint8_t lastBits;
    uint8_t n;
    uint8_t	tmp;
    uint32_t i;

    switch (cmd)
     668:	8c e0       	ldi	r24, 0x0C	; 12
     66a:	d8 16       	cp	r13, r24
     66c:	09 f4       	brne	.+2      	; 0x670 <mfrc522_to_card+0x34>
     66e:	6b c0       	rjmp	.+214    	; 0x746 <mfrc522_to_card+0x10a>
     670:	ee e0       	ldi	r30, 0x0E	; 14
     672:	de 16       	cp	r13, r30
     674:	09 f4       	brne	.+2      	; 0x678 <mfrc522_to_card+0x3c>
     676:	6c c0       	rjmp	.+216    	; 0x750 <mfrc522_to_card+0x114>

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
     678:	31 2c       	mov	r3, r1
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
     67a:	c1 2c       	mov	r12, r1
		default:
			break;
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
     67c:	84 e0       	ldi	r24, 0x04	; 4
     67e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <mfrc522_read>
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
     682:	68 2f       	mov	r22, r24
     684:	6f 77       	andi	r22, 0x7F	; 127
     686:	84 e0       	ldi	r24, 0x04	; 4
     688:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
     68c:	8a e0       	ldi	r24, 0x0A	; 10
     68e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <mfrc522_read>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
     692:	68 2f       	mov	r22, r24
     694:	60 68       	ori	r22, 0x80	; 128
     696:	8a e0       	ldi	r24, 0x0A	; 10
     698:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
     6a4:	85 01       	movw	r16, r10

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
     6a6:	41 2c       	mov	r4, r1
     6a8:	51 2c       	mov	r5, r1
     6aa:	32 01       	movw	r6, r4
     6ac:	91 2c       	mov	r9, r1
     6ae:	a1 2c       	mov	r10, r1
     6b0:	b1 2c       	mov	r11, r1
     6b2:	48 14       	cp	r4, r8
     6b4:	59 04       	cpc	r5, r9
     6b6:	6a 04       	cpc	r6, r10
     6b8:	7b 04       	cpc	r7, r11
     6ba:	08 f4       	brcc	.+2      	; 0x6be <mfrc522_to_card+0x82>
     6bc:	4e c0       	rjmp	.+156    	; 0x75a <mfrc522_to_card+0x11e>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
     6be:	6d 2d       	mov	r22, r13
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
    if (cmd == Transceive_CMD)
     6c6:	8c e0       	ldi	r24, 0x0C	; 12
     6c8:	d8 12       	cpse	r13, r24
     6ca:	08 c0       	rjmp	.+16     	; 0x6dc <mfrc522_to_card+0xa0>
    {    
		n=mfrc522_read(BitFramingReg);
     6cc:	8d e0       	ldi	r24, 0x0D	; 13
     6ce:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <mfrc522_read>
		mfrc522_write(BitFramingReg,n|0x80);  
     6d2:	68 2f       	mov	r22, r24
     6d4:	60 68       	ori	r22, 0x80	; 128
     6d6:	8d e0       	ldi	r24, 0x0D	; 13
     6d8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
     6dc:	40 ed       	ldi	r20, 0xD0	; 208
     6de:	84 2e       	mov	r8, r20
     6e0:	47 e0       	ldi	r20, 0x07	; 7
     6e2:	94 2e       	mov	r9, r20
     6e4:	a1 2c       	mov	r10, r1
     6e6:	b1 2c       	mov	r11, r1
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
        i--;
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
     6e8:	13 2d       	mov	r17, r3
     6ea:	11 60       	ori	r17, 0x01	; 1
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
     6ec:	84 e0       	ldi	r24, 0x04	; 4
     6ee:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <mfrc522_read>
     6f2:	08 2f       	mov	r16, r24
        i--;
     6f4:	e1 e0       	ldi	r30, 0x01	; 1
     6f6:	8e 1a       	sub	r8, r30
     6f8:	91 08       	sbc	r9, r1
     6fa:	a1 08       	sbc	r10, r1
     6fc:	b1 08       	sbc	r11, r1
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
     6fe:	19 f0       	breq	.+6      	; 0x706 <mfrc522_to_card+0xca>
     700:	81 2f       	mov	r24, r17
     702:	80 23       	and	r24, r16
     704:	99 f3       	breq	.-26     	; 0x6ec <mfrc522_to_card+0xb0>

	tmp=mfrc522_read(BitFramingReg);
     706:	8d e0       	ldi	r24, 0x0D	; 13
     708:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <mfrc522_read>
	mfrc522_write(BitFramingReg,tmp&(~0x80));
     70c:	68 2f       	mov	r22, r24
     70e:	6f 77       	andi	r22, 0x7F	; 127
     710:	8d e0       	ldi	r24, 0x0D	; 13
     712:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
	
    if (i != 0)
     716:	89 28       	or	r8, r9
     718:	8a 28       	or	r8, r10
     71a:	8b 28       	or	r8, r11
     71c:	51 f5       	brne	.+84     	; 0x772 <mfrc522_to_card+0x136>
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
     71e:	03 e0       	ldi	r16, 0x03	; 3
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //mfrc522_write(cmdReg, PCD_IDLE); 

    return status;
}
     720:	80 2f       	mov	r24, r16
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	0f 91       	pop	r16
     72a:	ff 90       	pop	r15
     72c:	ef 90       	pop	r14
     72e:	df 90       	pop	r13
     730:	cf 90       	pop	r12
     732:	bf 90       	pop	r11
     734:	af 90       	pop	r10
     736:	9f 90       	pop	r9
     738:	8f 90       	pop	r8
     73a:	7f 90       	pop	r7
     73c:	6f 90       	pop	r6
     73e:	5f 90       	pop	r5
     740:	4f 90       	pop	r4
     742:	3f 90       	pop	r3
     744:	08 95       	ret
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
     746:	70 e3       	ldi	r23, 0x30	; 48
     748:	37 2e       	mov	r3, r23
			waitIRq = 0x10;
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
     74a:	e7 e7       	ldi	r30, 0x77	; 119
     74c:	ce 2e       	mov	r12, r30
			waitIRq = 0x30;
			break;
     74e:	96 cf       	rjmp	.-212    	; 0x67c <mfrc522_to_card+0x40>
    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
     750:	50 e1       	ldi	r21, 0x10	; 16
     752:	35 2e       	mov	r3, r21

    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
     754:	62 e1       	ldi	r22, 0x12	; 18
     756:	c6 2e       	mov	r12, r22
     758:	91 cf       	rjmp	.-222    	; 0x67c <mfrc522_to_card+0x40>
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
     75a:	f8 01       	movw	r30, r16
     75c:	61 91       	ld	r22, Z+
     75e:	8f 01       	movw	r16, r30
     760:	89 e0       	ldi	r24, 0x09	; 9
     762:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
     766:	ff ef       	ldi	r31, 0xFF	; 255
     768:	4f 1a       	sub	r4, r31
     76a:	5f 0a       	sbc	r5, r31
     76c:	6f 0a       	sbc	r6, r31
     76e:	7f 0a       	sbc	r7, r31
     770:	a0 cf       	rjmp	.-192    	; 0x6b2 <mfrc522_to_card+0x76>
	tmp=mfrc522_read(BitFramingReg);
	mfrc522_write(BitFramingReg,tmp&(~0x80));
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
     772:	86 e0       	ldi	r24, 0x06	; 6
     774:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <mfrc522_read>
     778:	8b 71       	andi	r24, 0x1B	; 27
     77a:	89 f6       	brne	.-94     	; 0x71e <mfrc522_to_card+0xe2>
        {
            status = CARD_FOUND;
            if (n & irqEn & 0x01)
     77c:	fc 2d       	mov	r31, r12
     77e:	f1 70       	andi	r31, 0x01	; 1
     780:	cf 2e       	mov	r12, r31
     782:	c0 22       	and	r12, r16
     784:	e9 f1       	breq	.+122    	; 0x800 <mfrc522_to_card+0x1c4>
            {   
				status = CARD_NOT_FOUND;			//??   
     786:	02 e0       	ldi	r16, 0x02	; 2
			}

            if (cmd == Transceive_CMD)
     788:	8c e0       	ldi	r24, 0x0C	; 12
     78a:	d8 12       	cpse	r13, r24
     78c:	c9 cf       	rjmp	.-110    	; 0x720 <mfrc522_to_card+0xe4>
            {
               	n = mfrc522_read(FIFOLevelReg);
     78e:	8a e0       	ldi	r24, 0x0A	; 10
     790:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <mfrc522_read>
     794:	18 2f       	mov	r17, r24
              	lastBits = mfrc522_read(ControlReg) & 0x07;
     796:	8c e0       	ldi	r24, 0x0C	; 12
     798:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <mfrc522_read>
     79c:	28 2f       	mov	r18, r24
     79e:	27 70       	andi	r18, 0x07	; 7
     7a0:	81 2f       	mov	r24, r17
     7a2:	90 e0       	ldi	r25, 0x00	; 0
                if (lastBits)
     7a4:	79 f1       	breq	.+94     	; 0x804 <mfrc522_to_card+0x1c8>
                {   
					*back_data_len = (n-1)*8 + lastBits;   
     7a6:	01 97       	sbiw	r24, 0x01	; 1
     7a8:	33 e0       	ldi	r19, 0x03	; 3
     7aa:	88 0f       	add	r24, r24
     7ac:	99 1f       	adc	r25, r25
     7ae:	3a 95       	dec	r19
     7b0:	e1 f7       	brne	.-8      	; 0x7aa <mfrc522_to_card+0x16e>
     7b2:	82 0f       	add	r24, r18
     7b4:	91 1d       	adc	r25, r1
				}
                else
                {   
					*back_data_len = n*8;   
     7b6:	09 2e       	mov	r0, r25
     7b8:	00 0c       	add	r0, r0
     7ba:	aa 0b       	sbc	r26, r26
     7bc:	bb 0b       	sbc	r27, r27
     7be:	88 83       	st	Y, r24
     7c0:	99 83       	std	Y+1, r25	; 0x01
     7c2:	aa 83       	std	Y+2, r26	; 0x02
     7c4:	bb 83       	std	Y+3, r27	; 0x03
				}

                if (n == 0)
     7c6:	11 23       	and	r17, r17
     7c8:	19 f1       	breq	.+70     	; 0x810 <mfrc522_to_card+0x1d4>
     7ca:	11 31       	cpi	r17, 0x11	; 17
     7cc:	08 f0       	brcs	.+2      	; 0x7d0 <mfrc522_to_card+0x194>
     7ce:	10 e1       	ldi	r17, 0x10	; 16
     7d0:	e7 01       	movw	r28, r14
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
     7d2:	81 2c       	mov	r8, r1
     7d4:	91 2c       	mov	r9, r1
     7d6:	54 01       	movw	r10, r8
     7d8:	c1 2e       	mov	r12, r17
     7da:	d1 2c       	mov	r13, r1
     7dc:	e1 2c       	mov	r14, r1
     7de:	f1 2c       	mov	r15, r1
     7e0:	8c 14       	cp	r8, r12
     7e2:	9d 04       	cpc	r9, r13
     7e4:	ae 04       	cpc	r10, r14
     7e6:	bf 04       	cpc	r11, r15
     7e8:	08 f0       	brcs	.+2      	; 0x7ec <mfrc522_to_card+0x1b0>
     7ea:	9a cf       	rjmp	.-204    	; 0x720 <mfrc522_to_card+0xe4>
                {   
					back_data[i] = mfrc522_read(FIFODataReg);    
     7ec:	89 e0       	ldi	r24, 0x09	; 9
     7ee:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <mfrc522_read>
     7f2:	89 93       	st	Y+, r24
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
     7f4:	ef ef       	ldi	r30, 0xFF	; 255
     7f6:	8e 1a       	sub	r8, r30
     7f8:	9e 0a       	sbc	r9, r30
     7fa:	ae 0a       	sbc	r10, r30
     7fc:	be 0a       	sbc	r11, r30
     7fe:	f0 cf       	rjmp	.-32     	; 0x7e0 <mfrc522_to_card+0x1a4>
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
     800:	01 e0       	ldi	r16, 0x01	; 1
     802:	c2 cf       	rjmp	.-124    	; 0x788 <mfrc522_to_card+0x14c>
                {   
					*back_data_len = (n-1)*8 + lastBits;   
				}
                else
                {   
					*back_data_len = n*8;   
     804:	23 e0       	ldi	r18, 0x03	; 3
     806:	88 0f       	add	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	2a 95       	dec	r18
     80c:	e1 f7       	brne	.-8      	; 0x806 <mfrc522_to_card+0x1ca>
     80e:	d3 cf       	rjmp	.-90     	; 0x7b6 <mfrc522_to_card+0x17a>
				}

                if (n == 0)
                {   
					n = 1;    
     810:	11 e0       	ldi	r17, 0x01	; 1
     812:	de cf       	rjmp	.-68     	; 0x7d0 <mfrc522_to_card+0x194>

00000814 <mfrc522_request>:
{
	mfrc522_write(CommandReg,SoftReset_CMD);
}

uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
     814:	ef 92       	push	r14
     816:	ff 92       	push	r15
     818:	0f 93       	push	r16
     81a:	1f 93       	push	r17
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	00 d0       	rcall	.+0      	; 0x822 <mfrc522_request+0xe>
     822:	00 d0       	rcall	.+0      	; 0x824 <mfrc522_request+0x10>
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	18 2f       	mov	r17, r24
     82a:	7b 01       	movw	r14, r22
	uint8_t  status;  
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
     82c:	67 e0       	ldi	r22, 0x07	; 7
     82e:	8d e0       	ldi	r24, 0x0D	; 13
     830:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
	
	tag_type[0] = req_mode;
     834:	f7 01       	movw	r30, r14
     836:	10 83       	st	Z, r17
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
     838:	8e 01       	movw	r16, r28
     83a:	0f 5f       	subi	r16, 0xFF	; 255
     83c:	1f 4f       	sbci	r17, 0xFF	; 255
     83e:	97 01       	movw	r18, r14
     840:	41 e0       	ldi	r20, 0x01	; 1
     842:	b7 01       	movw	r22, r14
     844:	8c e0       	ldi	r24, 0x0C	; 12
     846:	0e 94 1e 03 	call	0x63c	; 0x63c <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
     84a:	81 30       	cpi	r24, 0x01	; 1
     84c:	a1 f4       	brne	.+40     	; 0x876 <mfrc522_request+0x62>
     84e:	49 81       	ldd	r20, Y+1	; 0x01
     850:	5a 81       	ldd	r21, Y+2	; 0x02
     852:	6b 81       	ldd	r22, Y+3	; 0x03
     854:	7c 81       	ldd	r23, Y+4	; 0x04
     856:	40 31       	cpi	r20, 0x10	; 16
     858:	51 05       	cpc	r21, r1
     85a:	61 05       	cpc	r22, r1
     85c:	71 05       	cpc	r23, r1
     85e:	59 f4       	brne	.+22     	; 0x876 <mfrc522_request+0x62>
	{    
		status = ERROR;
	}
   
	return status;
}
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	08 95       	ret
	tag_type[0] = req_mode;
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);

	if ((status != CARD_FOUND) || (backBits != 0x10))
	{    
		status = ERROR;
     876:	83 e0       	ldi	r24, 0x03	; 3
	}
   
	return status;
     878:	f3 cf       	rjmp	.-26     	; 0x860 <mfrc522_request+0x4c>

0000087a <mfrc522_get_card_serial>:
    return status;
}


uint8_t mfrc522_get_card_serial(uint8_t * serial_out)
{
     87a:	ef 92       	push	r14
     87c:	ff 92       	push	r15
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	00 d0       	rcall	.+0      	; 0x888 <mfrc522_get_card_serial+0xe>
     888:	00 d0       	rcall	.+0      	; 0x88a <mfrc522_get_card_serial+0x10>
     88a:	cd b7       	in	r28, 0x3d	; 61
     88c:	de b7       	in	r29, 0x3e	; 62
     88e:	7c 01       	movw	r14, r24
	uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
    uint32_t unLen;
    
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	8d e0       	ldi	r24, 0x0D	; 13
     894:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
 
    serial_out[0] = PICC_ANTICOLL;
     898:	83 e9       	ldi	r24, 0x93	; 147
     89a:	f7 01       	movw	r30, r14
     89c:	80 83       	st	Z, r24
    serial_out[1] = 0x20;
     89e:	80 e2       	ldi	r24, 0x20	; 32
     8a0:	81 83       	std	Z+1, r24	; 0x01
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
     8a2:	8e 01       	movw	r16, r28
     8a4:	0f 5f       	subi	r16, 0xFF	; 255
     8a6:	1f 4f       	sbci	r17, 0xFF	; 255
     8a8:	97 01       	movw	r18, r14
     8aa:	42 e0       	ldi	r20, 0x02	; 2
     8ac:	b7 01       	movw	r22, r14
     8ae:	8c e0       	ldi	r24, 0x0C	; 12
     8b0:	0e 94 1e 03 	call	0x63c	; 0x63c <mfrc522_to_card>

    if (status == CARD_FOUND)
     8b4:	81 30       	cpi	r24, 0x01	; 1
     8b6:	71 f4       	brne	.+28     	; 0x8d4 <mfrc522_get_card_serial+0x5a>
     8b8:	f7 01       	movw	r30, r14
     8ba:	97 01       	movw	r18, r14
     8bc:	2c 5f       	subi	r18, 0xFC	; 252
     8be:	3f 4f       	sbci	r19, 0xFF	; 255
     8c0:	90 e0       	ldi	r25, 0x00	; 0
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{   
		 	serNumCheck ^= serial_out[i];
     8c2:	41 91       	ld	r20, Z+
     8c4:	94 27       	eor	r25, r20
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);

    if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
     8c6:	e2 17       	cp	r30, r18
     8c8:	f3 07       	cpc	r31, r19
     8ca:	d9 f7       	brne	.-10     	; 0x8c2 <mfrc522_get_card_serial+0x48>
		{   
		 	serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
     8cc:	f7 01       	movw	r30, r14
     8ce:	24 81       	ldd	r18, Z+4	; 0x04
     8d0:	92 13       	cpse	r25, r18
		{   
			status = ERROR;    
     8d2:	83 e0       	ldi	r24, 0x03	; 3
		}
    }
    return status;
}
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	ff 90       	pop	r15
     8e6:	ef 90       	pop	r14
     8e8:	08 95       	ret

000008ea <spi_init>:
#include <spi.h>

#if SPI_CONFIG_AS_MASTER
void spi_init()
{
	SPI_DDR = (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
     8ea:	8c e2       	ldi	r24, 0x2C	; 44
     8ec:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//prescaler 16
     8ee:	81 e5       	ldi	r24, 0x51	; 81
     8f0:	8c bd       	out	0x2c, r24	; 44
     8f2:	08 95       	ret

000008f4 <spi_transmit>:
     8f4:	8e bd       	out	0x2e, r24	; 46
     8f6:	0d b4       	in	r0, 0x2d	; 45
     8f8:	07 fe       	sbrs	r0, 7
     8fa:	fd cf       	rjmp	.-6      	; 0x8f6 <spi_transmit+0x2>
     8fc:	8e b5       	in	r24, 0x2e	; 46
     8fe:	08 95       	ret

00000900 <main>:




int main(void)
{
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	cd b7       	in	r28, 0x3d	; 61
     906:	de b7       	in	r29, 0x3e	; 62
     908:	6a 97       	sbiw	r28, 0x1a	; 26
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	f8 94       	cli
     90e:	de bf       	out	0x3e, r29	; 62
     910:	0f be       	out	0x3f, r0	; 63
     912:	cd bf       	out	0x3d, r28	; 61
    
    
    
    
    loadTags(); //load any tags stored in eeprom.
     914:	0e 94 ab 02 	call	0x556	; 0x556 <loadTags>
    initServo(); //make servo an output at pin 5
     918:	0e 94 77 01 	call	0x2ee	; 0x2ee <initServo>
     91c:	2f e7       	ldi	r18, 0x7F	; 127
     91e:	88 e3       	ldi	r24, 0x38	; 56
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	21 50       	subi	r18, 0x01	; 1
     924:	80 40       	sbci	r24, 0x00	; 0
     926:	90 40       	sbci	r25, 0x00	; 0
     928:	e1 f7       	brne	.-8      	; 0x922 <main+0x22>
     92a:	00 c0       	rjmp	.+0      	; 0x92c <main+0x2c>
     92c:	00 00       	nop
    
    uint8_t byte;
    uint8_t str[MAX_LEN];
    _delay_ms(50);
    LCDInit(LS_BLINK);
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	0e 94 a3 00 	call	0x146	; 0x146 <LCDInit>
    LCDWriteStringXY(0,0,"ECEN1310 RFID");
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
     93c:	87 e2       	ldi	r24, 0x27	; 39
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
    LCDWriteStringXY(0,1, "Kevin Kuwata");
     944:	61 e0       	ldi	r22, 0x01	; 1
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
     94c:	85 e3       	ldi	r24, 0x35	; 53
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
     954:	ef ef       	ldi	r30, 0xFF	; 255
     956:	f3 ed       	ldi	r31, 0xD3	; 211
     958:	20 e3       	ldi	r18, 0x30	; 48
     95a:	e1 50       	subi	r30, 0x01	; 1
     95c:	f0 40       	sbci	r31, 0x00	; 0
     95e:	20 40       	sbci	r18, 0x00	; 0
     960:	e1 f7       	brne	.-8      	; 0x95a <main+0x5a>
     962:	00 c0       	rjmp	.+0      	; 0x964 <main+0x64>
     964:	00 00       	nop

    _delay_ms(2000);
    LCDClear();
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
    LCDWriteStringXY(0,0, "Tag Reader");
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
     976:	82 e4       	ldi	r24, 0x42	; 66
     978:	91 e0       	ldi	r25, 0x01	; 1
     97a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
    LCDWriteStringXY(0,1, "Kevin Kuwata");
     97e:	61 e0       	ldi	r22, 0x01	; 1
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
     986:	85 e3       	ldi	r24, 0x35	; 53
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>

    initLED(); //very strange init of led needs to be after load tags and servo!
     98e:	0e 94 8a 01 	call	0x314	; 0x314 <initLED>

    
    spi_init(); //start communication for rfid
     992:	0e 94 75 04 	call	0x8ea	; 0x8ea <spi_init>
     996:	8f ef       	ldi	r24, 0xFF	; 255
     998:	99 e6       	ldi	r25, 0x69	; 105
     99a:	e8 e1       	ldi	r30, 0x18	; 24
     99c:	81 50       	subi	r24, 0x01	; 1
     99e:	90 40       	sbci	r25, 0x00	; 0
     9a0:	e0 40       	sbci	r30, 0x00	; 0
     9a2:	e1 f7       	brne	.-8      	; 0x99c <main+0x9c>
     9a4:	00 c0       	rjmp	.+0      	; 0x9a6 <main+0xa6>
     9a6:	00 00       	nop
    _delay_ms(1000);
    LCDClear();
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
    
    open();  //for testing
     9b0:	0e 94 3d 02 	call	0x47a	; 0x47a <open>
    close(); //was for testing
     9b4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <close>
    
    //init reader
    mfrc522_init();
     9b8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <mfrc522_init>
     9bc:	ff ef       	ldi	r31, 0xFF	; 255
     9be:	2e e9       	ldi	r18, 0x9E	; 158
     9c0:	84 e2       	ldi	r24, 0x24	; 36
     9c2:	f1 50       	subi	r31, 0x01	; 1
     9c4:	20 40       	sbci	r18, 0x00	; 0
     9c6:	80 40       	sbci	r24, 0x00	; 0
     9c8:	e1 f7       	brne	.-8      	; 0x9c2 <main+0xc2>
     9ca:	00 c0       	rjmp	.+0      	; 0x9cc <main+0xcc>
     9cc:	00 00       	nop
    
    _delay_ms(1500);
    LCDClear();
     9ce:	60 e0       	ldi	r22, 0x00	; 0
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
    
    int addNext = 0;
    int deleteNext =0;
    
    
    PORTC |=BV(ledG);
     9d6:	42 9a       	sbi	0x08, 2	; 8
     9d8:	9f e7       	ldi	r25, 0x7F	; 127
     9da:	e2 e3       	ldi	r30, 0x32	; 50
     9dc:	f2 e0       	ldi	r31, 0x02	; 2
     9de:	91 50       	subi	r25, 0x01	; 1
     9e0:	e0 40       	sbci	r30, 0x00	; 0
     9e2:	f0 40       	sbci	r31, 0x00	; 0
     9e4:	e1 f7       	brne	.-8      	; 0x9de <main+0xde>
     9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <main+0xe8>
     9e8:	00 00       	nop
    _delay_ms(90);
    PORTC ^= BV(ledG);
     9ea:	88 b1       	in	r24, 0x08	; 8
     9ec:	94 e0       	ldi	r25, 0x04	; 4
     9ee:	89 27       	eor	r24, r25
     9f0:	88 b9       	out	0x08, r24	; 8
     9f2:	8f e5       	ldi	r24, 0x5F	; 95
     9f4:	9a ee       	ldi	r25, 0xEA	; 234
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	f1 f7       	brne	.-4      	; 0x9f6 <main+0xf6>
     9fa:	00 c0       	rjmp	.+0      	; 0x9fc <main+0xfc>
     9fc:	00 00       	nop
    
    _delay_ms(1500);
    LCDClear();
    
    int addNext = 0;
    int deleteNext =0;
     9fe:	e1 2c       	mov	r14, r1
     a00:	f1 2c       	mov	r15, r1
    mfrc522_init();
    
    _delay_ms(1500);
    LCDClear();
    
    int addNext = 0;
     a02:	00 e0       	ldi	r16, 0x00	; 0
     a04:	10 e0       	ldi	r17, 0x00	; 0
     a06:	4e 01       	movw	r8, r28
     a08:	96 e0       	ldi	r25, 0x06	; 6
     a0a:	89 0e       	add	r8, r25
     a0c:	91 1c       	adc	r9, r1
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
                            write_eeprom_word(tag1[i], 0);
                            write_eeprom_word(tag2[i], 0);
                        }
                        tagNumber =1;
     a0e:	44 24       	eor	r4, r4
     a10:	43 94       	inc	r4
     a12:	51 2c       	mov	r5, r1
    
    while(1){
        
        // initLED();
        
        loadTags();
     a14:	0e 94 ab 02 	call	0x556	; 0x556 <loadTags>
        byte = mfrc522_request(PICC_REQALL,str);
     a18:	be 01       	movw	r22, r28
     a1a:	6f 5f       	subi	r22, 0xFF	; 255
     a1c:	7f 4f       	sbci	r23, 0xFF	; 255
     a1e:	82 e5       	ldi	r24, 0x52	; 82
     a20:	0e 94 0a 04 	call	0x814	; 0x814 <mfrc522_request>
     a24:	d8 2e       	mov	r13, r24
        
        LCDHexDumpXY(0,0,byte);
     a26:	48 2f       	mov	r20, r24
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCDHexDumpXY>
        buttonRead();
     a30:	0e 94 78 02 	call	0x4f0	; 0x4f0 <buttonRead>
        LCDClear();
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
        
        while(deleteNext == 1){
     a3c:	21 e0       	ldi	r18, 0x01	; 1
     a3e:	e2 16       	cp	r14, r18
     a40:	f1 04       	cpc	r15, r1
     a42:	09 f4       	brne	.+2      	; 0xa46 <main+0x146>
     a44:	1e c1       	rjmp	.+572    	; 0xc82 <main+0x382>
        
        while(addNext == 1){
            PORTC |= BV(ledG);
            PORTC |= BV(ledR);
            _delay_ms(50);
            PORTC ^= BV(ledR);
     a46:	62 e0       	ldi	r22, 0x02	; 2
     a48:	b6 2e       	mov	r11, r22
            PORTC ^= BV(ledG);
     a4a:	74 e0       	ldi	r23, 0x04	; 4
     a4c:	a7 2e       	mov	r10, r23
            }
            loadTags();
            byte = mfrc522_request(PICC_REQALL,str);
        }//end of delete next
        
        while(addNext == 1){
     a4e:	01 30       	cpi	r16, 0x01	; 1
     a50:	11 05       	cpc	r17, r1
     a52:	09 f4       	brne	.+2      	; 0xa56 <main+0x156>
     a54:	ab c1       	rjmp	.+854    	; 0xdac <main+0x4ac>
            }
            loadTags();
            byte = mfrc522_request(PICC_REQALL,str);
        }
        
        if(byte == CARD_FOUND && addNext !=1)
     a56:	91 e0       	ldi	r25, 0x01	; 1
     a58:	d9 12       	cpse	r13, r25
     a5a:	1f c3       	rjmp	.+1598   	; 0x109a <main+0x79a>
        {
            byte = mfrc522_get_card_serial(str);
     a5c:	ce 01       	movw	r24, r28
     a5e:	01 96       	adiw	r24, 0x01	; 1
     a60:	0e 94 3d 04 	call	0x87a	; 0x87a <mfrc522_get_card_serial>
            if(byte == CARD_FOUND)
     a64:	81 30       	cpi	r24, 0x01	; 1
     a66:	09 f0       	breq	.+2      	; 0xa6a <main+0x16a>
     a68:	f5 c2       	rjmp	.+1514   	; 0x1054 <main+0x754>
     a6a:	fe 01       	movw	r30, r28
     a6c:	31 96       	adiw	r30, 0x01	; 1
     a6e:	7f 01       	movw	r14, r30
            {
                for(byte=0;byte<5;byte++){
                    LCDWriteInt(str[byte], -1);
     a70:	f7 01       	movw	r30, r14
     a72:	81 91       	ld	r24, Z+
     a74:	7f 01       	movw	r14, r30
     a76:	6f ef       	ldi	r22, 0xFF	; 255
     a78:	7f ef       	ldi	r23, 0xFF	; 255
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteInt>
        if(byte == CARD_FOUND && addNext !=1)
        {
            byte = mfrc522_get_card_serial(str);
            if(byte == CARD_FOUND)
            {
                for(byte=0;byte<5;byte++){
     a80:	e8 14       	cp	r14, r8
     a82:	f9 04       	cpc	r15, r9
     a84:	a9 f7       	brne	.-22     	; 0xa70 <main+0x170>
     a86:	ce 01       	movw	r24, r28
     a88:	01 96       	adiw	r24, 0x01	; 1
     a8a:	6c 01       	movw	r12, r24
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
                            write_eeprom_word(tag2[i], str[i]);
                        }
                        tagNumber=3;
                        addNext = 0;
     a8c:	3c 01       	movw	r6, r24
     a8e:	8f e5       	ldi	r24, 0x5F	; 95
     a90:	9a ee       	ldi	r25, 0xEA	; 234
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	f1 f7       	brne	.-4      	; 0xa92 <main+0x192>
     a96:	00 c0       	rjmp	.+0      	; 0xa98 <main+0x198>
     a98:	00 00       	nop
            { //not a valid card found
                LCDWriteStringXY(0,1,"Error");
            }
            for(int i=0; i<5; i++){
                _delay_ms(30);//test
                LCDWriteInt(str[i], -1);//test
     a9a:	f3 01       	movw	r30, r6
     a9c:	81 91       	ld	r24, Z+
     a9e:	3f 01       	movw	r6, r30
     aa0:	6f ef       	ldi	r22, 0xFF	; 255
     aa2:	7f ef       	ldi	r23, 0xFF	; 255
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteInt>
            }
            else
            { //not a valid card found
                LCDWriteStringXY(0,1,"Error");
            }
            for(int i=0; i<5; i++){
     aaa:	86 14       	cp	r8, r6
     aac:	97 04       	cpc	r9, r7
     aae:	79 f7       	brne	.-34     	; 0xa8e <main+0x18e>
     ab0:	ff ef       	ldi	r31, 0xFF	; 255
     ab2:	20 e7       	ldi	r18, 0x70	; 112
     ab4:	82 e0       	ldi	r24, 0x02	; 2
     ab6:	f1 50       	subi	r31, 0x01	; 1
     ab8:	20 40       	sbci	r18, 0x00	; 0
     aba:	80 40       	sbci	r24, 0x00	; 0
     abc:	e1 f7       	brne	.-8      	; 0xab6 <main+0x1b6>
     abe:	00 c0       	rjmp	.+0      	; 0xac0 <main+0x1c0>
     ac0:	00 00       	nop
                _delay_ms(30);//test
                LCDWriteInt(str[i], -1);//test
            }
            _delay_ms(100);//test
            LCDClear();//test
     ac2:	60 e0       	ldi	r22, 0x00	; 0
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
     aca:	e0 e1       	ldi	r30, 0x10	; 16
     acc:	f1 e0       	ldi	r31, 0x01	; 1
     ace:	fa 8f       	std	Y+26, r31	; 0x1a
     ad0:	e9 8f       	std	Y+25, r30	; 0x19
     ad2:	2b e0       	ldi	r18, 0x0B	; 11
     ad4:	22 2e       	mov	r2, r18
     ad6:	21 e0       	ldi	r18, 0x01	; 1
     ad8:	32 2e       	mov	r3, r18
     ada:	86 e0       	ldi	r24, 0x06	; 6
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	9c 8b       	std	Y+20, r25	; 0x14
     ae0:	8b 8b       	std	Y+19, r24	; 0x13
     ae2:	e0 e7       	ldi	r30, 0x70	; 112
     ae4:	f2 e0       	ldi	r31, 0x02	; 2
     ae6:	f8 8f       	std	Y+24, r31	; 0x18
     ae8:	ef 8b       	std	Y+23, r30	; 0x17
     aea:	8c e5       	ldi	r24, 0x5C	; 92
     aec:	92 e0       	ldi	r25, 0x02	; 2
     aee:	9a 8b       	std	Y+18, r25	; 0x12
     af0:	89 8b       	std	Y+17, r24	; 0x11
     af2:	e5 e1       	ldi	r30, 0x15	; 21
     af4:	f1 e0       	ldi	r31, 0x01	; 1
     af6:	fe 8b       	std	Y+22, r31	; 0x16
     af8:	ed 8b       	std	Y+21, r30	; 0x15
     afa:	78 01       	movw	r14, r16
     afc:	58 01       	movw	r10, r16
            
            for(int k=0;k<5 ;k++){ //loop through id arras
                LCDWriteIntXY(0,1,str[k], -1);
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
     b06:	f6 01       	movw	r30, r12
     b08:	80 81       	ld	r24, Z
     b0a:	6f ef       	ldi	r22, 0xFF	; 255
     b0c:	7f ef       	ldi	r23, 0xFF	; 255
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteInt>
                if(str[k] == card2[k] || str[k] == card1[k] || str[k] == ram_tag1[k] || str[k] ==ram_tag2[k]) //tag compare
     b14:	f6 01       	movw	r30, r12
     b16:	80 81       	ld	r24, Z
     b18:	e9 8d       	ldd	r30, Y+25	; 0x19
     b1a:	fa 8d       	ldd	r31, Y+26	; 0x1a
     b1c:	91 91       	ld	r25, Z+
     b1e:	fa 8f       	std	Y+26, r31	; 0x1a
     b20:	e9 8f       	std	Y+25, r30	; 0x19
     b22:	89 17       	cp	r24, r25
     b24:	79 f0       	breq	.+30     	; 0xb44 <main+0x244>
     b26:	ed 89       	ldd	r30, Y+21	; 0x15
     b28:	fe 89       	ldd	r31, Y+22	; 0x16
     b2a:	90 81       	ld	r25, Z
     b2c:	89 17       	cp	r24, r25
     b2e:	51 f0       	breq	.+20     	; 0xb44 <main+0x244>
     b30:	e9 89       	ldd	r30, Y+17	; 0x11
     b32:	fa 89       	ldd	r31, Y+18	; 0x12
     b34:	90 81       	ld	r25, Z
     b36:	89 17       	cp	r24, r25
     b38:	29 f0       	breq	.+10     	; 0xb44 <main+0x244>
     b3a:	ef 89       	ldd	r30, Y+23	; 0x17
     b3c:	f8 8d       	ldd	r31, Y+24	; 0x18
     b3e:	90 81       	ld	r25, Z
     b40:	89 13       	cpse	r24, r25
     b42:	91 c2       	rjmp	.+1314   	; 0x1066 <main+0x766>
                {
                    LCDWriteIntXY(0,1,str[k], -1);
     b44:	61 e0       	ldi	r22, 0x01	; 1
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
     b4c:	f6 01       	movw	r30, r12
     b4e:	80 81       	ld	r24, Z
     b50:	6f ef       	ldi	r22, 0xFF	; 255
     b52:	7f ef       	ldi	r23, 0xFF	; 255
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteInt>
                    LCDWriteString("MATCH");
     b5a:	87 e2       	ldi	r24, 0x27	; 39
     b5c:	92 e0       	ldi	r25, 0x02	; 2
     b5e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
     b62:	ff e7       	ldi	r31, 0x7F	; 127
     b64:	28 e3       	ldi	r18, 0x38	; 56
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	f1 50       	subi	r31, 0x01	; 1
     b6a:	20 40       	sbci	r18, 0x00	; 0
     b6c:	80 40       	sbci	r24, 0x00	; 0
     b6e:	e1 f7       	brne	.-8      	; 0xb68 <main+0x268>
     b70:	00 c0       	rjmp	.+0      	; 0xb72 <main+0x272>
     b72:	00 00       	nop
                    _delay_ms(50);
                    LCDClear();
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                    validCard = 1;
     b7c:	50 92 05 01 	sts	0x0105, r5
     b80:	40 92 04 01 	sts	0x0104, r4
     b84:	ff ef       	ldi	r31, 0xFF	; 255
     b86:	cf 1a       	sub	r12, r31
     b88:	df 0a       	sbc	r13, r31
     b8a:	2f ef       	ldi	r18, 0xFF	; 255
     b8c:	22 1a       	sub	r2, r18
     b8e:	32 0a       	sbc	r3, r18
     b90:	8b 89       	ldd	r24, Y+19	; 0x13
     b92:	9c 89       	ldd	r25, Y+20	; 0x14
     b94:	01 96       	adiw	r24, 0x01	; 1
     b96:	9c 8b       	std	Y+20, r25	; 0x14
     b98:	8b 8b       	std	Y+19, r24	; 0x13
     b9a:	ef 89       	ldd	r30, Y+23	; 0x17
     b9c:	f8 8d       	ldd	r31, Y+24	; 0x18
     b9e:	31 96       	adiw	r30, 0x01	; 1
     ba0:	f8 8f       	std	Y+24, r31	; 0x18
     ba2:	ef 8b       	std	Y+23, r30	; 0x17
     ba4:	89 89       	ldd	r24, Y+17	; 0x11
     ba6:	9a 89       	ldd	r25, Y+18	; 0x12
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	9a 8b       	std	Y+18, r25	; 0x12
     bac:	89 8b       	std	Y+17, r24	; 0x11
     bae:	ed 89       	ldd	r30, Y+21	; 0x15
     bb0:	fe 89       	ldd	r31, Y+22	; 0x16
     bb2:	31 96       	adiw	r30, 0x01	; 1
     bb4:	fe 8b       	std	Y+22, r31	; 0x16
     bb6:	ed 8b       	std	Y+21, r30	; 0x15
                LCDWriteInt(str[i], -1);//test
            }
            _delay_ms(100);//test
            LCDClear();//test
            
            for(int k=0;k<5 ;k++){ //loop through id arras
     bb8:	6c 14       	cp	r6, r12
     bba:	7d 04       	cpc	r7, r13
     bbc:	09 f0       	breq	.+2      	; 0xbc0 <main+0x2c0>
     bbe:	9f cf       	rjmp	.-194    	; 0xafe <main+0x1fe>
                    validCard = -1;
                    deleteNext = 0;
                    addNext = 0;
                }
            } //end of for loop checking if what type of tag
            if(validCard == 1){
     bc0:	80 91 04 01 	lds	r24, 0x0104
     bc4:	90 91 05 01 	lds	r25, 0x0105
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	29 f5       	brne	.+74     	; 0xc16 <main+0x316>
                LCDClear();
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
     bd4:	ff ef       	ldi	r31, 0xFF	; 255
     bd6:	24 e3       	ldi	r18, 0x34	; 52
     bd8:	8c e0       	ldi	r24, 0x0C	; 12
     bda:	f1 50       	subi	r31, 0x01	; 1
     bdc:	20 40       	sbci	r18, 0x00	; 0
     bde:	80 40       	sbci	r24, 0x00	; 0
     be0:	e1 f7       	brne	.-8      	; 0xbda <main+0x2da>
     be2:	00 c0       	rjmp	.+0      	; 0xbe4 <main+0x2e4>
     be4:	00 00       	nop
                _delay_ms(500);
                LCDWriteString("Access Granted");
     be6:	8d e2       	ldi	r24, 0x2D	; 45
     be8:	92 e0       	ldi	r25, 0x02	; 2
     bea:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
                open();
     bee:	0e 94 3d 02 	call	0x47a	; 0x47a <open>
                validCard=5;
     bf2:	85 e0       	ldi	r24, 0x05	; 5
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	90 93 05 01 	sts	0x0105, r25
     bfa:	80 93 04 01 	sts	0x0104, r24
     bfe:	9f ef       	ldi	r25, 0xFF	; 255
     c00:	e9 e6       	ldi	r30, 0x69	; 105
     c02:	f8 e1       	ldi	r31, 0x18	; 24
     c04:	91 50       	subi	r25, 0x01	; 1
     c06:	e0 40       	sbci	r30, 0x00	; 0
     c08:	f0 40       	sbci	r31, 0x00	; 0
     c0a:	e1 f7       	brne	.-8      	; 0xc04 <main+0x304>
     c0c:	00 c0       	rjmp	.+0      	; 0xc0e <main+0x30e>
     c0e:	00 00       	nop
                deleteNext =0;
                _delay_ms(1000);
                close();
     c10:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <close>
                LCDClear();
                _delay_ms(500);
                LCDWriteString("Access Granted");
                open();
                validCard=5;
                deleteNext =0;
     c14:	78 01       	movw	r14, r16
                _delay_ms(1000);
                close();
                
            } //end if test worked
            if(validCard == -1 && addNext !=1){
     c16:	80 91 04 01 	lds	r24, 0x0104
     c1a:	90 91 05 01 	lds	r25, 0x0105
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	31 f5       	brne	.+76     	; 0xc6e <main+0x36e>
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	a8 16       	cp	r10, r24
     c26:	b1 04       	cpc	r11, r1
     c28:	11 f1       	breq	.+68     	; 0xc6e <main+0x36e>
                LCDClear();
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
     c32:	9f ef       	ldi	r25, 0xFF	; 255
     c34:	e0 e7       	ldi	r30, 0x70	; 112
     c36:	f2 e0       	ldi	r31, 0x02	; 2
     c38:	91 50       	subi	r25, 0x01	; 1
     c3a:	e0 40       	sbci	r30, 0x00	; 0
     c3c:	f0 40       	sbci	r31, 0x00	; 0
     c3e:	e1 f7       	brne	.-8      	; 0xc38 <main+0x338>
     c40:	00 c0       	rjmp	.+0      	; 0xc42 <main+0x342>
     c42:	00 00       	nop
                _delay_ms(100);
                LCDWriteString("Access Denied");
     c44:	8c e3       	ldi	r24, 0x3C	; 60
     c46:	92 e0       	ldi	r25, 0x02	; 2
     c48:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
                //close();
                validTag(-1);
     c4c:	8f ef       	ldi	r24, 0xFF	; 255
     c4e:	9f ef       	ldi	r25, 0xFF	; 255
     c50:	0e 94 1e 02 	call	0x43c	; 0x43c <validTag>
     c54:	2f ef       	ldi	r18, 0xFF	; 255
     c56:	80 e7       	ldi	r24, 0x70	; 112
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	21 50       	subi	r18, 0x01	; 1
     c5c:	80 40       	sbci	r24, 0x00	; 0
     c5e:	90 40       	sbci	r25, 0x00	; 0
     c60:	e1 f7       	brne	.-8      	; 0xc5a <main+0x35a>
     c62:	00 c0       	rjmp	.+0      	; 0xc64 <main+0x364>
     c64:	00 00       	nop
                _delay_ms(100);
                validTag(-1);
     c66:	8f ef       	ldi	r24, 0xFF	; 255
     c68:	9f ef       	ldi	r25, 0xFF	; 255
     c6a:	0e 94 1e 02 	call	0x43c	; 0x43c <validTag>
                LCDClear();
            }
            
        } //end of valid card found
        
        LCDWriteStringXY(0,0,"Present Tag");
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
     c76:	8a e4       	ldi	r24, 0x4A	; 74
     c78:	92 e0       	ldi	r25, 0x02	; 2
     c7a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
    
    while(1){
        
        // initLED();
        
        loadTags();
     c7e:	85 01       	movw	r16, r10
     c80:	c9 ce       	rjmp	.-622    	; 0xa14 <main+0x114>
        LCDHexDumpXY(0,0,byte);
        buttonRead();
        LCDClear();
        
        while(deleteNext == 1){
            LCDClear();
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
            LCDWriteString("delete tag acivated");
     c8a:	8d e4       	ldi	r24, 0x4D	; 77
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
     c92:	ef ef       	ldi	r30, 0xFF	; 255
     c94:	f7 e8       	ldi	r31, 0x87	; 135
     c96:	23 e1       	ldi	r18, 0x13	; 19
     c98:	e1 50       	subi	r30, 0x01	; 1
     c9a:	f0 40       	sbci	r31, 0x00	; 0
     c9c:	20 40       	sbci	r18, 0x00	; 0
     c9e:	e1 f7       	brne	.-8      	; 0xc98 <main+0x398>
     ca0:	00 c0       	rjmp	.+0      	; 0xca2 <main+0x3a2>
     ca2:	00 00       	nop
            _delay_ms(800);
            byte = mfrc522_request(PICC_REQALL,str);
     ca4:	be 01       	movw	r22, r28
     ca6:	6f 5f       	subi	r22, 0xFF	; 255
     ca8:	7f 4f       	sbci	r23, 0xFF	; 255
     caa:	82 e5       	ldi	r24, 0x52	; 82
     cac:	0e 94 0a 04 	call	0x814	; 0x814 <mfrc522_request>
            LCDClear();
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
            LCDWriteString("Scan again to ");
     cb8:	81 e6       	ldi	r24, 0x61	; 97
     cba:	91 e0       	ldi	r25, 0x01	; 1
     cbc:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
            LCDWriteStringXY(0, 1, "delete all tags.");
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
     cc8:	80 e7       	ldi	r24, 0x70	; 112
     cca:	91 e0       	ldi	r25, 0x01	; 1
     ccc:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
            byte = mfrc522_request(PICC_REQALL,str);
     cd0:	be 01       	movw	r22, r28
     cd2:	6f 5f       	subi	r22, 0xFF	; 255
     cd4:	7f 4f       	sbci	r23, 0xFF	; 255
     cd6:	82 e5       	ldi	r24, 0x52	; 82
     cd8:	0e 94 0a 04 	call	0x814	; 0x814 <mfrc522_request>
            if(byte == CARD_FOUND)
     cdc:	81 30       	cpi	r24, 0x01	; 1
     cde:	09 f0       	breq	.+2      	; 0xce2 <main+0x3e2>
     ce0:	5b c0       	rjmp	.+182    	; 0xd98 <main+0x498>
            {
                byte = mfrc522_get_card_serial(str);
     ce2:	ce 01       	movw	r24, r28
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	0e 94 3d 04 	call	0x87a	; 0x87a <mfrc522_get_card_serial>
                if(byte == CARD_FOUND)
     cea:	81 30       	cpi	r24, 0x01	; 1
     cec:	09 f0       	breq	.+2      	; 0xcf0 <main+0x3f0>
     cee:	54 c0       	rjmp	.+168    	; 0xd98 <main+0x498>
     cf0:	fe 01       	movw	r30, r28
     cf2:	31 96       	adiw	r30, 0x01	; 1
     cf4:	a6 e0       	ldi	r26, 0x06	; 6
     cf6:	b1 e0       	ldi	r27, 0x01	; 1
                        if (tagNumber == 0 || str[j] != tag1[j] || str[j] != tag2[j]) {
                            deleteNext = 0;
                        }
                    }
                    for(int i=0; i<=4; i++){
                        if(str[i] == DELETE[i]){
     cf8:	91 91       	ld	r25, Z+
     cfa:	8d 91       	ld	r24, X+
                    for(int j=0; j<=4; j++){
                        if (tagNumber == 0 || str[j] != tag1[j] || str[j] != tag2[j]) {
                            deleteNext = 0;
                        }
                    }
                    for(int i=0; i<=4; i++){
     cfc:	e8 15       	cp	r30, r8
     cfe:	f9 05       	cpc	r31, r9
     d00:	d9 f7       	brne	.-10     	; 0xcf8 <main+0x3f8>
                        }
                        else
                            deleteNext =0;
                    }//end of check if duplicate
                    
                    if(deleteNext ==1){
     d02:	98 13       	cpse	r25, r24
     d04:	47 c0       	rjmp	.+142    	; 0xd94 <main+0x494>
                        LCDClear();
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                        LCDWriteString("Removing Tags");
     d0e:	81 e8       	ldi	r24, 0x81	; 129
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
     d16:	8f ef       	ldi	r24, 0xFF	; 255
     d18:	99 e6       	ldi	r25, 0x69	; 105
     d1a:	e8 e1       	ldi	r30, 0x18	; 24
     d1c:	81 50       	subi	r24, 0x01	; 1
     d1e:	90 40       	sbci	r25, 0x00	; 0
     d20:	e0 40       	sbci	r30, 0x00	; 0
     d22:	e1 f7       	brne	.-8      	; 0xd1c <main+0x41c>
     d24:	00 c0       	rjmp	.+0      	; 0xd26 <main+0x426>
     d26:	00 00       	nop
     d28:	e1 e6       	ldi	r30, 0x61	; 97
     d2a:	ee 2e       	mov	r14, r30
     d2c:	e2 e0       	ldi	r30, 0x02	; 2
     d2e:	fe 2e       	mov	r15, r30
     d30:	fb e6       	ldi	r31, 0x6B	; 107
     d32:	cf 2e       	mov	r12, r31
     d34:	f2 e0       	ldi	r31, 0x02	; 2
     d36:	df 2e       	mov	r13, r31
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
                            write_eeprom_word(tag1[i], 0);
     d38:	f7 01       	movw	r30, r14
     d3a:	81 91       	ld	r24, Z+
     d3c:	7f 01       	movw	r14, r30
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 7e 08 	call	0x10fc	; 0x10fc <eeprom_write_word>
                            write_eeprom_word(tag2[i], 0);
     d48:	f6 01       	movw	r30, r12
     d4a:	81 91       	ld	r24, Z+
     d4c:	6f 01       	movw	r12, r30
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 7e 08 	call	0x10fc	; 0x10fc <eeprom_write_word>
                    
                    if(deleteNext ==1){
                        LCDClear();
                        LCDWriteString("Removing Tags");
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
     d58:	86 e6       	ldi	r24, 0x66	; 102
     d5a:	92 e0       	ldi	r25, 0x02	; 2
     d5c:	8e 15       	cp	r24, r14
     d5e:	9f 05       	cpc	r25, r15
     d60:	59 f7       	brne	.-42     	; 0xd38 <main+0x438>
                            write_eeprom_word(tag1[i], 0);
                            write_eeprom_word(tag2[i], 0);
                        }
                        tagNumber =1;
     d62:	50 92 03 01 	sts	0x0103, r5
     d66:	40 92 02 01 	sts	0x0102, r4
                        deleteNext =0;
                        LCDClear();
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                        LCDWriteString("Tags Erased");
     d72:	8f e8       	ldi	r24, 0x8F	; 143
     d74:	91 e0       	ldi	r25, 0x01	; 1
     d76:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
     d7a:	9f ef       	ldi	r25, 0xFF	; 255
     d7c:	e2 e5       	ldi	r30, 0x52	; 82
     d7e:	f7 e0       	ldi	r31, 0x07	; 7
     d80:	91 50       	subi	r25, 0x01	; 1
     d82:	e0 40       	sbci	r30, 0x00	; 0
     d84:	f0 40       	sbci	r31, 0x00	; 0
     d86:	e1 f7       	brne	.-8      	; 0xd80 <main+0x480>
     d88:	00 c0       	rjmp	.+0      	; 0xd8a <main+0x48a>
     d8a:	00 00       	nop
                        _delay_ms(300);
                        tagNumber =1;
     d8c:	50 92 03 01 	sts	0x0103, r5
     d90:	40 92 02 01 	sts	0x0102, r4
                        
                    }
                    deleteNext =0;
     d94:	e1 2c       	mov	r14, r1
     d96:	f1 2c       	mov	r15, r1
                    // addNext =0;
                }//end of if card found
            }
            loadTags();
     d98:	0e 94 ab 02 	call	0x556	; 0x556 <loadTags>
            byte = mfrc522_request(PICC_REQALL,str);
     d9c:	be 01       	movw	r22, r28
     d9e:	6f 5f       	subi	r22, 0xFF	; 255
     da0:	7f 4f       	sbci	r23, 0xFF	; 255
     da2:	82 e5       	ldi	r24, 0x52	; 82
     da4:	0e 94 0a 04 	call	0x814	; 0x814 <mfrc522_request>
     da8:	d8 2e       	mov	r13, r24
     daa:	48 ce       	rjmp	.-880    	; 0xa3c <main+0x13c>
        }//end of delete next
        
        while(addNext == 1){
            PORTC |= BV(ledG);
     dac:	42 9a       	sbi	0x08, 2	; 8
            PORTC |= BV(ledR);
     dae:	41 9a       	sbi	0x08, 1	; 8
     db0:	8f e7       	ldi	r24, 0x7F	; 127
     db2:	98 e3       	ldi	r25, 0x38	; 56
     db4:	e1 e0       	ldi	r30, 0x01	; 1
     db6:	81 50       	subi	r24, 0x01	; 1
     db8:	90 40       	sbci	r25, 0x00	; 0
     dba:	e0 40       	sbci	r30, 0x00	; 0
     dbc:	e1 f7       	brne	.-8      	; 0xdb6 <main+0x4b6>
     dbe:	00 c0       	rjmp	.+0      	; 0xdc0 <main+0x4c0>
     dc0:	00 00       	nop
            _delay_ms(50);
            PORTC ^= BV(ledR);
     dc2:	88 b1       	in	r24, 0x08	; 8
     dc4:	8b 25       	eor	r24, r11
     dc6:	88 b9       	out	0x08, r24	; 8
            PORTC ^= BV(ledG);
     dc8:	88 b1       	in	r24, 0x08	; 8
     dca:	8a 25       	eor	r24, r10
     dcc:	88 b9       	out	0x08, r24	; 8
     dce:	ff e7       	ldi	r31, 0x7F	; 127
     dd0:	28 e3       	ldi	r18, 0x38	; 56
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	f1 50       	subi	r31, 0x01	; 1
     dd6:	20 40       	sbci	r18, 0x00	; 0
     dd8:	80 40       	sbci	r24, 0x00	; 0
     dda:	e1 f7       	brne	.-8      	; 0xdd4 <main+0x4d4>
     ddc:	00 c0       	rjmp	.+0      	; 0xdde <main+0x4de>
     dde:	00 00       	nop
            _delay_ms(50);


            
            
            byte = mfrc522_request(PICC_REQALL,str);
     de0:	be 01       	movw	r22, r28
     de2:	6f 5f       	subi	r22, 0xFF	; 255
     de4:	7f 4f       	sbci	r23, 0xFF	; 255
     de6:	82 e5       	ldi	r24, 0x52	; 82
     de8:	0e 94 0a 04 	call	0x814	; 0x814 <mfrc522_request>
            LCDClear();
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
            LCDWriteString("Scan tag to ");
     df4:	8b e9       	ldi	r24, 0x9B	; 155
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
            LCDWriteStringXY(0, 1, "be added.");
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
     e04:	88 ea       	ldi	r24, 0xA8	; 168
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
            byte = mfrc522_request(PICC_REQALL,str);
     e0c:	be 01       	movw	r22, r28
     e0e:	6f 5f       	subi	r22, 0xFF	; 255
     e10:	7f 4f       	sbci	r23, 0xFF	; 255
     e12:	82 e5       	ldi	r24, 0x52	; 82
     e14:	0e 94 0a 04 	call	0x814	; 0x814 <mfrc522_request>
     e18:	d8 2e       	mov	r13, r24
            
            if(addNext ==1 && tagNumber >2)
     e1a:	80 91 02 01 	lds	r24, 0x0102
     e1e:	90 91 03 01 	lds	r25, 0x0103
     e22:	03 97       	sbiw	r24, 0x03	; 3
     e24:	c4 f0       	brlt	.+48     	; 0xe56 <main+0x556>
            {
                addNext =0;
                tagNumber =3;
     e26:	e3 e0       	ldi	r30, 0x03	; 3
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	f0 93 03 01 	sts	0x0103, r31
     e2e:	e0 93 02 01 	sts	0x0102, r30
                LCDClear();
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                LCDWriteString("Full");
     e3a:	82 eb       	ldi	r24, 0xB2	; 178
     e3c:	91 e0       	ldi	r25, 0x01	; 1
     e3e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
     e42:	ff ef       	ldi	r31, 0xFF	; 255
     e44:	29 e6       	ldi	r18, 0x69	; 105
     e46:	88 e1       	ldi	r24, 0x18	; 24
     e48:	f1 50       	subi	r31, 0x01	; 1
     e4a:	20 40       	sbci	r18, 0x00	; 0
     e4c:	80 40       	sbci	r24, 0x00	; 0
     e4e:	e1 f7       	brne	.-8      	; 0xe48 <main+0x548>
     e50:	00 c0       	rjmp	.+0      	; 0xe52 <main+0x552>
     e52:	00 00       	nop
            LCDWriteStringXY(0, 1, "be added.");
            byte = mfrc522_request(PICC_REQALL,str);
            
            if(addNext ==1 && tagNumber >2)
            {
                addNext =0;
     e54:	87 01       	movw	r16, r14
                LCDClear();
                LCDWriteString("Full");
                _delay_ms(1000);
                
            }
            if(byte == CARD_FOUND)
     e56:	91 e0       	ldi	r25, 0x01	; 1
     e58:	d9 12       	cpse	r13, r25
     e5a:	77 c0       	rjmp	.+238    	; 0xf4a <main+0x64a>
            {
                byte = mfrc522_get_card_serial(str);
     e5c:	ce 01       	movw	r24, r28
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	0e 94 3d 04 	call	0x87a	; 0x87a <mfrc522_get_card_serial>
                if(byte == CARD_FOUND)
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	09 f0       	breq	.+2      	; 0xe6a <main+0x56a>
     e68:	70 c0       	rjmp	.+224    	; 0xf4a <main+0x64a>
     e6a:	67 01       	movw	r12, r14
                {
                    for(int i=0; i<=4; i++){
                        if(str[i] == ram_tag1[i] || str[i]== ram_tag2[i]){
     e6c:	e1 e0       	ldi	r30, 0x01	; 1
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	ec 0f       	add	r30, r28
     e72:	fd 1f       	adc	r31, r29
     e74:	ec 0d       	add	r30, r12
     e76:	fd 1d       	adc	r31, r13
     e78:	80 81       	ld	r24, Z
     e7a:	f6 01       	movw	r30, r12
     e7c:	e4 5a       	subi	r30, 0xA4	; 164
     e7e:	fd 4f       	sbci	r31, 0xFD	; 253
     e80:	90 81       	ld	r25, Z
     e82:	89 17       	cp	r24, r25
     e84:	31 f0       	breq	.+12     	; 0xe92 <main+0x592>
     e86:	f6 01       	movw	r30, r12
     e88:	e0 59       	subi	r30, 0x90	; 144
     e8a:	fd 4f       	sbci	r31, 0xFD	; 253
     e8c:	90 81       	ld	r25, Z
     e8e:	89 13       	cpse	r24, r25
     e90:	66 c0       	rjmp	.+204    	; 0xf5e <main+0x65e>
                            LCDClear();
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                            LCDWriteString("CARD ALREADY");
     e9a:	87 eb       	ldi	r24, 0xB7	; 183
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
                            LCDWriteString("IN EEPROM!");
     ea2:	84 ec       	ldi	r24, 0xC4	; 196
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
     eaa:	ef ef       	ldi	r30, 0xFF	; 255
     eac:	f3 ed       	ldi	r31, 0xD3	; 211
     eae:	20 e3       	ldi	r18, 0x30	; 48
     eb0:	e1 50       	subi	r30, 0x01	; 1
     eb2:	f0 40       	sbci	r31, 0x00	; 0
     eb4:	20 40       	sbci	r18, 0x00	; 0
     eb6:	e1 f7       	brne	.-8      	; 0xeb0 <main+0x5b0>
     eb8:	00 c0       	rjmp	.+0      	; 0xeba <main+0x5ba>
     eba:	00 00       	nop
                            _delay_ms(2000);
                            addNext =0;//duplicate
     ebc:	87 01       	movw	r16, r14
            if(byte == CARD_FOUND)
            {
                byte = mfrc522_get_card_serial(str);
                if(byte == CARD_FOUND)
                {
                    for(int i=0; i<=4; i++){
     ebe:	2f ef       	ldi	r18, 0xFF	; 255
     ec0:	c2 1a       	sub	r12, r18
     ec2:	d2 0a       	sbc	r13, r18
     ec4:	85 e0       	ldi	r24, 0x05	; 5
     ec6:	c8 16       	cp	r12, r24
     ec8:	d1 04       	cpc	r13, r1
     eca:	84 f2       	brlt	.-96     	; 0xe6c <main+0x56c>
                                //not likely to happen but it could
                            

                        }
                    }//end of check if duplicate
                    LCDClear();
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                    if(tagNumber ==1 && addNext ==1){
     ed4:	80 91 02 01 	lds	r24, 0x0102
     ed8:	90 91 03 01 	lds	r25, 0x0103
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	91 05       	cpc	r25, r1
     ee0:	09 f0       	breq	.+2      	; 0xee4 <main+0x5e4>
     ee2:	89 c0       	rjmp	.+274    	; 0xff6 <main+0x6f6>
     ee4:	01 30       	cpi	r16, 0x01	; 1
     ee6:	11 05       	cpc	r17, r1
     ee8:	81 f5       	brne	.+96     	; 0xf4a <main+0x64a>
                        LCDClear();
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                        LCDWriteString("ADDING CARD 1");
     ef2:	85 e0       	ldi	r24, 0x05	; 5
     ef4:	92 e0       	ldi	r25, 0x02	; 2
     ef6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
     efa:	9f ef       	ldi	r25, 0xFF	; 255
     efc:	e9 e6       	ldi	r30, 0x69	; 105
     efe:	f8 e1       	ldi	r31, 0x18	; 24
     f00:	91 50       	subi	r25, 0x01	; 1
     f02:	e0 40       	sbci	r30, 0x00	; 0
     f04:	f0 40       	sbci	r31, 0x00	; 0
     f06:	e1 f7       	brne	.-8      	; 0xf00 <main+0x600>
     f08:	00 c0       	rjmp	.+0      	; 0xf0a <main+0x60a>
     f0a:	00 00       	nop
     f0c:	8e 01       	movw	r16, r28
     f0e:	0f 5f       	subi	r16, 0xFF	; 255
     f10:	1f 4f       	sbci	r17, 0xFF	; 255
     f12:	41 e6       	ldi	r20, 0x61	; 97
     f14:	c4 2e       	mov	r12, r20
     f16:	42 e0       	ldi	r20, 0x02	; 2
     f18:	d4 2e       	mov	r13, r20
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
                            write_eeprom_word(tag1[i], str[i]);
     f1a:	f8 01       	movw	r30, r16
     f1c:	61 91       	ld	r22, Z+
     f1e:	8f 01       	movw	r16, r30
     f20:	f6 01       	movw	r30, r12
     f22:	81 91       	ld	r24, Z+
     f24:	6f 01       	movw	r12, r30
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 7e 08 	call	0x10fc	; 0x10fc <eeprom_write_word>
                    LCDClear();
                    if(tagNumber ==1 && addNext ==1){
                        LCDClear();
                        LCDWriteString("ADDING CARD 1");
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
     f2e:	08 15       	cp	r16, r8
     f30:	19 05       	cpc	r17, r9
     f32:	99 f7       	brne	.-26     	; 0xf1a <main+0x61a>
                            write_eeprom_word(tag1[i], str[i]);
                        }
                        tagNumber=2;
     f34:	82 e0       	ldi	r24, 0x02	; 2
     f36:	90 e0       	ldi	r25, 0x00	; 0
                        LCDWriteString("ADDING CARD 2");
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
                            write_eeprom_word(tag2[i], str[i]);
                        }
                        tagNumber=3;
     f38:	90 93 03 01 	sts	0x0103, r25
     f3c:	80 93 02 01 	sts	0x0102, r24
                        addNext = 0;
                        deleteNext =0;
                        LCDClear();
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
                            write_eeprom_word(tag2[i], str[i]);
                        }
                        tagNumber=3;
                        addNext = 0;
     f48:	87 01       	movw	r16, r14
                     
                     */
                    
                }//end of if card found
            }
            loadTags();
     f4a:	0e 94 ab 02 	call	0x556	; 0x556 <loadTags>
            byte = mfrc522_request(PICC_REQALL,str);
     f4e:	be 01       	movw	r22, r28
     f50:	6f 5f       	subi	r22, 0xFF	; 255
     f52:	7f 4f       	sbci	r23, 0xFF	; 255
     f54:	82 e5       	ldi	r24, 0x52	; 82
     f56:	0e 94 0a 04 	call	0x814	; 0x814 <mfrc522_request>
     f5a:	d8 2e       	mov	r13, r24
     f5c:	78 cd       	rjmp	.-1296   	; 0xa4e <main+0x14e>
                            LCDWriteString("IN EEPROM!");
                            _delay_ms(2000);
                            addNext =0;//duplicate
                            //not likely to happen but it could
                        }
                        else if(str[i] == DELETE[i] || str[i] == ADD[i]){
     f5e:	f6 01       	movw	r30, r12
     f60:	ea 5f       	subi	r30, 0xFA	; 250
     f62:	fe 4f       	sbci	r31, 0xFE	; 254
     f64:	90 81       	ld	r25, Z
     f66:	89 17       	cp	r24, r25
     f68:	31 f0       	breq	.+12     	; 0xf76 <main+0x676>
     f6a:	f6 01       	movw	r30, r12
     f6c:	e5 5f       	subi	r30, 0xF5	; 245
     f6e:	fe 4f       	sbci	r31, 0xFE	; 254
     f70:	90 81       	ld	r25, Z
     f72:	89 13       	cpse	r24, r25
     f74:	a4 cf       	rjmp	.-184    	; 0xebe <main+0x5be>
                                LCDClear();
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                                LCDWriteString("Error:");
     f7e:	8f ec       	ldi	r24, 0xCF	; 207
     f80:	91 e0       	ldi	r25, 0x01	; 1
     f82:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
                            LCDWriteStringXY(0,1,"attempting to");
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
     f8e:	86 ed       	ldi	r24, 0xD6	; 214
     f90:	91 e0       	ldi	r25, 0x01	; 1
     f92:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
     f96:	8f ef       	ldi	r24, 0xFF	; 255
     f98:	99 e6       	ldi	r25, 0x69	; 105
     f9a:	e8 e1       	ldi	r30, 0x18	; 24
     f9c:	81 50       	subi	r24, 0x01	; 1
     f9e:	90 40       	sbci	r25, 0x00	; 0
     fa0:	e0 40       	sbci	r30, 0x00	; 0
     fa2:	e1 f7       	brne	.-8      	; 0xf9c <main+0x69c>
     fa4:	00 c0       	rjmp	.+0      	; 0xfa6 <main+0x6a6>
     fa6:	00 00       	nop
                            _delay_ms(1000);
                            LCDWriteStringXY(0,1,"add a protected");
     fa8:	61 e0       	ldi	r22, 0x01	; 1
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
     fb0:	84 ee       	ldi	r24, 0xE4	; 228
     fb2:	91 e0       	ldi	r25, 0x01	; 1
     fb4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
     fb8:	ff ef       	ldi	r31, 0xFF	; 255
     fba:	29 e6       	ldi	r18, 0x69	; 105
     fbc:	88 e1       	ldi	r24, 0x18	; 24
     fbe:	f1 50       	subi	r31, 0x01	; 1
     fc0:	20 40       	sbci	r18, 0x00	; 0
     fc2:	80 40       	sbci	r24, 0x00	; 0
     fc4:	e1 f7       	brne	.-8      	; 0xfbe <main+0x6be>
     fc6:	00 c0       	rjmp	.+0      	; 0xfc8 <main+0x6c8>
     fc8:	00 00       	nop
                            _delay_ms(1000);
                            LCDWriteStringXY(0,1,"RFID tag.       ")
     fca:	61 e0       	ldi	r22, 0x01	; 1
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
     fd2:	84 ef       	ldi	r24, 0xF4	; 244
     fd4:	91 e0       	ldi	r25, 0x01	; 1
     fd6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
     fda:	9f ef       	ldi	r25, 0xFF	; 255
     fdc:	e9 e6       	ldi	r30, 0x69	; 105
     fde:	f8 e1       	ldi	r31, 0x18	; 24
     fe0:	91 50       	subi	r25, 0x01	; 1
     fe2:	e0 40       	sbci	r30, 0x00	; 0
     fe4:	f0 40       	sbci	r31, 0x00	; 0
     fe6:	e1 f7       	brne	.-8      	; 0xfe0 <main+0x6e0>
     fe8:	00 c0       	rjmp	.+0      	; 0xfea <main+0x6ea>
     fea:	00 00       	nop
                            _delay_ms(1000);
                            addNext =0;//duplicate
     fec:	87 01       	movw	r16, r14
                            i=5;
     fee:	55 e0       	ldi	r21, 0x05	; 5
     ff0:	c5 2e       	mov	r12, r21
     ff2:	d1 2c       	mov	r13, r1
     ff4:	64 cf       	rjmp	.-312    	; 0xebe <main+0x5be>
                        addNext =0;
                        deleteNext =0;
                        LCDClear();
                    }
                    
                    else if(tagNumber ==2 && addNext ==1){
     ff6:	02 97       	sbiw	r24, 0x02	; 2
     ff8:	09 f0       	breq	.+2      	; 0xffc <main+0x6fc>
     ffa:	a7 cf       	rjmp	.-178    	; 0xf4a <main+0x64a>
     ffc:	01 30       	cpi	r16, 0x01	; 1
     ffe:	11 05       	cpc	r17, r1
    1000:	09 f0       	breq	.+2      	; 0x1004 <main+0x704>
    1002:	a3 cf       	rjmp	.-186    	; 0xf4a <main+0x64a>
                        LCDClear();
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                        LCDWriteString("ADDING CARD 2");
    100c:	83 e1       	ldi	r24, 0x13	; 19
    100e:	92 e0       	ldi	r25, 0x02	; 2
    1010:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
    1014:	9f ef       	ldi	r25, 0xFF	; 255
    1016:	e9 e6       	ldi	r30, 0x69	; 105
    1018:	f8 e1       	ldi	r31, 0x18	; 24
    101a:	91 50       	subi	r25, 0x01	; 1
    101c:	e0 40       	sbci	r30, 0x00	; 0
    101e:	f0 40       	sbci	r31, 0x00	; 0
    1020:	e1 f7       	brne	.-8      	; 0x101a <main+0x71a>
    1022:	00 c0       	rjmp	.+0      	; 0x1024 <main+0x724>
    1024:	00 00       	nop
    1026:	8e 01       	movw	r16, r28
    1028:	0f 5f       	subi	r16, 0xFF	; 255
    102a:	1f 4f       	sbci	r17, 0xFF	; 255
    102c:	3b e6       	ldi	r19, 0x6B	; 107
    102e:	c3 2e       	mov	r12, r19
    1030:	32 e0       	ldi	r19, 0x02	; 2
    1032:	d3 2e       	mov	r13, r19
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
                            write_eeprom_word(tag2[i], str[i]);
    1034:	f8 01       	movw	r30, r16
    1036:	61 91       	ld	r22, Z+
    1038:	8f 01       	movw	r16, r30
    103a:	f6 01       	movw	r30, r12
    103c:	81 91       	ld	r24, Z+
    103e:	6f 01       	movw	r12, r30
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 7e 08 	call	0x10fc	; 0x10fc <eeprom_write_word>
                    
                    else if(tagNumber ==2 && addNext ==1){
                        LCDClear();
                        LCDWriteString("ADDING CARD 2");
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
    1048:	08 15       	cp	r16, r8
    104a:	19 05       	cpc	r17, r9
    104c:	99 f7       	brne	.-26     	; 0x1034 <main+0x734>
                            write_eeprom_word(tag2[i], str[i]);
                        }
                        tagNumber=3;
    104e:	83 e0       	ldi	r24, 0x03	; 3
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	72 cf       	rjmp	.-284    	; 0xf38 <main+0x638>
                    if(card_display_Delay==1){_delay_ms(1000);}
                }
            }
            else
            { //not a valid card found
                LCDWriteStringXY(0,1,"Error");
    1054:	61 e0       	ldi	r22, 0x01	; 1
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
    105c:	81 e2       	ldi	r24, 0x21	; 33
    105e:	92 e0       	ldi	r25, 0x02	; 2
    1060:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
    1064:	10 cd       	rjmp	.-1504   	; 0xa86 <main+0x186>
                    LCDWriteString("MATCH");
                    _delay_ms(50);
                    LCDClear();
                    validCard = 1;
                }
                else if(str[k] == ADD[k]){
    1066:	f1 01       	movw	r30, r2
    1068:	90 81       	ld	r25, Z
    106a:	89 17       	cp	r24, r25
    106c:	71 f0       	breq	.+28     	; 0x108a <main+0x78a>
                    //nextTag read add
                    addNext = 1; //add the next tag
                    
                } //end of add
                else if(str[k] == DELETE[k]){
    106e:	eb 89       	ldd	r30, Y+19	; 0x13
    1070:	fc 89       	ldd	r31, Y+20	; 0x14
    1072:	90 81       	ld	r25, Z
    1074:	89 17       	cp	r24, r25
    1076:	69 f0       	breq	.+26     	; 0x1092 <main+0x792>
                    deleteNext =1;
                }
                else{
                    validCard = -1;
    1078:	8f ef       	ldi	r24, 0xFF	; 255
    107a:	9f ef       	ldi	r25, 0xFF	; 255
    107c:	90 93 05 01 	sts	0x0105, r25
    1080:	80 93 04 01 	sts	0x0104, r24
                    deleteNext = 0;
    1084:	78 01       	movw	r14, r16
                    addNext = 0;
    1086:	58 01       	movw	r10, r16
    1088:	7d cd       	rjmp	.-1286   	; 0xb84 <main+0x284>
                    LCDClear();
                    validCard = 1;
                }
                else if(str[k] == ADD[k]){
                    //nextTag read add
                    addNext = 1; //add the next tag
    108a:	aa 24       	eor	r10, r10
    108c:	a3 94       	inc	r10
    108e:	b1 2c       	mov	r11, r1
    1090:	79 cd       	rjmp	.-1294   	; 0xb84 <main+0x284>
                    
                } //end of add
                else if(str[k] == DELETE[k]){
                    deleteNext =1;
    1092:	ee 24       	eor	r14, r14
    1094:	e3 94       	inc	r14
    1096:	f1 2c       	mov	r15, r1
    1098:	75 cd       	rjmp	.-1302   	; 0xb84 <main+0x284>
    109a:	78 01       	movw	r14, r16
    109c:	58 01       	movw	r10, r16
    109e:	e7 cd       	rjmp	.-1074   	; 0xc6e <main+0x36e>

000010a0 <__divmodhi4>:
    10a0:	97 fb       	bst	r25, 7
    10a2:	07 2e       	mov	r0, r23
    10a4:	16 f4       	brtc	.+4      	; 0x10aa <__divmodhi4+0xa>
    10a6:	00 94       	com	r0
    10a8:	07 d0       	rcall	.+14     	; 0x10b8 <__divmodhi4_neg1>
    10aa:	77 fd       	sbrc	r23, 7
    10ac:	09 d0       	rcall	.+18     	; 0x10c0 <__divmodhi4_neg2>
    10ae:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__udivmodhi4>
    10b2:	07 fc       	sbrc	r0, 7
    10b4:	05 d0       	rcall	.+10     	; 0x10c0 <__divmodhi4_neg2>
    10b6:	3e f4       	brtc	.+14     	; 0x10c6 <__divmodhi4_exit>

000010b8 <__divmodhi4_neg1>:
    10b8:	90 95       	com	r25
    10ba:	81 95       	neg	r24
    10bc:	9f 4f       	sbci	r25, 0xFF	; 255
    10be:	08 95       	ret

000010c0 <__divmodhi4_neg2>:
    10c0:	70 95       	com	r23
    10c2:	61 95       	neg	r22
    10c4:	7f 4f       	sbci	r23, 0xFF	; 255

000010c6 <__divmodhi4_exit>:
    10c6:	08 95       	ret

000010c8 <__udivmodhi4>:
    10c8:	aa 1b       	sub	r26, r26
    10ca:	bb 1b       	sub	r27, r27
    10cc:	51 e1       	ldi	r21, 0x11	; 17
    10ce:	07 c0       	rjmp	.+14     	; 0x10de <__udivmodhi4_ep>

000010d0 <__udivmodhi4_loop>:
    10d0:	aa 1f       	adc	r26, r26
    10d2:	bb 1f       	adc	r27, r27
    10d4:	a6 17       	cp	r26, r22
    10d6:	b7 07       	cpc	r27, r23
    10d8:	10 f0       	brcs	.+4      	; 0x10de <__udivmodhi4_ep>
    10da:	a6 1b       	sub	r26, r22
    10dc:	b7 0b       	sbc	r27, r23

000010de <__udivmodhi4_ep>:
    10de:	88 1f       	adc	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	5a 95       	dec	r21
    10e4:	a9 f7       	brne	.-22     	; 0x10d0 <__udivmodhi4_loop>
    10e6:	80 95       	com	r24
    10e8:	90 95       	com	r25
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	08 95       	ret

000010f0 <eeprom_read_word>:
    10f0:	a8 e1       	ldi	r26, 0x18	; 24
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	42 e0       	ldi	r20, 0x02	; 2
    10f6:	50 e0       	ldi	r21, 0x00	; 0
    10f8:	0c 94 85 08 	jmp	0x110a	; 0x110a <eeprom_read_blraw>

000010fc <eeprom_write_word>:
    10fc:	0e 94 93 08 	call	0x1126	; 0x1126 <eeprom_write_byte>
    1100:	27 2f       	mov	r18, r23
    1102:	0c 94 94 08 	jmp	0x1128	; 0x1128 <eeprom_write_r18>

00001106 <eeprom_read_block>:
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22

0000110a <eeprom_read_blraw>:
    110a:	fc 01       	movw	r30, r24
    110c:	f9 99       	sbic	0x1f, 1	; 31
    110e:	fe cf       	rjmp	.-4      	; 0x110c <eeprom_read_blraw+0x2>
    1110:	06 c0       	rjmp	.+12     	; 0x111e <eeprom_read_blraw+0x14>
    1112:	f2 bd       	out	0x22, r31	; 34
    1114:	e1 bd       	out	0x21, r30	; 33
    1116:	f8 9a       	sbi	0x1f, 0	; 31
    1118:	31 96       	adiw	r30, 0x01	; 1
    111a:	00 b4       	in	r0, 0x20	; 32
    111c:	0d 92       	st	X+, r0
    111e:	41 50       	subi	r20, 0x01	; 1
    1120:	50 40       	sbci	r21, 0x00	; 0
    1122:	b8 f7       	brcc	.-18     	; 0x1112 <eeprom_read_blraw+0x8>
    1124:	08 95       	ret

00001126 <eeprom_write_byte>:
    1126:	26 2f       	mov	r18, r22

00001128 <eeprom_write_r18>:
    1128:	f9 99       	sbic	0x1f, 1	; 31
    112a:	fe cf       	rjmp	.-4      	; 0x1128 <eeprom_write_r18>
    112c:	1f ba       	out	0x1f, r1	; 31
    112e:	92 bd       	out	0x22, r25	; 34
    1130:	81 bd       	out	0x21, r24	; 33
    1132:	20 bd       	out	0x20, r18	; 32
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	fa 9a       	sbi	0x1f, 2	; 31
    113a:	f9 9a       	sbi	0x1f, 1	; 31
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	08 95       	ret

00001142 <_exit>:
    1142:	f8 94       	cli

00001144 <__stop_program>:
    1144:	ff cf       	rjmp	.-2      	; 0x1144 <__stop_program>
