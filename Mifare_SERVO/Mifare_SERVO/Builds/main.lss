
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f0  00800100  00000fc8  0000107c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fc8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  008001f0  008001f0  0000116c  2**0
                  ALLOC
  3 .eeprom       0000000c  00810000  00810000  0000116c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00002fd0  00000000  00000000  00001178  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00001504  00000000  00000000  00004148  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000564c  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005660  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  000056a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  00005c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001d  00000000  00000000  00006236  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  00006253  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ec       	ldi	r30, 0xC8	; 200
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 3f       	cpi	r26, 0xF0	; 240
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 ef       	ldi	r26, 0xF0	; 240
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 31       	cpi	r26, 0x1E	; 30
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 80 04 	call	0x900	; 0x900 <main>
  9e:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	80 7f       	andi	r24, 0xF0	; 240
  aa:	8a b9       	out	0x0a, r24	; 10

	//change LCD mode
	SET_RW();		//Read mode
  ac:	5e 9a       	sbi	0x0b, 6	; 11
	CLEAR_RS();		//Read status
  ae:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCDBusyLoop+0xc>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <LCDBusyLoop+0xe>

	
	do
	{

		SET_E();
  b4:	5c 9a       	sbi	0x0b, 4	; 11
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <LCDBusyLoop+0x12>
  b8:	00 c0       	rjmp	.+0      	; 0xba <LCDBusyLoop+0x14>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
  ba:	89 b1       	in	r24, 0x09	; 9
		status=status<<4;
  bc:	82 95       	swap	r24
  be:	80 7f       	andi	r24, 0xF0	; 240
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <LCDBusyLoop+0x1c>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <LCDBusyLoop+0x1e>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  c4:	5c 98       	cbi	0x0b, 4	; 11
  c6:	92 e0       	ldi	r25, 0x02	; 2
  c8:	9a 95       	dec	r25
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCDBusyLoop+0x22>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LCDBusyLoop+0x28>
		_delay_us(1);	//tEL

		SET_E();
  ce:	5c 9a       	sbi	0x0b, 4	; 11
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCDBusyLoop+0x2c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCDBusyLoop+0x2e>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
  d4:	99 b1       	in	r25, 0x09	; 9
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <LCDBusyLoop+0x32>
  d8:	00 c0       	rjmp	.+0      	; 0xda <LCDBusyLoop+0x34>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
  da:	5c 98       	cbi	0x0b, 4	; 11
  dc:	92 e0       	ldi	r25, 0x02	; 2
  de:	9a 95       	dec	r25
  e0:	f1 f7       	brne	.-4      	; 0xde <LCDBusyLoop+0x38>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCDBusyLoop+0x3e>
		_delay_us(1);	//tEL
	}while(busy);
  e4:	87 fd       	sbrc	r24, 7
  e6:	e6 cf       	rjmp	.-52     	; 0xb4 <LCDBusyLoop+0xe>

	CLEAR_RW();		//write mode
  e8:	5e 98       	cbi	0x0b, 6	; 11
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
  ea:	8a b1       	in	r24, 0x0a	; 10
  ec:	8f 60       	ori	r24, 0x0F	; 15
  ee:	8a b9       	out	0x0a, r24	; 10
  f0:	08 95       	ret

000000f2 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
  f2:	38 2f       	mov	r19, r24
  f4:	32 95       	swap	r19
  f6:	3f 70       	andi	r19, 0x0F	; 15
ln=(c & 0x0F);
  f8:	28 2f       	mov	r18, r24
  fa:	2f 70       	andi	r18, 0x0F	; 15

if(isdata==0)
  fc:	61 11       	cpse	r22, r1
  fe:	21 c0       	rjmp	.+66     	; 0x142 <LCDByte+0x50>
	CLEAR_RS();
 100:	5d 98       	cbi	0x0b, 5	; 11
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCDByte+0x12>
 104:	00 c0       	rjmp	.+0      	; 0x106 <LCDByte+0x14>
else
	SET_RS();

_delay_us(0.500);		//tAS

SET_E();
 106:	5c 9a       	sbi	0x0b, 4	; 11

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 108:	9b b1       	in	r25, 0x0b	; 11
 10a:	90 7f       	andi	r25, 0xF0	; 240
 10c:	93 2b       	or	r25, r19
LCD_DATA_PORT=temp;
 10e:	9b b9       	out	0x0b, r25	; 11
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	8a 95       	dec	r24
 114:	f1 f7       	brne	.-4      	; 0x112 <LCDByte+0x20>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 118:	5c 98       	cbi	0x0b, 4	; 11
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	8a 95       	dec	r24
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCDByte+0x2a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCDByte+0x30>

_delay_us(1);

//Send the lower nibble
SET_E();
 122:	5c 9a       	sbi	0x0b, 4	; 11

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	82 2b       	or	r24, r18

LCD_DATA_PORT=temp;
 12a:	8b b9       	out	0x0b, r24	; 11
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	8a 95       	dec	r24
 130:	f1 f7       	brne	.-4      	; 0x12e <LCDByte+0x3c>
 132:	00 c0       	rjmp	.+0      	; 0x134 <LCDByte+0x42>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 134:	5c 98       	cbi	0x0b, 4	; 11
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCDByte+0x46>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCDByte+0x4c>

_delay_us(1);			//tEL

LCDBusyLoop();
 13e:	0c 94 53 00 	jmp	0xa6	; 0xa6 <LCDBusyLoop>
ln=(c & 0x0F);

if(isdata==0)
	CLEAR_RS();
else
	SET_RS();
 142:	5d 9a       	sbi	0x0b, 5	; 11
 144:	de cf       	rjmp	.-68     	; 0x102 <LCDByte+0x10>

00000146 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	8f e5       	ldi	r24, 0x5F	; 95
 14c:	9a ee       	ldi	r25, 0xEA	; 234
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <LCDInit+0x8>
 152:	00 c0       	rjmp	.+0      	; 0x154 <LCDInit+0xe>
 154:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 156:	8a b1       	in	r24, 0x0a	; 10
 158:	8f 60       	ori	r24, 0x0F	; 15
 15a:	8a b9       	out	0x0a, r24	; 10
	LCD_E_DDR|=(1<<LCD_E_POS);
 15c:	54 9a       	sbi	0x0a, 4	; 10
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 15e:	55 9a       	sbi	0x0a, 5	; 10
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 160:	56 9a       	sbi	0x0a, 6	; 10

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 162:	8b b1       	in	r24, 0x0b	; 11
 164:	80 7f       	andi	r24, 0xF0	; 240
 166:	8b b9       	out	0x0b, r24	; 11
	CLEAR_E();
 168:	5c 98       	cbi	0x0b, 4	; 11
	CLEAR_RW();
 16a:	5e 98       	cbi	0x0b, 6	; 11
	CLEAR_RS();
 16c:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCDInit+0x2a>
 170:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 172:	5c 9a       	sbi	0x0b, 4	; 11
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 174:	59 9a       	sbi	0x0b, 1	; 11
 176:	92 e0       	ldi	r25, 0x02	; 2
 178:	9a 95       	dec	r25
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCDInit+0x32>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCDInit+0x38>
	_delay_us(1);
	CLEAR_E();
 17e:	5c 98       	cbi	0x0b, 4	; 11
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	8a 95       	dec	r24
 184:	f1 f7       	brne	.-4      	; 0x182 <LCDInit+0x3c>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LCDInit+0x42>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 188:	0e 94 53 00 	call	0xa6	; 0xa6 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	8c 2f       	mov	r24, r28
 190:	8c 60       	ori	r24, 0x0C	; 12
 192:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	88 e2       	ldi	r24, 0x28	; 40
 19a:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	80 e8       	ldi	r24, 0x80	; 128
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format

	
	LCDGotoXY(0,0);

}
 1a2:	cf 91       	pop	r28
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 1a4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <LCDByte>

000001a8 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	ec 01       	movw	r28, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 1b2:	88 81       	ld	r24, Y
 1b4:	81 11       	cpse	r24, r1
 1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <LCDWriteString+0x1a>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	08 95       	ret

	*****************************************************************/
 while(*msg!='\0')
 {
 	//Custom Char Support
	if(*msg=='%')
 1c2:	85 32       	cpi	r24, 0x25	; 37
 1c4:	99 f4       	brne	.+38     	; 0x1ec <LCDWriteString+0x44>
	{
		msg++;
 1c6:	8e 01       	movw	r16, r28
 1c8:	0f 5f       	subi	r16, 0xFF	; 255
 1ca:	1f 4f       	sbci	r17, 0xFF	; 255
		int8_t cc=*msg-'0';
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
		{
			LCDData(cc);
 1d0:	61 e0       	ldi	r22, 0x01	; 1
	if(*msg=='%')
	{
		msg++;
		int8_t cc=*msg-'0';

		if(cc>=0 && cc<=7)
 1d2:	88 30       	cpi	r24, 0x08	; 8
 1d4:	28 f4       	brcc	.+10     	; 0x1e0 <LCDWriteString+0x38>
			LCDData(cc);
		}
		else
		{
			LCDData('%');
			LCDData(*msg);
 1d6:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	}
	else
	{
		LCDData(*msg);
	}
	msg++;
 1da:	e8 01       	movw	r28, r16
 1dc:	21 96       	adiw	r28, 0x01	; 1
 1de:	e9 cf       	rjmp	.-46     	; 0x1b2 <LCDWriteString+0xa>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 1e0:	85 e2       	ldi	r24, 0x25	; 37
 1e2:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
			LCDData(*msg);
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	f5 cf       	rjmp	.-22     	; 0x1d6 <LCDWriteString+0x2e>
		}
	}
	else
	{
		LCDData(*msg);
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 1f2:	8e 01       	movw	r16, r28
 1f4:	f2 cf       	rjmp	.-28     	; 0x1da <LCDWriteString+0x32>

000001f6 <LCDWriteInt>:
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
{
 1f6:	ef 92       	push	r14
 1f8:	ff 92       	push	r15
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	00 d0       	rcall	.+0      	; 0x204 <LCDWriteInt+0xe>
 204:	00 d0       	rcall	.+0      	; 0x206 <LCDWriteInt+0x10>
 206:	1f 92       	push	r1
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	9b 01       	movw	r18, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 20e:	ae 01       	movw	r20, r28
 210:	4f 5f       	subi	r20, 0xFF	; 255
 212:	5f 4f       	sbci	r21, 0xFF	; 255
 214:	7a 01       	movw	r14, r20
 216:	45 e0       	ldi	r20, 0x05	; 5
 218:	f7 01       	movw	r30, r14
 21a:	11 92       	st	Z+, r1
 21c:	4a 95       	dec	r20
 21e:	e9 f7       	brne	.-6      	; 0x21a <LCDWriteInt+0x24>
 220:	fe 01       	movw	r30, r28
 222:	36 96       	adiw	r30, 0x06	; 6
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 224:	0a e0       	ldi	r16, 0x0A	; 10
 226:	10 e0       	ldi	r17, 0x00	; 0

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 228:	00 97       	sbiw	r24, 0x00	; 0
 22a:	f1 f4       	brne	.+60     	; 0x268 <LCDWriteInt+0x72>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 22c:	2f 3f       	cpi	r18, 0xFF	; 255
 22e:	ff ef       	ldi	r31, 0xFF	; 255
 230:	3f 07       	cpc	r19, r31
 232:	01 f5       	brne	.+64     	; 0x274 <LCDWriteInt+0x7e>
 234:	f7 01       	movw	r30, r14
 236:	8f 01       	movw	r16, r30
 238:	0e 19       	sub	r16, r14
 23a:	1f 09       	sbc	r17, r15
		while(str[j]==0) j++;
 23c:	81 91       	ld	r24, Z+
 23e:	88 23       	and	r24, r24
 240:	d1 f3       	breq	.-12     	; 0x236 <LCDWriteInt+0x40>
 242:	0e 0d       	add	r16, r14
 244:	1f 1d       	adc	r17, r15
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 246:	c8 01       	movw	r24, r16
 248:	8e 19       	sub	r24, r14
 24a:	9f 09       	sbc	r25, r15
 24c:	05 97       	sbiw	r24, 0x05	; 5
 24e:	bc f0       	brlt	.+46     	; 0x27e <LCDWriteInt+0x88>
	{
	LCDData(48+str[i]);
	}
}
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	1f 91       	pop	r17
 260:	0f 91       	pop	r16
 262:	ff 90       	pop	r15
 264:	ef 90       	pop	r14
 266:	08 95       	ret

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 268:	b8 01       	movw	r22, r16
 26a:	0e 94 91 07 	call	0xf22	; 0xf22 <__divmodhi4>
 26e:	82 93       	st	-Z, r24
	val=val/10;
 270:	cb 01       	movw	r24, r22
 272:	da cf       	rjmp	.-76     	; 0x228 <LCDWriteInt+0x32>
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
	else
		j=5-field_length;
 274:	05 e0       	ldi	r16, 0x05	; 5
 276:	10 e0       	ldi	r17, 0x00	; 0
 278:	02 1b       	sub	r16, r18
 27a:	13 0b       	sbc	r17, r19
 27c:	e2 cf       	rjmp	.-60     	; 0x242 <LCDWriteInt+0x4c>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 27e:	f8 01       	movw	r30, r16
 280:	81 91       	ld	r24, Z+
 282:	8f 01       	movw	r16, r30
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	80 5d       	subi	r24, 0xD0	; 208
 288:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 28c:	dc cf       	rjmp	.-72     	; 0x246 <LCDWriteInt+0x50>

0000028e <LCDGotoXY>:
	}
}
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 28e:	84 31       	cpi	r24, 0x14	; 20
 290:	78 f4       	brcc	.+30     	; 0x2b0 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
 292:	62 30       	cpi	r22, 0x02	; 2
 294:	49 f0       	breq	.+18     	; 0x2a8 <LCDGotoXY+0x1a>
 296:	63 30       	cpi	r22, 0x03	; 3
 298:	49 f0       	breq	.+18     	; 0x2ac <LCDGotoXY+0x1e>
 29a:	61 30       	cpi	r22, 0x01	; 1
 29c:	09 f4       	brne	.+2      	; 0x2a0 <LCDGotoXY+0x12>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 29e:	80 64       	ori	r24, 0x40	; 64
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	80 68       	ori	r24, 0x80	; 128
 2a4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <LCDByte>
			break;
		case 1:
			x|=0b01000000;
			break;
		case 2:
			x+=0x14;
 2a8:	8c 5e       	subi	r24, 0xEC	; 236
 2aa:	fa cf       	rjmp	.-12     	; 0x2a0 <LCDGotoXY+0x12>
			break;
		case 3:
			x+=0x54;
 2ac:	8c 5a       	subi	r24, 0xAC	; 172
 2ae:	f8 cf       	rjmp	.-16     	; 0x2a0 <LCDGotoXY+0x12>
 2b0:	08 95       	ret

000002b2 <LCDHexDumpXY>:
}



void LCDHexDumpXY(uint8_t x, uint8_t y,uint8_t d)
{
 2b2:	cf 93       	push	r28
 2b4:	c4 2f       	mov	r28, r20
	LCDGotoXY(x,y);
 2b6:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
	uint8_t byte = '0';
	(((d>>4)&0x0F)<=9) ? (byte='0'+((d>>4)&0x0F)) : (byte='A'+ ((d>>4)&0x0F)-0x0A);
 2ba:	8c 2f       	mov	r24, r28
 2bc:	82 95       	swap	r24
 2be:	8f 70       	andi	r24, 0x0F	; 15
 2c0:	8a 30       	cpi	r24, 0x0A	; 10
 2c2:	88 f4       	brcc	.+34     	; 0x2e6 <LCDHexDumpXY+0x34>
 2c4:	80 5d       	subi	r24, 0xD0	; 208
	LCDByte(byte,1);
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	LCDBusyLoop();
 2cc:	0e 94 53 00 	call	0xa6	; 0xa6 <LCDBusyLoop>
 2d0:	8c 2f       	mov	r24, r28
 2d2:	8f 70       	andi	r24, 0x0F	; 15
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
 2d4:	8a 30       	cpi	r24, 0x0A	; 10
 2d6:	48 f4       	brcc	.+18     	; 0x2ea <LCDHexDumpXY+0x38>
 2d8:	80 5d       	subi	r24, 0xD0	; 208
	LCDByte(byte,1);
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	LCDBusyLoop();
}
 2e0:	cf 91       	pop	r28
	LCDByte(byte,1);
	LCDBusyLoop();
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
	LCDByte(byte,1);
	LCDBusyLoop();
 2e2:	0c 94 53 00 	jmp	0xa6	; 0xa6 <LCDBusyLoop>

void LCDHexDumpXY(uint8_t x, uint8_t y,uint8_t d)
{
	LCDGotoXY(x,y);
	uint8_t byte = '0';
	(((d>>4)&0x0F)<=9) ? (byte='0'+((d>>4)&0x0F)) : (byte='A'+ ((d>>4)&0x0F)-0x0A);
 2e6:	89 5c       	subi	r24, 0xC9	; 201
 2e8:	ee cf       	rjmp	.-36     	; 0x2c6 <LCDHexDumpXY+0x14>
	LCDByte(byte,1);
	LCDBusyLoop();
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
 2ea:	89 5c       	subi	r24, 0xC9	; 201
 2ec:	f6 cf       	rjmp	.-20     	; 0x2da <LCDHexDumpXY+0x28>

000002ee <initServo>:
    //            //make A5 output.
    //            *ddr=BV(pin);      // PORTC declared as output 0xFF is all output 11111 so i have 8 bits i can set and 8 leds....
    //            *port=BV(pin);     // PORTC is initially LOW OFF the led initially /
    //to do make the register parameter work
    
    DDRC = BV(5);
 2ee:	90 e2       	ldi	r25, 0x20	; 32
 2f0:	97 b9       	out	0x07, r25	; 7
    //set to closed position
    PORTC = (BV(5));
 2f2:	98 b9       	out	0x08, r25	; 8
 2f4:	ef ec       	ldi	r30, 0xCF	; 207
 2f6:	f7 e0       	ldi	r31, 0x07	; 7
 2f8:	31 97       	sbiw	r30, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <initServo+0xa>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <initServo+0x10>
 2fe:	00 00       	nop
    _delay_us(1000);
    PORTC   ^=BV(5);
 300:	88 b1       	in	r24, 0x08	; 8
 302:	89 27       	eor	r24, r25
 304:	88 b9       	out	0x08, r24	; 8
 306:	8f e6       	ldi	r24, 0x6F	; 111
 308:	94 e9       	ldi	r25, 0x94	; 148
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <initServo+0x1c>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <initServo+0x22>
 310:	00 00       	nop
 312:	08 95       	ret

00000314 <initLED>:
    _delay_us(19000); //remember that total period is 2ms or 2k micros and you need to do it this way because of standard 50hz servo
    
}

void initLED(void){
    DDRC |= BV(ledG);
 314:	3a 9a       	sbi	0x07, 2	; 7
    DDRC |= BV(ledR); //output
 316:	39 9a       	sbi	0x07, 1	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 318:	2f ef       	ldi	r18, 0xFF	; 255
 31a:	82 e5       	ldi	r24, 0x52	; 82
 31c:	97 e0       	ldi	r25, 0x07	; 7
 31e:	21 50       	subi	r18, 0x01	; 1
 320:	80 40       	sbci	r24, 0x00	; 0
 322:	90 40       	sbci	r25, 0x00	; 0
 324:	e1 f7       	brne	.-8      	; 0x31e <initLED+0xa>
 326:	00 c0       	rjmp	.+0      	; 0x328 <initLED+0x14>
 328:	00 00       	nop
    
    _delay_ms(300);
    PORTC|= BV(ledG);
 32a:	42 9a       	sbi	0x08, 2	; 8
 32c:	2f ef       	ldi	r18, 0xFF	; 255
 32e:	81 ee       	ldi	r24, 0xE1	; 225
 330:	94 e0       	ldi	r25, 0x04	; 4
 332:	21 50       	subi	r18, 0x01	; 1
 334:	80 40       	sbci	r24, 0x00	; 0
 336:	90 40       	sbci	r25, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <initLED+0x1e>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <initLED+0x28>
 33c:	00 00       	nop
    _delay_ms(200);
    PORTC ^= BV(ledG);
 33e:	88 b1       	in	r24, 0x08	; 8
 340:	94 e0       	ldi	r25, 0x04	; 4
 342:	89 27       	eor	r24, r25
 344:	88 b9       	out	0x08, r24	; 8
 346:	2f ef       	ldi	r18, 0xFF	; 255
 348:	82 e5       	ldi	r24, 0x52	; 82
 34a:	97 e0       	ldi	r25, 0x07	; 7
 34c:	21 50       	subi	r18, 0x01	; 1
 34e:	80 40       	sbci	r24, 0x00	; 0
 350:	90 40       	sbci	r25, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <initLED+0x38>
 354:	00 c0       	rjmp	.+0      	; 0x356 <initLED+0x42>
 356:	00 00       	nop
    
    _delay_ms(300);
    PORTC |= BV(ledR);     _delay_ms(200);
 358:	41 9a       	sbi	0x08, 1	; 8
 35a:	2f ef       	ldi	r18, 0xFF	; 255
 35c:	81 ee       	ldi	r24, 0xE1	; 225
 35e:	94 e0       	ldi	r25, 0x04	; 4
 360:	21 50       	subi	r18, 0x01	; 1
 362:	80 40       	sbci	r24, 0x00	; 0
 364:	90 40       	sbci	r25, 0x00	; 0
 366:	e1 f7       	brne	.-8      	; 0x360 <initLED+0x4c>
 368:	00 c0       	rjmp	.+0      	; 0x36a <initLED+0x56>
 36a:	00 00       	nop
    PORTC ^= BV(ledR);
 36c:	88 b1       	in	r24, 0x08	; 8
 36e:	92 e0       	ldi	r25, 0x02	; 2
 370:	89 27       	eor	r24, r25
 372:	88 b9       	out	0x08, r24	; 8
 374:	08 95       	ret

00000376 <addQ>:
    
    
}

int addQ(int str[], int ADD[]){
 376:	dc 01       	movw	r26, r24
 378:	12 96       	adiw	r26, 0x02	; 2
 37a:	fb 01       	movw	r30, r22
 37c:	32 96       	adiw	r30, 0x02	; 2
 37e:	0c 96       	adiw	r24, 0x0c	; 12
    for(int i=1; i<=5; i++){
        if(str[i] != ADD[i])
 380:	4d 91       	ld	r20, X+
 382:	5d 91       	ld	r21, X+
 384:	21 91       	ld	r18, Z+
 386:	31 91       	ld	r19, Z+
 388:	42 17       	cp	r20, r18
 38a:	53 07       	cpc	r21, r19
 38c:	31 f4       	brne	.+12     	; 0x39a <addQ+0x24>
    
    
}

int addQ(int str[], int ADD[]){
    for(int i=1; i<=5; i++){
 38e:	a8 17       	cp	r26, r24
 390:	b9 07       	cpc	r27, r25
 392:	b1 f7       	brne	.-20     	; 0x380 <addQ+0xa>
        if(str[i] != ADD[i])
            return -1;
    }
    return 0;
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	08 95       	ret
}

int addQ(int str[], int ADD[]){
    for(int i=1; i<=5; i++){
        if(str[i] != ADD[i])
            return -1;
 39a:	8f ef       	ldi	r24, 0xFF	; 255
 39c:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return 0;
}
 39e:	08 95       	ret

000003a0 <addTag>:
unsigned int EEMEM tag[5]= {0,0,0,0,0};
//unsigned int EEMEM tag2[5]= {0,0,0,0,0};
unsigned int ram_tag[5]; //this is where we write the read tag to the stack will be str[] array.

//to do int tagNumber)
void addTag(int str[], int tagNumber){
 3a0:	df 92       	push	r13
 3a2:	ef 92       	push	r14
 3a4:	ff 92       	push	r15
 3a6:	0f 93       	push	r16
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
    if(tagNumber ==1){
 3ae:	61 30       	cpi	r22, 0x01	; 1
 3b0:	71 05       	cpc	r23, r1
 3b2:	51 f5       	brne	.+84     	; 0x408 <addTag+0x68>
 3b4:	8c 01       	movw	r16, r24
 3b6:	0e 5f       	subi	r16, 0xFE	; 254
 3b8:	1f 4f       	sbci	r17, 0xFF	; 255
 3ba:	3c ef       	ldi	r19, 0xFC	; 252
 3bc:	e3 2e       	mov	r14, r19
 3be:	31 e0       	ldi	r19, 0x01	; 1
 3c0:	f3 2e       	mov	r15, r19
 3c2:	ec 01       	movw	r28, r24
 3c4:	2c 96       	adiw	r28, 0x0c	; 12
        for(int i=1; i<=5; i++){
            write_eeprom_word(tag1[i], str[i]);
            PORTC = BV(ledG);
 3c6:	44 e0       	ldi	r20, 0x04	; 4
 3c8:	d4 2e       	mov	r13, r20

//to do int tagNumber)
void addTag(int str[], int tagNumber){
    if(tagNumber ==1){
        for(int i=1; i<=5; i++){
            write_eeprom_word(tag1[i], str[i]);
 3ca:	f8 01       	movw	r30, r16
 3cc:	61 91       	ld	r22, Z+
 3ce:	71 91       	ld	r23, Z+
 3d0:	8f 01       	movw	r16, r30
 3d2:	f7 01       	movw	r30, r14
 3d4:	81 91       	ld	r24, Z+
 3d6:	7f 01       	movw	r14, r30
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 bf 07 	call	0xf7e	; 0xf7e <eeprom_write_word>
            PORTC = BV(ledG);
 3de:	d8 b8       	out	0x08, r13	; 8
 3e0:	ff ef       	ldi	r31, 0xFF	; 255
 3e2:	20 e7       	ldi	r18, 0x70	; 112
 3e4:	82 e0       	ldi	r24, 0x02	; 2
 3e6:	f1 50       	subi	r31, 0x01	; 1
 3e8:	20 40       	sbci	r18, 0x00	; 0
 3ea:	80 40       	sbci	r24, 0x00	; 0
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <addTag+0x46>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <addTag+0x50>
 3f0:	00 00       	nop
unsigned int ram_tag[5]; //this is where we write the read tag to the stack will be str[] array.

//to do int tagNumber)
void addTag(int str[], int tagNumber){
    if(tagNumber ==1){
        for(int i=1; i<=5; i++){
 3f2:	c0 17       	cp	r28, r16
 3f4:	d1 07       	cpc	r29, r17
 3f6:	49 f7       	brne	.-46     	; 0x3ca <addTag+0x2a>
        for(int i=1; i<=5; i++){
            write_eeprom_word(tag2[i], str[i]);
        }
        tagNumber++; //incriment so we can keep track if we have room or not
    }
}
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	1f 91       	pop	r17
 3fe:	0f 91       	pop	r16
 400:	ff 90       	pop	r15
 402:	ef 90       	pop	r14
 404:	df 90       	pop	r13
 406:	08 95       	ret
            PORTC = BV(ledG);
            _delay_ms(100);
        }
        tagNumber++;
    }
    else if(tagNumber ==2){
 408:	62 30       	cpi	r22, 0x02	; 2
 40a:	71 05       	cpc	r23, r1
 40c:	a9 f7       	brne	.-22     	; 0x3f8 <addTag+0x58>
 40e:	8c 01       	movw	r16, r24
 410:	0e 5f       	subi	r16, 0xFE	; 254
 412:	1f 4f       	sbci	r17, 0xFF	; 255
 414:	26 e0       	ldi	r18, 0x06	; 6
 416:	e2 2e       	mov	r14, r18
 418:	22 e0       	ldi	r18, 0x02	; 2
 41a:	f2 2e       	mov	r15, r18
 41c:	ec 01       	movw	r28, r24
 41e:	2c 96       	adiw	r28, 0x0c	; 12
        for(int i=1; i<=5; i++){
            write_eeprom_word(tag2[i], str[i]);
 420:	f8 01       	movw	r30, r16
 422:	61 91       	ld	r22, Z+
 424:	71 91       	ld	r23, Z+
 426:	8f 01       	movw	r16, r30
 428:	f7 01       	movw	r30, r14
 42a:	81 91       	ld	r24, Z+
 42c:	7f 01       	movw	r14, r30
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 bf 07 	call	0xf7e	; 0xf7e <eeprom_write_word>
            _delay_ms(100);
        }
        tagNumber++;
    }
    else if(tagNumber ==2){
        for(int i=1; i<=5; i++){
 434:	0c 17       	cp	r16, r28
 436:	1d 07       	cpc	r17, r29
 438:	99 f7       	brne	.-26     	; 0x420 <addTag+0x80>
 43a:	de cf       	rjmp	.-68     	; 0x3f8 <addTag+0x58>

0000043c <validTag>:
 
 }
 */

void validTag(int state ){
    if(state == 1){
 43c:	81 30       	cpi	r24, 0x01	; 1
 43e:	91 05       	cpc	r25, r1
 440:	69 f4       	brne	.+26     	; 0x45c <validTag+0x20>
        PORTC |= BV(ledG);
 442:	42 9a       	sbi	0x08, 2	; 8
 444:	2f ef       	ldi	r18, 0xFF	; 255
 446:	82 e5       	ldi	r24, 0x52	; 82
 448:	97 e0       	ldi	r25, 0x07	; 7
 44a:	21 50       	subi	r18, 0x01	; 1
 44c:	80 40       	sbci	r24, 0x00	; 0
 44e:	90 40       	sbci	r25, 0x00	; 0
 450:	e1 f7       	brne	.-8      	; 0x44a <validTag+0xe>
 452:	00 c0       	rjmp	.+0      	; 0x454 <validTag+0x18>
 454:	00 00       	nop
        _delay_ms(300);
        PORTC ^= BV(ledR);
    }
    else
    {
        PORTC ^= BV(ledG);
 456:	88 b1       	in	r24, 0x08	; 8
 458:	94 e0       	ldi	r25, 0x04	; 4
 45a:	0e c0       	rjmp	.+28     	; 0x478 <validTag+0x3c>
    if(state == 1){
        PORTC |= BV(ledG);
        _delay_ms(300);
        PORTC ^= BV(ledG);
    }
    else if(state ==-1){
 45c:	01 96       	adiw	r24, 0x01	; 1
 45e:	d9 f7       	brne	.-10     	; 0x456 <validTag+0x1a>
        PORTC |= BV(ledR);
 460:	41 9a       	sbi	0x08, 1	; 8
 462:	8f ef       	ldi	r24, 0xFF	; 255
 464:	92 e5       	ldi	r25, 0x52	; 82
 466:	27 e0       	ldi	r18, 0x07	; 7
 468:	81 50       	subi	r24, 0x01	; 1
 46a:	90 40       	sbci	r25, 0x00	; 0
 46c:	20 40       	sbci	r18, 0x00	; 0
 46e:	e1 f7       	brne	.-8      	; 0x468 <validTag+0x2c>
 470:	00 c0       	rjmp	.+0      	; 0x472 <validTag+0x36>
 472:	00 00       	nop
        _delay_ms(300);
        PORTC ^= BV(ledR);
 474:	88 b1       	in	r24, 0x08	; 8
 476:	92 e0       	ldi	r25, 0x02	; 2
    }
    else
    {
        PORTC ^= BV(ledG);
 478:	89 27       	eor	r24, r25
 47a:	88 b9       	out	0x08, r24	; 8
 47c:	08 95       	ret

0000047e <open>:
    
}

int open(void){
    
    validTag(1);
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 1e 02 	call	0x43c	; 0x43c <validTag>
    PORTC = (BV(5));
 486:	90 e2       	ldi	r25, 0x20	; 32
 488:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 48a:	ef e9       	ldi	r30, 0x9F	; 159
 48c:	ff e0       	ldi	r31, 0x0F	; 15
 48e:	31 97       	sbiw	r30, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <open+0x10>
 492:	00 c0       	rjmp	.+0      	; 0x494 <open+0x16>
 494:	00 00       	nop
    _delay_us(2000);
    PORTC  ^=BV(5);
 496:	88 b1       	in	r24, 0x08	; 8
 498:	89 27       	eor	r24, r25
 49a:	88 b9       	out	0x08, r24	; 8
 49c:	8f e9       	ldi	r24, 0x9F	; 159
 49e:	9c e8       	ldi	r25, 0x8C	; 140
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <open+0x22>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <open+0x28>
 4a6:	00 00       	nop
    _delay_us(18000);
    validTag(0);
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	0e 94 1e 02 	call	0x43c	; 0x43c <validTag>
    
    return 1;
}
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	08 95       	ret

000004b6 <close>:

int close(void){
    //ToDo: need to update this
    //close sequence
    PORTC = (BV(5));
 4b6:	90 e2       	ldi	r25, 0x20	; 32
 4b8:	98 b9       	out	0x08, r25	; 8
 4ba:	ef ec       	ldi	r30, 0xCF	; 207
 4bc:	f7 e0       	ldi	r31, 0x07	; 7
 4be:	31 97       	sbiw	r30, 0x01	; 1
 4c0:	f1 f7       	brne	.-4      	; 0x4be <close+0x8>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <close+0xe>
 4c4:	00 00       	nop
    _delay_us(1000);
    PORTC   ^=BV(5);
 4c6:	88 b1       	in	r24, 0x08	; 8
 4c8:	89 27       	eor	r24, r25
 4ca:	88 b9       	out	0x08, r24	; 8
 4cc:	8f e6       	ldi	r24, 0x6F	; 111
 4ce:	94 e9       	ldi	r25, 0x94	; 148
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <close+0x1a>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <close+0x20>
 4d6:	00 00       	nop
    _delay_us(19000);
    return 1;
}
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	08 95       	ret

000004de <initButton>:


void initButton(void){
    // uint8_t button = 3;
    //uint8_t ledG = 2;
    DDRC ^= BV(button); //set as input
 4de:	97 b1       	in	r25, 0x07	; 7
 4e0:	21 e0       	ldi	r18, 0x01	; 1
 4e2:	92 27       	eor	r25, r18
 4e4:	97 b9       	out	0x07, r25	; 7
    DDRC |= BV(ledG); //set output
 4e6:	3a 9a       	sbi	0x07, 2	; 7
    
    PORTC ^= BV(button); // set low
 4e8:	88 b1       	in	r24, 0x08	; 8
 4ea:	82 27       	eor	r24, r18
 4ec:	88 b9       	out	0x08, r24	; 8
 4ee:	08 95       	ret

000004f0 <buttonRead>:
}

int buttonRead(void){
    if(bit_is_clear(PINC, button)){
 4f0:	30 99       	sbic	0x06, 0	; 6
 4f2:	2e c0       	rjmp	.+92     	; 0x550 <buttonRead+0x60>
        LCDClear();
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4fc:	2f ef       	ldi	r18, 0xFF	; 255
 4fe:	89 ef       	ldi	r24, 0xF9	; 249
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	21 50       	subi	r18, 0x01	; 1
 504:	80 40       	sbci	r24, 0x00	; 0
 506:	90 40       	sbci	r25, 0x00	; 0
 508:	e1 f7       	brne	.-8      	; 0x502 <buttonRead+0x12>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <buttonRead+0x1c>
 50c:	00 00       	nop
        _delay_ms(40);
        LCDWriteString("button press");
 50e:	8a e1       	ldi	r24, 0x1A	; 26
 510:	91 e0       	ldi	r25, 0x01	; 1
 512:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
        open();
 516:	0e 94 3f 02 	call	0x47e	; 0x47e <open>
 51a:	2f ef       	ldi	r18, 0xFF	; 255
 51c:	84 e3       	ldi	r24, 0x34	; 52
 51e:	9c e0       	ldi	r25, 0x0C	; 12
 520:	21 50       	subi	r18, 0x01	; 1
 522:	80 40       	sbci	r24, 0x00	; 0
 524:	90 40       	sbci	r25, 0x00	; 0
 526:	e1 f7       	brne	.-8      	; 0x520 <buttonRead+0x30>
 528:	00 c0       	rjmp	.+0      	; 0x52a <buttonRead+0x3a>
 52a:	00 00       	nop
        _delay_ms(500);
        close();
 52c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <close>
 530:	2f ef       	ldi	r18, 0xFF	; 255
 532:	89 e6       	ldi	r24, 0x69	; 105
 534:	98 e1       	ldi	r25, 0x18	; 24
 536:	21 50       	subi	r18, 0x01	; 1
 538:	80 40       	sbci	r24, 0x00	; 0
 53a:	90 40       	sbci	r25, 0x00	; 0
 53c:	e1 f7       	brne	.-8      	; 0x536 <buttonRead+0x46>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <buttonRead+0x50>
 540:	00 00       	nop
        _delay_ms(1000);
        LCDClear();
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	08 95       	ret
        return 1;
    }
    return 0;
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	90 e0       	ldi	r25, 0x00	; 0
}
 554:	08 95       	ret

00000556 <loadTags>:

void loadTags(void){
 556:	cf 92       	push	r12
 558:	df 92       	push	r13
 55a:	ef 92       	push	r14
 55c:	ff 92       	push	r15
 55e:	0f 93       	push	r16
 560:	1f 93       	push	r17
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	cb ef       	ldi	r28, 0xFB	; 251
 568:	d1 e0       	ldi	r29, 0x01	; 1
 56a:	86 ef       	ldi	r24, 0xF6	; 246
 56c:	c8 2e       	mov	r12, r24
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	d8 2e       	mov	r13, r24
 572:	95 e0       	ldi	r25, 0x05	; 5
 574:	e9 2e       	mov	r14, r25
 576:	92 e0       	ldi	r25, 0x02	; 2
 578:	f9 2e       	mov	r15, r25
 57a:	0a e0       	ldi	r16, 0x0A	; 10
 57c:	12 e0       	ldi	r17, 0x02	; 2
    for(int i=0; i<5; i++){
        ram_tag1[i] = read_eeprom_word(tag1[i]);
 57e:	89 91       	ld	r24, Y+
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	0e 94 b9 07 	call	0xf72	; 0xf72 <eeprom_read_word>
 586:	f6 01       	movw	r30, r12
 588:	81 93       	st	Z+, r24
 58a:	6f 01       	movw	r12, r30
        ram_tag2[i] = read_eeprom_word(tag2[i]);
 58c:	f7 01       	movw	r30, r14
 58e:	81 91       	ld	r24, Z+
 590:	7f 01       	movw	r14, r30
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 b9 07 	call	0xf72	; 0xf72 <eeprom_read_word>
 598:	f8 01       	movw	r30, r16
 59a:	81 93       	st	Z+, r24
 59c:	8f 01       	movw	r16, r30
    }
    return 0;
}

void loadTags(void){
    for(int i=0; i<5; i++){
 59e:	f2 e0       	ldi	r31, 0x02	; 2
 5a0:	c0 30       	cpi	r28, 0x00	; 0
 5a2:	df 07       	cpc	r29, r31
 5a4:	61 f7       	brne	.-40     	; 0x57e <loadTags+0x28>
        ram_tag1[i] = read_eeprom_word(tag1[i]);
        ram_tag2[i] = read_eeprom_word(tag2[i]);
    }
}
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	1f 91       	pop	r17
 5ac:	0f 91       	pop	r16
 5ae:	ff 90       	pop	r15
 5b0:	ef 90       	pop	r14
 5b2:	df 90       	pop	r13
 5b4:	cf 90       	pop	r12
 5b6:	08 95       	ret

000005b8 <mfrc522_write>:
		mfrc522_write(TxControlReg,byte|0x03);
	}
}

void mfrc522_write(uint8_t reg, uint8_t data)
{
 5b8:	cf 93       	push	r28
 5ba:	c6 2f       	mov	r28, r22
	ENABLE_CHIP();
 5bc:	2a 98       	cbi	0x05, 2	; 5
	spi_transmit((reg<<1)&0x7E);
 5be:	88 0f       	add	r24, r24
 5c0:	8e 77       	andi	r24, 0x7E	; 126
 5c2:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <spi_transmit>
	spi_transmit(data);
 5c6:	8c 2f       	mov	r24, r28
 5c8:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <spi_transmit>
	DISABLE_CHIP();
 5cc:	2a 9a       	sbi	0x05, 2	; 5
}
 5ce:	cf 91       	pop	r28
 5d0:	08 95       	ret

000005d2 <mfrc522_read>:

uint8_t mfrc522_read(uint8_t reg)
{
	uint8_t data;	
	ENABLE_CHIP();
 5d2:	2a 98       	cbi	0x05, 2	; 5
	spi_transmit(((reg<<1)&0x7E)|0x80);
 5d4:	88 0f       	add	r24, r24
 5d6:	8e 77       	andi	r24, 0x7E	; 126
 5d8:	80 68       	ori	r24, 0x80	; 128
 5da:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <spi_transmit>
	data = spi_transmit(0x00);
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <spi_transmit>
	DISABLE_CHIP();
 5e4:	2a 9a       	sbi	0x05, 2	; 5
	return data;
}
 5e6:	08 95       	ret

000005e8 <mfrc522_reset>:

void mfrc522_reset()
{
	mfrc522_write(CommandReg,SoftReset_CMD);
 5e8:	6f e0       	ldi	r22, 0x0F	; 15
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <mfrc522_write>

000005f0 <mfrc522_init>:
#endif

void mfrc522_init()
{
	uint8_t byte;
	mfrc522_reset();
 5f0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <mfrc522_reset>
	
	mfrc522_write(TModeReg, 0x8D);
 5f4:	6d e8       	ldi	r22, 0x8D	; 141
 5f6:	8a e2       	ldi	r24, 0x2A	; 42
 5f8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
    mfrc522_write(TPrescalerReg, 0x3E);
 5fc:	6e e3       	ldi	r22, 0x3E	; 62
 5fe:	8b e2       	ldi	r24, 0x2B	; 43
 600:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
    mfrc522_write(TReloadReg_1, 30);   
 604:	6e e1       	ldi	r22, 0x1E	; 30
 606:	8c e2       	ldi	r24, 0x2C	; 44
 608:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
    mfrc522_write(TReloadReg_2, 0);	
 60c:	60 e0       	ldi	r22, 0x00	; 0
 60e:	8d e2       	ldi	r24, 0x2D	; 45
 610:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
	mfrc522_write(TxASKReg, 0x40);	
 614:	60 e4       	ldi	r22, 0x40	; 64
 616:	85 e1       	ldi	r24, 0x15	; 21
 618:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D);
 61c:	6d e3       	ldi	r22, 0x3D	; 61
 61e:	81 e1       	ldi	r24, 0x11	; 17
 620:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
	
	byte = mfrc522_read(TxControlReg);
 624:	84 e1       	ldi	r24, 0x14	; 20
 626:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <mfrc522_read>
	if(!(byte&0x03))
 62a:	98 2f       	mov	r25, r24
 62c:	93 70       	andi	r25, 0x03	; 3
 62e:	29 f4       	brne	.+10     	; 0x63a <mfrc522_init+0x4a>
	{
		mfrc522_write(TxControlReg,byte|0x03);
 630:	68 2f       	mov	r22, r24
 632:	63 60       	ori	r22, 0x03	; 3
 634:	84 e1       	ldi	r24, 0x14	; 20
 636:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <mfrc522_write>
 63a:	08 95       	ret

0000063c <mfrc522_to_card>:
   
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
 63c:	3f 92       	push	r3
 63e:	4f 92       	push	r4
 640:	5f 92       	push	r5
 642:	6f 92       	push	r6
 644:	7f 92       	push	r7
 646:	8f 92       	push	r8
 648:	9f 92       	push	r9
 64a:	af 92       	push	r10
 64c:	bf 92       	push	r11
 64e:	cf 92       	push	r12
 650:	df 92       	push	r13
 652:	ef 92       	push	r14
 654:	ff 92       	push	r15
 656:	0f 93       	push	r16
 658:	1f 93       	push	r17
 65a:	cf 93       	push	r28
 65c:	df 93       	push	r29
 65e:	d8 2e       	mov	r13, r24
 660:	5b 01       	movw	r10, r22
 662:	84 2e       	mov	r8, r20
 664:	79 01       	movw	r14, r18
 666:	e8 01       	movw	r28, r16
    uint8_t lastBits;
    uint8_t n;
    uint8_t	tmp;
    uint32_t i;

    switch (cmd)
 668:	8c e0       	ldi	r24, 0x0C	; 12
 66a:	d8 16       	cp	r13, r24
 66c:	09 f4       	brne	.+2      	; 0x670 <mfrc522_to_card+0x34>
 66e:	6b c0       	rjmp	.+214    	; 0x746 <mfrc522_to_card+0x10a>
 670:	ee e0       	ldi	r30, 0x0E	; 14
 672:	de 16       	cp	r13, r30
 674:	09 f4       	brne	.+2      	; 0x678 <mfrc522_to_card+0x3c>
 676:	6c c0       	rjmp	.+216    	; 0x750 <mfrc522_to_card+0x114>

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
 678:	31 2c       	mov	r3, r1
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
 67a:	c1 2c       	mov	r12, r1
		default:
			break;
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
 67c:	84 e0       	ldi	r24, 0x04	; 4
 67e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <mfrc522_read>
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
 682:	68 2f       	mov	r22, r24
 684:	6f 77       	andi	r22, 0x7F	; 127
 686:	84 e0       	ldi	r24, 0x04	; 4
 688:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
 68c:	8a e0       	ldi	r24, 0x0A	; 10
 68e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <mfrc522_read>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
 692:	68 2f       	mov	r22, r24
 694:	60 68       	ori	r22, 0x80	; 128
 696:	8a e0       	ldi	r24, 0x0A	; 10
 698:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
 69c:	60 e0       	ldi	r22, 0x00	; 0
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
 6a4:	85 01       	movw	r16, r10

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 6a6:	41 2c       	mov	r4, r1
 6a8:	51 2c       	mov	r5, r1
 6aa:	32 01       	movw	r6, r4
 6ac:	91 2c       	mov	r9, r1
 6ae:	a1 2c       	mov	r10, r1
 6b0:	b1 2c       	mov	r11, r1
 6b2:	48 14       	cp	r4, r8
 6b4:	59 04       	cpc	r5, r9
 6b6:	6a 04       	cpc	r6, r10
 6b8:	7b 04       	cpc	r7, r11
 6ba:	08 f4       	brcc	.+2      	; 0x6be <mfrc522_to_card+0x82>
 6bc:	4e c0       	rjmp	.+156    	; 0x75a <mfrc522_to_card+0x11e>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
 6be:	6d 2d       	mov	r22, r13
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
    if (cmd == Transceive_CMD)
 6c6:	8c e0       	ldi	r24, 0x0C	; 12
 6c8:	d8 12       	cpse	r13, r24
 6ca:	08 c0       	rjmp	.+16     	; 0x6dc <mfrc522_to_card+0xa0>
    {    
		n=mfrc522_read(BitFramingReg);
 6cc:	8d e0       	ldi	r24, 0x0D	; 13
 6ce:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <mfrc522_read>
		mfrc522_write(BitFramingReg,n|0x80);  
 6d2:	68 2f       	mov	r22, r24
 6d4:	60 68       	ori	r22, 0x80	; 128
 6d6:	8d e0       	ldi	r24, 0x0D	; 13
 6d8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 6dc:	40 ed       	ldi	r20, 0xD0	; 208
 6de:	84 2e       	mov	r8, r20
 6e0:	47 e0       	ldi	r20, 0x07	; 7
 6e2:	94 2e       	mov	r9, r20
 6e4:	a1 2c       	mov	r10, r1
 6e6:	b1 2c       	mov	r11, r1
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
        i--;
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 6e8:	13 2d       	mov	r17, r3
 6ea:	11 60       	ori	r17, 0x01	; 1
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
 6ec:	84 e0       	ldi	r24, 0x04	; 4
 6ee:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <mfrc522_read>
 6f2:	08 2f       	mov	r16, r24
        i--;
 6f4:	e1 e0       	ldi	r30, 0x01	; 1
 6f6:	8e 1a       	sub	r8, r30
 6f8:	91 08       	sbc	r9, r1
 6fa:	a1 08       	sbc	r10, r1
 6fc:	b1 08       	sbc	r11, r1
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 6fe:	19 f0       	breq	.+6      	; 0x706 <mfrc522_to_card+0xca>
 700:	81 2f       	mov	r24, r17
 702:	80 23       	and	r24, r16
 704:	99 f3       	breq	.-26     	; 0x6ec <mfrc522_to_card+0xb0>

	tmp=mfrc522_read(BitFramingReg);
 706:	8d e0       	ldi	r24, 0x0D	; 13
 708:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <mfrc522_read>
	mfrc522_write(BitFramingReg,tmp&(~0x80));
 70c:	68 2f       	mov	r22, r24
 70e:	6f 77       	andi	r22, 0x7F	; 127
 710:	8d e0       	ldi	r24, 0x0D	; 13
 712:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
	
    if (i != 0)
 716:	89 28       	or	r8, r9
 718:	8a 28       	or	r8, r10
 71a:	8b 28       	or	r8, r11
 71c:	51 f5       	brne	.+84     	; 0x772 <mfrc522_to_card+0x136>
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
 71e:	03 e0       	ldi	r16, 0x03	; 3
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //mfrc522_write(cmdReg, PCD_IDLE); 

    return status;
}
 720:	80 2f       	mov	r24, r16
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	1f 91       	pop	r17
 728:	0f 91       	pop	r16
 72a:	ff 90       	pop	r15
 72c:	ef 90       	pop	r14
 72e:	df 90       	pop	r13
 730:	cf 90       	pop	r12
 732:	bf 90       	pop	r11
 734:	af 90       	pop	r10
 736:	9f 90       	pop	r9
 738:	8f 90       	pop	r8
 73a:	7f 90       	pop	r7
 73c:	6f 90       	pop	r6
 73e:	5f 90       	pop	r5
 740:	4f 90       	pop	r4
 742:	3f 90       	pop	r3
 744:	08 95       	ret
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
 746:	70 e3       	ldi	r23, 0x30	; 48
 748:	37 2e       	mov	r3, r23
			waitIRq = 0x10;
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
 74a:	e7 e7       	ldi	r30, 0x77	; 119
 74c:	ce 2e       	mov	r12, r30
			waitIRq = 0x30;
			break;
 74e:	96 cf       	rjmp	.-212    	; 0x67c <mfrc522_to_card+0x40>
    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
 750:	50 e1       	ldi	r21, 0x10	; 16
 752:	35 2e       	mov	r3, r21

    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
 754:	62 e1       	ldi	r22, 0x12	; 18
 756:	c6 2e       	mov	r12, r22
 758:	91 cf       	rjmp	.-222    	; 0x67c <mfrc522_to_card+0x40>
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
 75a:	f8 01       	movw	r30, r16
 75c:	61 91       	ld	r22, Z+
 75e:	8f 01       	movw	r16, r30
 760:	89 e0       	ldi	r24, 0x09	; 9
 762:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 766:	ff ef       	ldi	r31, 0xFF	; 255
 768:	4f 1a       	sub	r4, r31
 76a:	5f 0a       	sbc	r5, r31
 76c:	6f 0a       	sbc	r6, r31
 76e:	7f 0a       	sbc	r7, r31
 770:	a0 cf       	rjmp	.-192    	; 0x6b2 <mfrc522_to_card+0x76>
	tmp=mfrc522_read(BitFramingReg);
	mfrc522_write(BitFramingReg,tmp&(~0x80));
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 772:	86 e0       	ldi	r24, 0x06	; 6
 774:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <mfrc522_read>
 778:	8b 71       	andi	r24, 0x1B	; 27
 77a:	89 f6       	brne	.-94     	; 0x71e <mfrc522_to_card+0xe2>
        {
            status = CARD_FOUND;
            if (n & irqEn & 0x01)
 77c:	fc 2d       	mov	r31, r12
 77e:	f1 70       	andi	r31, 0x01	; 1
 780:	cf 2e       	mov	r12, r31
 782:	c0 22       	and	r12, r16
 784:	e9 f1       	breq	.+122    	; 0x800 <mfrc522_to_card+0x1c4>
            {   
				status = CARD_NOT_FOUND;			//??   
 786:	02 e0       	ldi	r16, 0x02	; 2
			}

            if (cmd == Transceive_CMD)
 788:	8c e0       	ldi	r24, 0x0C	; 12
 78a:	d8 12       	cpse	r13, r24
 78c:	c9 cf       	rjmp	.-110    	; 0x720 <mfrc522_to_card+0xe4>
            {
               	n = mfrc522_read(FIFOLevelReg);
 78e:	8a e0       	ldi	r24, 0x0A	; 10
 790:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <mfrc522_read>
 794:	18 2f       	mov	r17, r24
              	lastBits = mfrc522_read(ControlReg) & 0x07;
 796:	8c e0       	ldi	r24, 0x0C	; 12
 798:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <mfrc522_read>
 79c:	28 2f       	mov	r18, r24
 79e:	27 70       	andi	r18, 0x07	; 7
 7a0:	81 2f       	mov	r24, r17
 7a2:	90 e0       	ldi	r25, 0x00	; 0
                if (lastBits)
 7a4:	79 f1       	breq	.+94     	; 0x804 <mfrc522_to_card+0x1c8>
                {   
					*back_data_len = (n-1)*8 + lastBits;   
 7a6:	01 97       	sbiw	r24, 0x01	; 1
 7a8:	33 e0       	ldi	r19, 0x03	; 3
 7aa:	88 0f       	add	r24, r24
 7ac:	99 1f       	adc	r25, r25
 7ae:	3a 95       	dec	r19
 7b0:	e1 f7       	brne	.-8      	; 0x7aa <mfrc522_to_card+0x16e>
 7b2:	82 0f       	add	r24, r18
 7b4:	91 1d       	adc	r25, r1
				}
                else
                {   
					*back_data_len = n*8;   
 7b6:	09 2e       	mov	r0, r25
 7b8:	00 0c       	add	r0, r0
 7ba:	aa 0b       	sbc	r26, r26
 7bc:	bb 0b       	sbc	r27, r27
 7be:	88 83       	st	Y, r24
 7c0:	99 83       	std	Y+1, r25	; 0x01
 7c2:	aa 83       	std	Y+2, r26	; 0x02
 7c4:	bb 83       	std	Y+3, r27	; 0x03
				}

                if (n == 0)
 7c6:	11 23       	and	r17, r17
 7c8:	19 f1       	breq	.+70     	; 0x810 <mfrc522_to_card+0x1d4>
 7ca:	11 31       	cpi	r17, 0x11	; 17
 7cc:	08 f0       	brcs	.+2      	; 0x7d0 <mfrc522_to_card+0x194>
 7ce:	10 e1       	ldi	r17, 0x10	; 16
 7d0:	e7 01       	movw	r28, r14
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 7d2:	81 2c       	mov	r8, r1
 7d4:	91 2c       	mov	r9, r1
 7d6:	54 01       	movw	r10, r8
 7d8:	c1 2e       	mov	r12, r17
 7da:	d1 2c       	mov	r13, r1
 7dc:	e1 2c       	mov	r14, r1
 7de:	f1 2c       	mov	r15, r1
 7e0:	8c 14       	cp	r8, r12
 7e2:	9d 04       	cpc	r9, r13
 7e4:	ae 04       	cpc	r10, r14
 7e6:	bf 04       	cpc	r11, r15
 7e8:	08 f0       	brcs	.+2      	; 0x7ec <mfrc522_to_card+0x1b0>
 7ea:	9a cf       	rjmp	.-204    	; 0x720 <mfrc522_to_card+0xe4>
                {   
					back_data[i] = mfrc522_read(FIFODataReg);    
 7ec:	89 e0       	ldi	r24, 0x09	; 9
 7ee:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <mfrc522_read>
 7f2:	89 93       	st	Y+, r24
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 7f4:	ef ef       	ldi	r30, 0xFF	; 255
 7f6:	8e 1a       	sub	r8, r30
 7f8:	9e 0a       	sbc	r9, r30
 7fa:	ae 0a       	sbc	r10, r30
 7fc:	be 0a       	sbc	r11, r30
 7fe:	f0 cf       	rjmp	.-32     	; 0x7e0 <mfrc522_to_card+0x1a4>
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
 800:	01 e0       	ldi	r16, 0x01	; 1
 802:	c2 cf       	rjmp	.-124    	; 0x788 <mfrc522_to_card+0x14c>
                {   
					*back_data_len = (n-1)*8 + lastBits;   
				}
                else
                {   
					*back_data_len = n*8;   
 804:	23 e0       	ldi	r18, 0x03	; 3
 806:	88 0f       	add	r24, r24
 808:	99 1f       	adc	r25, r25
 80a:	2a 95       	dec	r18
 80c:	e1 f7       	brne	.-8      	; 0x806 <mfrc522_to_card+0x1ca>
 80e:	d3 cf       	rjmp	.-90     	; 0x7b6 <mfrc522_to_card+0x17a>
				}

                if (n == 0)
                {   
					n = 1;    
 810:	11 e0       	ldi	r17, 0x01	; 1
 812:	de cf       	rjmp	.-68     	; 0x7d0 <mfrc522_to_card+0x194>

00000814 <mfrc522_request>:
{
	mfrc522_write(CommandReg,SoftReset_CMD);
}

uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
 814:	ef 92       	push	r14
 816:	ff 92       	push	r15
 818:	0f 93       	push	r16
 81a:	1f 93       	push	r17
 81c:	cf 93       	push	r28
 81e:	df 93       	push	r29
 820:	00 d0       	rcall	.+0      	; 0x822 <mfrc522_request+0xe>
 822:	00 d0       	rcall	.+0      	; 0x824 <mfrc522_request+0x10>
 824:	cd b7       	in	r28, 0x3d	; 61
 826:	de b7       	in	r29, 0x3e	; 62
 828:	18 2f       	mov	r17, r24
 82a:	7b 01       	movw	r14, r22
	uint8_t  status;  
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
 82c:	67 e0       	ldi	r22, 0x07	; 7
 82e:	8d e0       	ldi	r24, 0x0D	; 13
 830:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
	
	tag_type[0] = req_mode;
 834:	f7 01       	movw	r30, r14
 836:	10 83       	st	Z, r17
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
 838:	8e 01       	movw	r16, r28
 83a:	0f 5f       	subi	r16, 0xFF	; 255
 83c:	1f 4f       	sbci	r17, 0xFF	; 255
 83e:	97 01       	movw	r18, r14
 840:	41 e0       	ldi	r20, 0x01	; 1
 842:	b7 01       	movw	r22, r14
 844:	8c e0       	ldi	r24, 0x0C	; 12
 846:	0e 94 1e 03 	call	0x63c	; 0x63c <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
 84a:	81 30       	cpi	r24, 0x01	; 1
 84c:	a1 f4       	brne	.+40     	; 0x876 <mfrc522_request+0x62>
 84e:	49 81       	ldd	r20, Y+1	; 0x01
 850:	5a 81       	ldd	r21, Y+2	; 0x02
 852:	6b 81       	ldd	r22, Y+3	; 0x03
 854:	7c 81       	ldd	r23, Y+4	; 0x04
 856:	40 31       	cpi	r20, 0x10	; 16
 858:	51 05       	cpc	r21, r1
 85a:	61 05       	cpc	r22, r1
 85c:	71 05       	cpc	r23, r1
 85e:	59 f4       	brne	.+22     	; 0x876 <mfrc522_request+0x62>
	{    
		status = ERROR;
	}
   
	return status;
}
 860:	0f 90       	pop	r0
 862:	0f 90       	pop	r0
 864:	0f 90       	pop	r0
 866:	0f 90       	pop	r0
 868:	df 91       	pop	r29
 86a:	cf 91       	pop	r28
 86c:	1f 91       	pop	r17
 86e:	0f 91       	pop	r16
 870:	ff 90       	pop	r15
 872:	ef 90       	pop	r14
 874:	08 95       	ret
	tag_type[0] = req_mode;
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);

	if ((status != CARD_FOUND) || (backBits != 0x10))
	{    
		status = ERROR;
 876:	83 e0       	ldi	r24, 0x03	; 3
	}
   
	return status;
 878:	f3 cf       	rjmp	.-26     	; 0x860 <mfrc522_request+0x4c>

0000087a <mfrc522_get_card_serial>:
    return status;
}


uint8_t mfrc522_get_card_serial(uint8_t * serial_out)
{
 87a:	ef 92       	push	r14
 87c:	ff 92       	push	r15
 87e:	0f 93       	push	r16
 880:	1f 93       	push	r17
 882:	cf 93       	push	r28
 884:	df 93       	push	r29
 886:	00 d0       	rcall	.+0      	; 0x888 <mfrc522_get_card_serial+0xe>
 888:	00 d0       	rcall	.+0      	; 0x88a <mfrc522_get_card_serial+0x10>
 88a:	cd b7       	in	r28, 0x3d	; 61
 88c:	de b7       	in	r29, 0x3e	; 62
 88e:	7c 01       	movw	r14, r24
	uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
    uint32_t unLen;
    
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 890:	60 e0       	ldi	r22, 0x00	; 0
 892:	8d e0       	ldi	r24, 0x0D	; 13
 894:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mfrc522_write>
 
    serial_out[0] = PICC_ANTICOLL;
 898:	83 e9       	ldi	r24, 0x93	; 147
 89a:	f7 01       	movw	r30, r14
 89c:	80 83       	st	Z, r24
    serial_out[1] = 0x20;
 89e:	80 e2       	ldi	r24, 0x20	; 32
 8a0:	81 83       	std	Z+1, r24	; 0x01
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
 8a2:	8e 01       	movw	r16, r28
 8a4:	0f 5f       	subi	r16, 0xFF	; 255
 8a6:	1f 4f       	sbci	r17, 0xFF	; 255
 8a8:	97 01       	movw	r18, r14
 8aa:	42 e0       	ldi	r20, 0x02	; 2
 8ac:	b7 01       	movw	r22, r14
 8ae:	8c e0       	ldi	r24, 0x0C	; 12
 8b0:	0e 94 1e 03 	call	0x63c	; 0x63c <mfrc522_to_card>

    if (status == CARD_FOUND)
 8b4:	81 30       	cpi	r24, 0x01	; 1
 8b6:	71 f4       	brne	.+28     	; 0x8d4 <mfrc522_get_card_serial+0x5a>
 8b8:	f7 01       	movw	r30, r14
 8ba:	97 01       	movw	r18, r14
 8bc:	2c 5f       	subi	r18, 0xFC	; 252
 8be:	3f 4f       	sbci	r19, 0xFF	; 255
 8c0:	90 e0       	ldi	r25, 0x00	; 0
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{   
		 	serNumCheck ^= serial_out[i];
 8c2:	41 91       	ld	r20, Z+
 8c4:	94 27       	eor	r25, r20
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);

    if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
 8c6:	e2 17       	cp	r30, r18
 8c8:	f3 07       	cpc	r31, r19
 8ca:	d9 f7       	brne	.-10     	; 0x8c2 <mfrc522_get_card_serial+0x48>
		{   
		 	serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
 8cc:	f7 01       	movw	r30, r14
 8ce:	24 81       	ldd	r18, Z+4	; 0x04
 8d0:	92 13       	cpse	r25, r18
		{   
			status = ERROR;    
 8d2:	83 e0       	ldi	r24, 0x03	; 3
		}
    }
    return status;
}
 8d4:	0f 90       	pop	r0
 8d6:	0f 90       	pop	r0
 8d8:	0f 90       	pop	r0
 8da:	0f 90       	pop	r0
 8dc:	df 91       	pop	r29
 8de:	cf 91       	pop	r28
 8e0:	1f 91       	pop	r17
 8e2:	0f 91       	pop	r16
 8e4:	ff 90       	pop	r15
 8e6:	ef 90       	pop	r14
 8e8:	08 95       	ret

000008ea <spi_init>:
#include <spi.h>

#if SPI_CONFIG_AS_MASTER
void spi_init()
{
	SPI_DDR = (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 8ea:	8c e2       	ldi	r24, 0x2C	; 44
 8ec:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//prescaler 16
 8ee:	81 e5       	ldi	r24, 0x51	; 81
 8f0:	8c bd       	out	0x2c, r24	; 44
 8f2:	08 95       	ret

000008f4 <spi_transmit>:
 8f4:	8e bd       	out	0x2e, r24	; 46
 8f6:	0d b4       	in	r0, 0x2d	; 45
 8f8:	07 fe       	sbrs	r0, 7
 8fa:	fd cf       	rjmp	.-6      	; 0x8f6 <spi_transmit+0x2>
 8fc:	8e b5       	in	r24, 0x2e	; 46
 8fe:	08 95       	ret

00000900 <main>:




int main(void)
{
 900:	cf 93       	push	r28
 902:	df 93       	push	r29
 904:	cd b7       	in	r28, 0x3d	; 61
 906:	de b7       	in	r29, 0x3e	; 62
 908:	68 97       	sbiw	r28, 0x18	; 24
 90a:	0f b6       	in	r0, 0x3f	; 63
 90c:	f8 94       	cli
 90e:	de bf       	out	0x3e, r29	; 62
 910:	0f be       	out	0x3f, r0	; 63
 912:	cd bf       	out	0x3d, r28	; 61
    
    
    
    
    loadTags(); //load any tags stored in eeprom.
 914:	0e 94 ab 02 	call	0x556	; 0x556 <loadTags>
    initServo(); //make servo an output at pin 5
 918:	0e 94 77 01 	call	0x2ee	; 0x2ee <initServo>
 91c:	2f e7       	ldi	r18, 0x7F	; 127
 91e:	88 e3       	ldi	r24, 0x38	; 56
 920:	91 e0       	ldi	r25, 0x01	; 1
 922:	21 50       	subi	r18, 0x01	; 1
 924:	80 40       	sbci	r24, 0x00	; 0
 926:	90 40       	sbci	r25, 0x00	; 0
 928:	e1 f7       	brne	.-8      	; 0x922 <main+0x22>
 92a:	00 c0       	rjmp	.+0      	; 0x92c <main+0x2c>
 92c:	00 00       	nop
    
    uint8_t byte;
    uint8_t str[MAX_LEN];
    _delay_ms(50);
    LCDInit(LS_BLINK);
 92e:	81 e0       	ldi	r24, 0x01	; 1
 930:	0e 94 a3 00 	call	0x146	; 0x146 <LCDInit>
    LCDWriteStringXY(2,0,"ECEN1310 RFID Tag Reader");
 934:	60 e0       	ldi	r22, 0x00	; 0
 936:	82 e0       	ldi	r24, 0x02	; 2
 938:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 93c:	87 e2       	ldi	r24, 0x27	; 39
 93e:	91 e0       	ldi	r25, 0x01	; 1
 940:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
    initLED(); //very strange init of led needs to be after load tags and servo!
 944:	0e 94 8a 01 	call	0x314	; 0x314 <initLED>

    
    spi_init(); //start communication for rfid
 948:	0e 94 75 04 	call	0x8ea	; 0x8ea <spi_init>
 94c:	af ef       	ldi	r26, 0xFF	; 255
 94e:	b9 e6       	ldi	r27, 0x69	; 105
 950:	e8 e1       	ldi	r30, 0x18	; 24
 952:	a1 50       	subi	r26, 0x01	; 1
 954:	b0 40       	sbci	r27, 0x00	; 0
 956:	e0 40       	sbci	r30, 0x00	; 0
 958:	e1 f7       	brne	.-8      	; 0x952 <main+0x52>
 95a:	00 c0       	rjmp	.+0      	; 0x95c <main+0x5c>
 95c:	00 00       	nop
    _delay_ms(1000);
    LCDClear();
 95e:	60 e0       	ldi	r22, 0x00	; 0
 960:	81 e0       	ldi	r24, 0x01	; 1
 962:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
    
    open();  //for testing
 966:	0e 94 3f 02 	call	0x47e	; 0x47e <open>
    close(); //was for testing
 96a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <close>
    
    //init reader
    mfrc522_init();
 96e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <mfrc522_init>
 972:	ff ef       	ldi	r31, 0xFF	; 255
 974:	2e e9       	ldi	r18, 0x9E	; 158
 976:	84 e2       	ldi	r24, 0x24	; 36
 978:	f1 50       	subi	r31, 0x01	; 1
 97a:	20 40       	sbci	r18, 0x00	; 0
 97c:	80 40       	sbci	r24, 0x00	; 0
 97e:	e1 f7       	brne	.-8      	; 0x978 <main+0x78>
 980:	00 c0       	rjmp	.+0      	; 0x982 <main+0x82>
 982:	00 00       	nop
    
    _delay_ms(1500);
    LCDClear();
 984:	60 e0       	ldi	r22, 0x00	; 0
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
    
    int addNext = 0;
    int deleteNext =0;
    
    
    PORTC |=BV(ledG);
 98c:	42 9a       	sbi	0x08, 2	; 8
 98e:	9f e7       	ldi	r25, 0x7F	; 127
 990:	a2 e3       	ldi	r26, 0x32	; 50
 992:	b2 e0       	ldi	r27, 0x02	; 2
 994:	91 50       	subi	r25, 0x01	; 1
 996:	a0 40       	sbci	r26, 0x00	; 0
 998:	b0 40       	sbci	r27, 0x00	; 0
 99a:	e1 f7       	brne	.-8      	; 0x994 <main+0x94>
 99c:	00 c0       	rjmp	.+0      	; 0x99e <main+0x9e>
 99e:	00 00       	nop
    _delay_ms(90);
    PORTC ^= BV(ledG);
 9a0:	88 b1       	in	r24, 0x08	; 8
 9a2:	94 e0       	ldi	r25, 0x04	; 4
 9a4:	89 27       	eor	r24, r25
 9a6:	88 b9       	out	0x08, r24	; 8
 9a8:	ef e5       	ldi	r30, 0x5F	; 95
 9aa:	fa ee       	ldi	r31, 0xEA	; 234
 9ac:	31 97       	sbiw	r30, 0x01	; 1
 9ae:	f1 f7       	brne	.-4      	; 0x9ac <main+0xac>
 9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <main+0xb2>
 9b2:	00 00       	nop
    
    _delay_ms(1500);
    LCDClear();
    
    int addNext = 0;
    int deleteNext =0;
 9b4:	e1 2c       	mov	r14, r1
 9b6:	f1 2c       	mov	r15, r1
    mfrc522_init();
    
    _delay_ms(1500);
    LCDClear();
    
    int addNext = 0;
 9b8:	00 e0       	ldi	r16, 0x00	; 0
 9ba:	10 e0       	ldi	r17, 0x00	; 0
 9bc:	4e 01       	movw	r8, r28
 9be:	f6 e0       	ldi	r31, 0x06	; 6
 9c0:	8f 0e       	add	r8, r31
 9c2:	91 1c       	adc	r9, r1
    
    while(1){
        
        // initLED();
        
        loadTags();
 9c4:	0e 94 ab 02 	call	0x556	; 0x556 <loadTags>
        byte = mfrc522_request(PICC_REQALL,str);
 9c8:	be 01       	movw	r22, r28
 9ca:	6f 5f       	subi	r22, 0xFF	; 255
 9cc:	7f 4f       	sbci	r23, 0xFF	; 255
 9ce:	82 e5       	ldi	r24, 0x52	; 82
 9d0:	0e 94 0a 04 	call	0x814	; 0x814 <mfrc522_request>
 9d4:	d8 2e       	mov	r13, r24
        
        LCDHexDumpXY(0,0,byte);
 9d6:	48 2f       	mov	r20, r24
 9d8:	60 e0       	ldi	r22, 0x00	; 0
 9da:	80 e0       	ldi	r24, 0x00	; 0
 9dc:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCDHexDumpXY>
        buttonRead();
 9e0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <buttonRead>
        LCDClear();
 9e4:	60 e0       	ldi	r22, 0x00	; 0
 9e6:	81 e0       	ldi	r24, 0x01	; 1
 9e8:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
        
        while(deleteNext == 1){
 9ec:	e1 e0       	ldi	r30, 0x01	; 1
 9ee:	ee 16       	cp	r14, r30
 9f0:	f1 04       	cpc	r15, r1
 9f2:	09 f4       	brne	.+2      	; 0x9f6 <main+0xf6>
 9f4:	0b c1       	rjmp	.+534    	; 0xc0c <main+0x30c>
            }
            loadTags();
            byte = mfrc522_request(PICC_REQALL,str);
        }//end of delete next
        
        while(addNext == 1){
 9f6:	01 30       	cpi	r16, 0x01	; 1
 9f8:	11 05       	cpc	r17, r1
 9fa:	09 f4       	brne	.+2      	; 0x9fe <main+0xfe>
 9fc:	9d c1       	rjmp	.+826    	; 0xd38 <main+0x438>
            }
            loadTags();
            byte = mfrc522_request(PICC_REQALL,str);
        }
        
        if(byte == CARD_FOUND && addNext !=1)
 9fe:	f1 e0       	ldi	r31, 0x01	; 1
 a00:	df 12       	cpse	r13, r31
 a02:	8c c2       	rjmp	.+1304   	; 0xf1c <main+0x61c>
        {
            byte = mfrc522_get_card_serial(str);
 a04:	ce 01       	movw	r24, r28
 a06:	01 96       	adiw	r24, 0x01	; 1
 a08:	0e 94 3d 04 	call	0x87a	; 0x87a <mfrc522_get_card_serial>
            if(byte == CARD_FOUND)
 a0c:	81 30       	cpi	r24, 0x01	; 1
 a0e:	09 f0       	breq	.+2      	; 0xa12 <main+0x112>
 a10:	63 c2       	rjmp	.+1222   	; 0xed8 <main+0x5d8>
 a12:	ce 01       	movw	r24, r28
 a14:	01 96       	adiw	r24, 0x01	; 1
 a16:	7c 01       	movw	r14, r24
            {
                for(byte=0;byte<5;byte++){
                    LCDWriteInt(str[byte], -1);
 a18:	d7 01       	movw	r26, r14
 a1a:	8d 91       	ld	r24, X+
 a1c:	7d 01       	movw	r14, r26
 a1e:	6f ef       	ldi	r22, 0xFF	; 255
 a20:	7f ef       	ldi	r23, 0xFF	; 255
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteInt>
        if(byte == CARD_FOUND && addNext !=1)
        {
            byte = mfrc522_get_card_serial(str);
            if(byte == CARD_FOUND)
            {
                for(byte=0;byte<5;byte++){
 a28:	e8 14       	cp	r14, r8
 a2a:	f9 04       	cpc	r15, r9
 a2c:	a9 f7       	brne	.-22     	; 0xa18 <main+0x118>
 a2e:	fe 01       	movw	r30, r28
 a30:	31 96       	adiw	r30, 0x01	; 1
 a32:	6f 01       	movw	r12, r30
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
                            write_eeprom_word(tag2[i], str[i]);
                        }
                        tagNumber++;
                        addNext = 0;
 a34:	3f 01       	movw	r6, r30
 a36:	af e5       	ldi	r26, 0x5F	; 95
 a38:	ba ee       	ldi	r27, 0xEA	; 234
 a3a:	11 97       	sbiw	r26, 0x01	; 1
 a3c:	f1 f7       	brne	.-4      	; 0xa3a <main+0x13a>
 a3e:	00 c0       	rjmp	.+0      	; 0xa40 <main+0x140>
 a40:	00 00       	nop
            { //not a valid card found
                LCDWriteStringXY(0,1,"Error");
            }
            for(int i=0; i<5; i++){
                _delay_ms(30);//test
                LCDWriteInt(str[i], -1);//test
 a42:	f3 01       	movw	r30, r6
 a44:	81 91       	ld	r24, Z+
 a46:	3f 01       	movw	r6, r30
 a48:	6f ef       	ldi	r22, 0xFF	; 255
 a4a:	7f ef       	ldi	r23, 0xFF	; 255
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteInt>
            }
            else
            { //not a valid card found
                LCDWriteStringXY(0,1,"Error");
            }
            for(int i=0; i<5; i++){
 a52:	86 14       	cp	r8, r6
 a54:	97 04       	cpc	r9, r7
 a56:	79 f7       	brne	.-34     	; 0xa36 <main+0x136>
 a58:	ff ef       	ldi	r31, 0xFF	; 255
 a5a:	20 e7       	ldi	r18, 0x70	; 112
 a5c:	82 e0       	ldi	r24, 0x02	; 2
 a5e:	f1 50       	subi	r31, 0x01	; 1
 a60:	20 40       	sbci	r18, 0x00	; 0
 a62:	80 40       	sbci	r24, 0x00	; 0
 a64:	e1 f7       	brne	.-8      	; 0xa5e <main+0x15e>
 a66:	00 c0       	rjmp	.+0      	; 0xa68 <main+0x168>
 a68:	00 00       	nop
                _delay_ms(30);//test
                LCDWriteInt(str[i], -1);//test
            }
            _delay_ms(100);//test
            LCDClear();//test
 a6a:	60 e0       	ldi	r22, 0x00	; 0
 a6c:	81 e0       	ldi	r24, 0x01	; 1
 a6e:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 a72:	a0 e1       	ldi	r26, 0x10	; 16
 a74:	b1 e0       	ldi	r27, 0x01	; 1
 a76:	b8 8f       	std	Y+24, r27	; 0x18
 a78:	af 8b       	std	Y+23, r26	; 0x17
 a7a:	2b e0       	ldi	r18, 0x0B	; 11
 a7c:	42 2e       	mov	r4, r18
 a7e:	21 e0       	ldi	r18, 0x01	; 1
 a80:	52 2e       	mov	r5, r18
 a82:	36 e0       	ldi	r19, 0x06	; 6
 a84:	23 2e       	mov	r2, r19
 a86:	31 e0       	ldi	r19, 0x01	; 1
 a88:	33 2e       	mov	r3, r19
 a8a:	ea e0       	ldi	r30, 0x0A	; 10
 a8c:	f2 e0       	ldi	r31, 0x02	; 2
 a8e:	fa 8b       	std	Y+18, r31	; 0x12
 a90:	e9 8b       	std	Y+17, r30	; 0x11
 a92:	86 ef       	ldi	r24, 0xF6	; 246
 a94:	91 e0       	ldi	r25, 0x01	; 1
 a96:	9e 8b       	std	Y+22, r25	; 0x16
 a98:	8d 8b       	std	Y+21, r24	; 0x15
 a9a:	a5 e1       	ldi	r26, 0x15	; 21
 a9c:	b1 e0       	ldi	r27, 0x01	; 1
 a9e:	bc 8b       	std	Y+20, r27	; 0x14
 aa0:	ab 8b       	std	Y+19, r26	; 0x13
 aa2:	78 01       	movw	r14, r16
 aa4:	58 01       	movw	r10, r16
            
            for(int k=0;k<5 ;k++){ //loop through id arras
                LCDWriteIntXY(0,1,str[k], -1);
 aa6:	61 e0       	ldi	r22, 0x01	; 1
 aa8:	80 e0       	ldi	r24, 0x00	; 0
 aaa:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 aae:	f6 01       	movw	r30, r12
 ab0:	80 81       	ld	r24, Z
 ab2:	6f ef       	ldi	r22, 0xFF	; 255
 ab4:	7f ef       	ldi	r23, 0xFF	; 255
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteInt>
                if(str[k] == card2[k] || str[k] == card1[k] || str[k] == ram_tag1[k] || str[k] ==ram_tag2[k]) //tag compare
 abc:	d6 01       	movw	r26, r12
 abe:	8c 91       	ld	r24, X
 ac0:	ef 89       	ldd	r30, Y+23	; 0x17
 ac2:	f8 8d       	ldd	r31, Y+24	; 0x18
 ac4:	91 91       	ld	r25, Z+
 ac6:	f8 8f       	std	Y+24, r31	; 0x18
 ac8:	ef 8b       	std	Y+23, r30	; 0x17
 aca:	89 17       	cp	r24, r25
 acc:	79 f0       	breq	.+30     	; 0xaec <main+0x1ec>
 ace:	ab 89       	ldd	r26, Y+19	; 0x13
 ad0:	bc 89       	ldd	r27, Y+20	; 0x14
 ad2:	9c 91       	ld	r25, X
 ad4:	89 17       	cp	r24, r25
 ad6:	51 f0       	breq	.+20     	; 0xaec <main+0x1ec>
 ad8:	ed 89       	ldd	r30, Y+21	; 0x15
 ada:	fe 89       	ldd	r31, Y+22	; 0x16
 adc:	90 81       	ld	r25, Z
 ade:	89 17       	cp	r24, r25
 ae0:	29 f0       	breq	.+10     	; 0xaec <main+0x1ec>
 ae2:	a9 89       	ldd	r26, Y+17	; 0x11
 ae4:	ba 89       	ldd	r27, Y+18	; 0x12
 ae6:	9c 91       	ld	r25, X
 ae8:	89 13       	cpse	r24, r25
 aea:	ff c1       	rjmp	.+1022   	; 0xeea <main+0x5ea>
                {
                    LCDWriteIntXY(0,1,str[k], -1);
 aec:	61 e0       	ldi	r22, 0x01	; 1
 aee:	80 e0       	ldi	r24, 0x00	; 0
 af0:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 af4:	f6 01       	movw	r30, r12
 af6:	80 81       	ld	r24, Z
 af8:	6f ef       	ldi	r22, 0xFF	; 255
 afa:	7f ef       	ldi	r23, 0xFF	; 255
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteInt>
                    LCDWriteString("MATCH");
 b02:	8c ec       	ldi	r24, 0xCC	; 204
 b04:	91 e0       	ldi	r25, 0x01	; 1
 b06:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 b0a:	ff e7       	ldi	r31, 0x7F	; 127
 b0c:	28 e3       	ldi	r18, 0x38	; 56
 b0e:	81 e0       	ldi	r24, 0x01	; 1
 b10:	f1 50       	subi	r31, 0x01	; 1
 b12:	20 40       	sbci	r18, 0x00	; 0
 b14:	80 40       	sbci	r24, 0x00	; 0
 b16:	e1 f7       	brne	.-8      	; 0xb10 <main+0x210>
 b18:	00 c0       	rjmp	.+0      	; 0xb1a <main+0x21a>
 b1a:	00 00       	nop
                    _delay_ms(50);
                    LCDClear();
 b1c:	60 e0       	ldi	r22, 0x00	; 0
 b1e:	81 e0       	ldi	r24, 0x01	; 1
 b20:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                    validCard = 1;
 b24:	a1 e0       	ldi	r26, 0x01	; 1
 b26:	b0 e0       	ldi	r27, 0x00	; 0
 b28:	b0 93 05 01 	sts	0x0105, r27
 b2c:	a0 93 04 01 	sts	0x0104, r26
 b30:	bf ef       	ldi	r27, 0xFF	; 255
 b32:	cb 1a       	sub	r12, r27
 b34:	db 0a       	sbc	r13, r27
 b36:	ef ef       	ldi	r30, 0xFF	; 255
 b38:	4e 1a       	sub	r4, r30
 b3a:	5e 0a       	sbc	r5, r30
 b3c:	ff ef       	ldi	r31, 0xFF	; 255
 b3e:	2f 1a       	sub	r2, r31
 b40:	3f 0a       	sbc	r3, r31
 b42:	89 89       	ldd	r24, Y+17	; 0x11
 b44:	9a 89       	ldd	r25, Y+18	; 0x12
 b46:	01 96       	adiw	r24, 0x01	; 1
 b48:	9a 8b       	std	Y+18, r25	; 0x12
 b4a:	89 8b       	std	Y+17, r24	; 0x11
 b4c:	ad 89       	ldd	r26, Y+21	; 0x15
 b4e:	be 89       	ldd	r27, Y+22	; 0x16
 b50:	11 96       	adiw	r26, 0x01	; 1
 b52:	be 8b       	std	Y+22, r27	; 0x16
 b54:	ad 8b       	std	Y+21, r26	; 0x15
 b56:	eb 89       	ldd	r30, Y+19	; 0x13
 b58:	fc 89       	ldd	r31, Y+20	; 0x14
 b5a:	31 96       	adiw	r30, 0x01	; 1
 b5c:	fc 8b       	std	Y+20, r31	; 0x14
 b5e:	eb 8b       	std	Y+19, r30	; 0x13
                LCDWriteInt(str[i], -1);//test
            }
            _delay_ms(100);//test
            LCDClear();//test
            
            for(int k=0;k<5 ;k++){ //loop through id arras
 b60:	6c 14       	cp	r6, r12
 b62:	7d 04       	cpc	r7, r13
 b64:	09 f0       	breq	.+2      	; 0xb68 <main+0x268>
 b66:	9f cf       	rjmp	.-194    	; 0xaa6 <main+0x1a6>
                    validCard = -1;
                    deleteNext = 0;
                    addNext = 0;
                }
            } //end of for loop checking if what type of tag
            if(validCard == 1){
 b68:	80 91 04 01 	lds	r24, 0x0104
 b6c:	90 91 05 01 	lds	r25, 0x0105
 b70:	01 97       	sbiw	r24, 0x01	; 1
 b72:	29 f5       	brne	.+74     	; 0xbbe <main+0x2be>
                LCDClear();
 b74:	60 e0       	ldi	r22, 0x00	; 0
 b76:	81 e0       	ldi	r24, 0x01	; 1
 b78:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 b7c:	ff ef       	ldi	r31, 0xFF	; 255
 b7e:	24 e3       	ldi	r18, 0x34	; 52
 b80:	8c e0       	ldi	r24, 0x0C	; 12
 b82:	f1 50       	subi	r31, 0x01	; 1
 b84:	20 40       	sbci	r18, 0x00	; 0
 b86:	80 40       	sbci	r24, 0x00	; 0
 b88:	e1 f7       	brne	.-8      	; 0xb82 <main+0x282>
 b8a:	00 c0       	rjmp	.+0      	; 0xb8c <main+0x28c>
 b8c:	00 00       	nop
                _delay_ms(500);
                LCDWriteString("SUCCESS");
 b8e:	82 ed       	ldi	r24, 0xD2	; 210
 b90:	91 e0       	ldi	r25, 0x01	; 1
 b92:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
                open();
 b96:	0e 94 3f 02 	call	0x47e	; 0x47e <open>
                validCard=5;
 b9a:	a5 e0       	ldi	r26, 0x05	; 5
 b9c:	b0 e0       	ldi	r27, 0x00	; 0
 b9e:	b0 93 05 01 	sts	0x0105, r27
 ba2:	a0 93 04 01 	sts	0x0104, r26
 ba6:	bf ef       	ldi	r27, 0xFF	; 255
 ba8:	e9 e6       	ldi	r30, 0x69	; 105
 baa:	f8 e1       	ldi	r31, 0x18	; 24
 bac:	b1 50       	subi	r27, 0x01	; 1
 bae:	e0 40       	sbci	r30, 0x00	; 0
 bb0:	f0 40       	sbci	r31, 0x00	; 0
 bb2:	e1 f7       	brne	.-8      	; 0xbac <main+0x2ac>
 bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <main+0x2b6>
 bb6:	00 00       	nop
                deleteNext =0;
                _delay_ms(1000);
                close();
 bb8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <close>
                LCDClear();
                _delay_ms(500);
                LCDWriteString("SUCCESS");
                open();
                validCard=5;
                deleteNext =0;
 bbc:	78 01       	movw	r14, r16
                _delay_ms(1000);
                close();
                
            } //end if test worked
            if(validCard == -1 && addNext !=1){
 bbe:	80 91 04 01 	lds	r24, 0x0104
 bc2:	90 91 05 01 	lds	r25, 0x0105
 bc6:	01 96       	adiw	r24, 0x01	; 1
 bc8:	b9 f4       	brne	.+46     	; 0xbf8 <main+0x2f8>
 bca:	81 e0       	ldi	r24, 0x01	; 1
 bcc:	a8 16       	cp	r10, r24
 bce:	b1 04       	cpc	r11, r1
 bd0:	99 f0       	breq	.+38     	; 0xbf8 <main+0x2f8>
                LCDClear();
 bd2:	60 e0       	ldi	r22, 0x00	; 0
 bd4:	81 e0       	ldi	r24, 0x01	; 1
 bd6:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 bda:	9f ef       	ldi	r25, 0xFF	; 255
 bdc:	a0 e7       	ldi	r26, 0x70	; 112
 bde:	b2 e0       	ldi	r27, 0x02	; 2
 be0:	91 50       	subi	r25, 0x01	; 1
 be2:	a0 40       	sbci	r26, 0x00	; 0
 be4:	b0 40       	sbci	r27, 0x00	; 0
 be6:	e1 f7       	brne	.-8      	; 0xbe0 <main+0x2e0>
 be8:	00 c0       	rjmp	.+0      	; 0xbea <main+0x2ea>
 bea:	00 00       	nop
                _delay_ms(100);
                LCDWriteString("not valid");
 bec:	8a ed       	ldi	r24, 0xDA	; 218
 bee:	91 e0       	ldi	r25, 0x01	; 1
 bf0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
                close();
 bf4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <close>
                LCDClear();
            }
            
        } //end of valid card found
        
        LCDWriteStringXY(0,0,"Present Tag");
 bf8:	60 e0       	ldi	r22, 0x00	; 0
 bfa:	80 e0       	ldi	r24, 0x00	; 0
 bfc:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 c00:	84 ee       	ldi	r24, 0xE4	; 228
 c02:	91 e0       	ldi	r25, 0x01	; 1
 c04:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
    
    while(1){
        
        // initLED();
        
        loadTags();
 c08:	85 01       	movw	r16, r10
 c0a:	dc ce       	rjmp	.-584    	; 0x9c4 <main+0xc4>
        LCDHexDumpXY(0,0,byte);
        buttonRead();
        LCDClear();
        
        while(deleteNext == 1){
            LCDClear();
 c0c:	60 e0       	ldi	r22, 0x00	; 0
 c0e:	81 e0       	ldi	r24, 0x01	; 1
 c10:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
            LCDWriteString("delete tag acivated");
 c14:	80 e4       	ldi	r24, 0x40	; 64
 c16:	91 e0       	ldi	r25, 0x01	; 1
 c18:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 c1c:	2f ef       	ldi	r18, 0xFF	; 255
 c1e:	87 e8       	ldi	r24, 0x87	; 135
 c20:	93 e1       	ldi	r25, 0x13	; 19
 c22:	21 50       	subi	r18, 0x01	; 1
 c24:	80 40       	sbci	r24, 0x00	; 0
 c26:	90 40       	sbci	r25, 0x00	; 0
 c28:	e1 f7       	brne	.-8      	; 0xc22 <main+0x322>
 c2a:	00 c0       	rjmp	.+0      	; 0xc2c <main+0x32c>
 c2c:	00 00       	nop
            _delay_ms(800);
            byte = mfrc522_request(PICC_REQALL,str);
 c2e:	be 01       	movw	r22, r28
 c30:	6f 5f       	subi	r22, 0xFF	; 255
 c32:	7f 4f       	sbci	r23, 0xFF	; 255
 c34:	82 e5       	ldi	r24, 0x52	; 82
 c36:	0e 94 0a 04 	call	0x814	; 0x814 <mfrc522_request>
            LCDClear();
 c3a:	60 e0       	ldi	r22, 0x00	; 0
 c3c:	81 e0       	ldi	r24, 0x01	; 1
 c3e:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
            LCDWriteString("Scan again to ");
 c42:	84 e5       	ldi	r24, 0x54	; 84
 c44:	91 e0       	ldi	r25, 0x01	; 1
 c46:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
            LCDWriteStringXY(0, 1, "delete all tags.");
 c4a:	61 e0       	ldi	r22, 0x01	; 1
 c4c:	80 e0       	ldi	r24, 0x00	; 0
 c4e:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 c52:	83 e6       	ldi	r24, 0x63	; 99
 c54:	91 e0       	ldi	r25, 0x01	; 1
 c56:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
            byte = mfrc522_request(PICC_REQALL,str);
 c5a:	be 01       	movw	r22, r28
 c5c:	6f 5f       	subi	r22, 0xFF	; 255
 c5e:	7f 4f       	sbci	r23, 0xFF	; 255
 c60:	82 e5       	ldi	r24, 0x52	; 82
 c62:	0e 94 0a 04 	call	0x814	; 0x814 <mfrc522_request>
            if(byte == CARD_FOUND)
 c66:	81 30       	cpi	r24, 0x01	; 1
 c68:	09 f0       	breq	.+2      	; 0xc6c <main+0x36c>
 c6a:	5c c0       	rjmp	.+184    	; 0xd24 <main+0x424>
            {
                byte = mfrc522_get_card_serial(str);
 c6c:	ce 01       	movw	r24, r28
 c6e:	01 96       	adiw	r24, 0x01	; 1
 c70:	0e 94 3d 04 	call	0x87a	; 0x87a <mfrc522_get_card_serial>
                if(byte == CARD_FOUND)
 c74:	81 30       	cpi	r24, 0x01	; 1
 c76:	09 f0       	breq	.+2      	; 0xc7a <main+0x37a>
 c78:	55 c0       	rjmp	.+170    	; 0xd24 <main+0x424>
 c7a:	fe 01       	movw	r30, r28
 c7c:	31 96       	adiw	r30, 0x01	; 1
 c7e:	a6 e0       	ldi	r26, 0x06	; 6
 c80:	b1 e0       	ldi	r27, 0x01	; 1
                        if (tagNumber == 0 || str[j] != tag1[j] || str[j] != tag2[j]) {
                            deleteNext = 0;
                        }
                    }
                    for(int i=0; i<=4; i++){
                        if(str[i] == DELETE[i]){
 c82:	91 91       	ld	r25, Z+
 c84:	8d 91       	ld	r24, X+
                    for(int j=0; j<=4; j++){
                        if (tagNumber == 0 || str[j] != tag1[j] || str[j] != tag2[j]) {
                            deleteNext = 0;
                        }
                    }
                    for(int i=0; i<=4; i++){
 c86:	e8 15       	cp	r30, r8
 c88:	f9 05       	cpc	r31, r9
 c8a:	d9 f7       	brne	.-10     	; 0xc82 <main+0x382>
                        }
                        else
                            deleteNext =0;
                    }//end of check if duplicate
                    
                    if(deleteNext ==1){
 c8c:	98 13       	cpse	r25, r24
 c8e:	48 c0       	rjmp	.+144    	; 0xd20 <main+0x420>
                        LCDClear();
 c90:	60 e0       	ldi	r22, 0x00	; 0
 c92:	81 e0       	ldi	r24, 0x01	; 1
 c94:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                        LCDWriteString("Removing Tags");
 c98:	84 e7       	ldi	r24, 0x74	; 116
 c9a:	91 e0       	ldi	r25, 0x01	; 1
 c9c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 ca0:	af ef       	ldi	r26, 0xFF	; 255
 ca2:	b9 e6       	ldi	r27, 0x69	; 105
 ca4:	e8 e1       	ldi	r30, 0x18	; 24
 ca6:	a1 50       	subi	r26, 0x01	; 1
 ca8:	b0 40       	sbci	r27, 0x00	; 0
 caa:	e0 40       	sbci	r30, 0x00	; 0
 cac:	e1 f7       	brne	.-8      	; 0xca6 <main+0x3a6>
 cae:	00 c0       	rjmp	.+0      	; 0xcb0 <main+0x3b0>
 cb0:	00 00       	nop
 cb2:	4b ef       	ldi	r20, 0xFB	; 251
 cb4:	e4 2e       	mov	r14, r20
 cb6:	41 e0       	ldi	r20, 0x01	; 1
 cb8:	f4 2e       	mov	r15, r20
 cba:	55 e0       	ldi	r21, 0x05	; 5
 cbc:	c5 2e       	mov	r12, r21
 cbe:	52 e0       	ldi	r21, 0x02	; 2
 cc0:	d5 2e       	mov	r13, r21
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
                            write_eeprom_word(tag1[i], 0);
 cc2:	d7 01       	movw	r26, r14
 cc4:	8d 91       	ld	r24, X+
 cc6:	7d 01       	movw	r14, r26
 cc8:	60 e0       	ldi	r22, 0x00	; 0
 cca:	70 e0       	ldi	r23, 0x00	; 0
 ccc:	90 e0       	ldi	r25, 0x00	; 0
 cce:	0e 94 bf 07 	call	0xf7e	; 0xf7e <eeprom_write_word>
                            write_eeprom_word(tag2[i], 0);
 cd2:	f6 01       	movw	r30, r12
 cd4:	81 91       	ld	r24, Z+
 cd6:	6f 01       	movw	r12, r30
 cd8:	60 e0       	ldi	r22, 0x00	; 0
 cda:	70 e0       	ldi	r23, 0x00	; 0
 cdc:	90 e0       	ldi	r25, 0x00	; 0
 cde:	0e 94 bf 07 	call	0xf7e	; 0xf7e <eeprom_write_word>
                    
                    if(deleteNext ==1){
                        LCDClear();
                        LCDWriteString("Removing Tags");
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
 ce2:	f0 e0       	ldi	r31, 0x00	; 0
 ce4:	ef 16       	cp	r14, r31
 ce6:	f2 e0       	ldi	r31, 0x02	; 2
 ce8:	ff 06       	cpc	r15, r31
 cea:	59 f7       	brne	.-42     	; 0xcc2 <main+0x3c2>
                            write_eeprom_word(tag1[i], 0);
                            write_eeprom_word(tag2[i], 0);
                        }
                        tagNumber =1;
 cec:	81 e0       	ldi	r24, 0x01	; 1
 cee:	90 e0       	ldi	r25, 0x00	; 0
 cf0:	90 93 03 01 	sts	0x0103, r25
 cf4:	80 93 02 01 	sts	0x0102, r24
                        deleteNext =0;
                        LCDClear();
 cf8:	60 e0       	ldi	r22, 0x00	; 0
 cfa:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                        LCDWriteString("Tags Erased");
 cfe:	82 e8       	ldi	r24, 0x82	; 130
 d00:	91 e0       	ldi	r25, 0x01	; 1
 d02:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 d06:	9f ef       	ldi	r25, 0xFF	; 255
 d08:	a2 e5       	ldi	r26, 0x52	; 82
 d0a:	b7 e0       	ldi	r27, 0x07	; 7
 d0c:	91 50       	subi	r25, 0x01	; 1
 d0e:	a0 40       	sbci	r26, 0x00	; 0
 d10:	b0 40       	sbci	r27, 0x00	; 0
 d12:	e1 f7       	brne	.-8      	; 0xd0c <main+0x40c>
 d14:	00 c0       	rjmp	.+0      	; 0xd16 <main+0x416>
 d16:	00 00       	nop
                        _delay_ms(300);
                        tagNumber =0;
 d18:	10 92 03 01 	sts	0x0103, r1
 d1c:	10 92 02 01 	sts	0x0102, r1
                        
                    }
                    deleteNext =0;
 d20:	e1 2c       	mov	r14, r1
 d22:	f1 2c       	mov	r15, r1
                    // addNext =0;
                }//end of if card found
            }
            loadTags();
 d24:	0e 94 ab 02 	call	0x556	; 0x556 <loadTags>
            byte = mfrc522_request(PICC_REQALL,str);
 d28:	be 01       	movw	r22, r28
 d2a:	6f 5f       	subi	r22, 0xFF	; 255
 d2c:	7f 4f       	sbci	r23, 0xFF	; 255
 d2e:	82 e5       	ldi	r24, 0x52	; 82
 d30:	0e 94 0a 04 	call	0x814	; 0x814 <mfrc522_request>
 d34:	d8 2e       	mov	r13, r24
 d36:	5a ce       	rjmp	.-844    	; 0x9ec <main+0xec>
        }//end of delete next
        
        while(addNext == 1){
            byte = mfrc522_request(PICC_REQALL,str);
 d38:	be 01       	movw	r22, r28
 d3a:	6f 5f       	subi	r22, 0xFF	; 255
 d3c:	7f 4f       	sbci	r23, 0xFF	; 255
 d3e:	82 e5       	ldi	r24, 0x52	; 82
 d40:	0e 94 0a 04 	call	0x814	; 0x814 <mfrc522_request>
            LCDClear();
 d44:	60 e0       	ldi	r22, 0x00	; 0
 d46:	81 e0       	ldi	r24, 0x01	; 1
 d48:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
            LCDWriteString("Scan tag to ");
 d4c:	8e e8       	ldi	r24, 0x8E	; 142
 d4e:	91 e0       	ldi	r25, 0x01	; 1
 d50:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
            LCDWriteStringXY(0, 1, "be added.");
 d54:	61 e0       	ldi	r22, 0x01	; 1
 d56:	80 e0       	ldi	r24, 0x00	; 0
 d58:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 d5c:	8b e9       	ldi	r24, 0x9B	; 155
 d5e:	91 e0       	ldi	r25, 0x01	; 1
 d60:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
            byte = mfrc522_request(PICC_REQALL,str);
 d64:	be 01       	movw	r22, r28
 d66:	6f 5f       	subi	r22, 0xFF	; 255
 d68:	7f 4f       	sbci	r23, 0xFF	; 255
 d6a:	82 e5       	ldi	r24, 0x52	; 82
 d6c:	0e 94 0a 04 	call	0x814	; 0x814 <mfrc522_request>
 d70:	d8 2e       	mov	r13, r24
            
            if(addNext ==1 && tagNumber >2)
 d72:	80 91 02 01 	lds	r24, 0x0102
 d76:	90 91 03 01 	lds	r25, 0x0103
 d7a:	03 97       	sbiw	r24, 0x03	; 3
 d7c:	b4 f0       	brlt	.+44     	; 0xdaa <main+0x4aa>
            {
                addNext =0;
                tagNumber =1;
 d7e:	10 93 03 01 	sts	0x0103, r17
 d82:	00 93 02 01 	sts	0x0102, r16
                LCDClear();
 d86:	60 e0       	ldi	r22, 0x00	; 0
 d88:	81 e0       	ldi	r24, 0x01	; 1
 d8a:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                LCDWriteString("Full");
 d8e:	85 ea       	ldi	r24, 0xA5	; 165
 d90:	91 e0       	ldi	r25, 0x01	; 1
 d92:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 d96:	ff ef       	ldi	r31, 0xFF	; 255
 d98:	29 e6       	ldi	r18, 0x69	; 105
 d9a:	88 e1       	ldi	r24, 0x18	; 24
 d9c:	f1 50       	subi	r31, 0x01	; 1
 d9e:	20 40       	sbci	r18, 0x00	; 0
 da0:	80 40       	sbci	r24, 0x00	; 0
 da2:	e1 f7       	brne	.-8      	; 0xd9c <main+0x49c>
 da4:	00 c0       	rjmp	.+0      	; 0xda6 <main+0x4a6>
 da6:	00 00       	nop
            LCDWriteStringXY(0, 1, "be added.");
            byte = mfrc522_request(PICC_REQALL,str);
            
            if(addNext ==1 && tagNumber >2)
            {
                addNext =0;
 da8:	87 01       	movw	r16, r14
                LCDClear();
                LCDWriteString("Full");
                _delay_ms(1000);
                
            }
            if(byte == CARD_FOUND)
 daa:	91 e0       	ldi	r25, 0x01	; 1
 dac:	d9 12       	cpse	r13, r25
 dae:	64 c0       	rjmp	.+200    	; 0xe78 <main+0x578>
            {
                byte = mfrc522_get_card_serial(str);
 db0:	ce 01       	movw	r24, r28
 db2:	01 96       	adiw	r24, 0x01	; 1
 db4:	0e 94 3d 04 	call	0x87a	; 0x87a <mfrc522_get_card_serial>
                if(byte == CARD_FOUND)
 db8:	81 30       	cpi	r24, 0x01	; 1
 dba:	09 f0       	breq	.+2      	; 0xdbe <main+0x4be>
 dbc:	5d c0       	rjmp	.+186    	; 0xe78 <main+0x578>
 dbe:	de 01       	movw	r26, r28
 dc0:	11 96       	adiw	r26, 0x01	; 1
 dc2:	6d 01       	movw	r12, r26
 dc4:	26 ef       	ldi	r18, 0xF6	; 246
 dc6:	31 e0       	ldi	r19, 0x01	; 1
 dc8:	ea e0       	ldi	r30, 0x0A	; 10
 dca:	f2 e0       	ldi	r31, 0x02	; 2
 dcc:	5d 01       	movw	r10, r26
                {
                    for(int i=0; i<=4; i++){
                        if(str[i] == ram_tag1[i] || str[i]== ram_tag2[i]){
 dce:	d5 01       	movw	r26, r10
 dd0:	8d 91       	ld	r24, X+
 dd2:	5d 01       	movw	r10, r26
 dd4:	d9 01       	movw	r26, r18
 dd6:	9d 91       	ld	r25, X+
 dd8:	9d 01       	movw	r18, r26
 dda:	89 17       	cp	r24, r25
 ddc:	19 f0       	breq	.+6      	; 0xde4 <main+0x4e4>
 dde:	90 81       	ld	r25, Z
 de0:	89 13       	cpse	r24, r25
 de2:	01 c0       	rjmp	.+2      	; 0xde6 <main+0x4e6>
                            addNext =0;//duplicate
 de4:	87 01       	movw	r16, r14
 de6:	31 96       	adiw	r30, 0x01	; 1
            if(byte == CARD_FOUND)
            {
                byte = mfrc522_get_card_serial(str);
                if(byte == CARD_FOUND)
                {
                    for(int i=0; i<=4; i++){
 de8:	a8 14       	cp	r10, r8
 dea:	b9 04       	cpc	r11, r9
 dec:	81 f7       	brne	.-32     	; 0xdce <main+0x4ce>
                        if(str[i] == ram_tag1[i] || str[i]== ram_tag2[i]){
                            addNext =0;//duplicate
                            //not likely to happen but it could
                        }
                    }//end of check if duplicate
                    LCDClear();
 dee:	60 e0       	ldi	r22, 0x00	; 0
 df0:	81 e0       	ldi	r24, 0x01	; 1
 df2:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 df6:	bf ef       	ldi	r27, 0xFF	; 255
 df8:	e3 ec       	ldi	r30, 0xC3	; 195
 dfa:	f9 e0       	ldi	r31, 0x09	; 9
 dfc:	b1 50       	subi	r27, 0x01	; 1
 dfe:	e0 40       	sbci	r30, 0x00	; 0
 e00:	f0 40       	sbci	r31, 0x00	; 0
 e02:	e1 f7       	brne	.-8      	; 0xdfc <main+0x4fc>
 e04:	00 c0       	rjmp	.+0      	; 0xe06 <main+0x506>
 e06:	00 00       	nop
                    //LCDWriteString("whyyyyyy");
                    _delay_ms(400);
                    
                    if(tagNumber ==1 && addNext ==1){
 e08:	80 91 02 01 	lds	r24, 0x0102
 e0c:	90 91 03 01 	lds	r25, 0x0103
 e10:	81 30       	cpi	r24, 0x01	; 1
 e12:	91 05       	cpc	r25, r1
 e14:	d9 f5       	brne	.+118    	; 0xe8c <main+0x58c>
 e16:	01 30       	cpi	r16, 0x01	; 1
 e18:	11 05       	cpc	r17, r1
 e1a:	71 f5       	brne	.+92     	; 0xe78 <main+0x578>
                        LCDClear();
 e1c:	60 e0       	ldi	r22, 0x00	; 0
 e1e:	81 e0       	ldi	r24, 0x01	; 1
 e20:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                        LCDWriteString("ADDING CARD 1");
 e24:	8a ea       	ldi	r24, 0xAA	; 170
 e26:	91 e0       	ldi	r25, 0x01	; 1
 e28:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 e2c:	2f ef       	ldi	r18, 0xFF	; 255
 e2e:	89 e6       	ldi	r24, 0x69	; 105
 e30:	98 e1       	ldi	r25, 0x18	; 24
 e32:	21 50       	subi	r18, 0x01	; 1
 e34:	80 40       	sbci	r24, 0x00	; 0
 e36:	90 40       	sbci	r25, 0x00	; 0
 e38:	e1 f7       	brne	.-8      	; 0xe32 <main+0x532>
 e3a:	00 c0       	rjmp	.+0      	; 0xe3c <main+0x53c>
 e3c:	00 00       	nop
 e3e:	0b ef       	ldi	r16, 0xFB	; 251
 e40:	11 e0       	ldi	r17, 0x01	; 1
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
                            write_eeprom_word(tag1[i], str[i]);
 e42:	d6 01       	movw	r26, r12
 e44:	6d 91       	ld	r22, X+
 e46:	6d 01       	movw	r12, r26
 e48:	f8 01       	movw	r30, r16
 e4a:	81 91       	ld	r24, Z+
 e4c:	8f 01       	movw	r16, r30
 e4e:	70 e0       	ldi	r23, 0x00	; 0
 e50:	90 e0       	ldi	r25, 0x00	; 0
 e52:	0e 94 bf 07 	call	0xf7e	; 0xf7e <eeprom_write_word>
                    
                    if(tagNumber ==1 && addNext ==1){
                        LCDClear();
                        LCDWriteString("ADDING CARD 1");
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
 e56:	ac 14       	cp	r10, r12
 e58:	bd 04       	cpc	r11, r13
 e5a:	99 f7       	brne	.-26     	; 0xe42 <main+0x542>
                        LCDWriteString("ADDING CARD 2");
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
                            write_eeprom_word(tag2[i], str[i]);
                        }
                        tagNumber++;
 e5c:	80 91 02 01 	lds	r24, 0x0102
 e60:	90 91 03 01 	lds	r25, 0x0103
 e64:	01 96       	adiw	r24, 0x01	; 1
 e66:	90 93 03 01 	sts	0x0103, r25
 e6a:	80 93 02 01 	sts	0x0102, r24
                        addNext = 0;
                        deleteNext =0;
                        LCDClear();
 e6e:	60 e0       	ldi	r22, 0x00	; 0
 e70:	81 e0       	ldi	r24, 0x01	; 1
 e72:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
                            write_eeprom_word(tag2[i], str[i]);
                        }
                        tagNumber++;
                        addNext = 0;
 e76:	87 01       	movw	r16, r14
                     
                     */
                    
                }//end of if card found
            }
            loadTags();
 e78:	0e 94 ab 02 	call	0x556	; 0x556 <loadTags>
            byte = mfrc522_request(PICC_REQALL,str);
 e7c:	be 01       	movw	r22, r28
 e7e:	6f 5f       	subi	r22, 0xFF	; 255
 e80:	7f 4f       	sbci	r23, 0xFF	; 255
 e82:	82 e5       	ldi	r24, 0x52	; 82
 e84:	0e 94 0a 04 	call	0x814	; 0x814 <mfrc522_request>
 e88:	d8 2e       	mov	r13, r24
 e8a:	b5 cd       	rjmp	.-1174   	; 0x9f6 <main+0xf6>
                        addNext =0;
                        deleteNext =0;
                        LCDClear();
                    }
                    
                    else if(tagNumber ==2 && addNext ==1){
 e8c:	02 97       	sbiw	r24, 0x02	; 2
 e8e:	a1 f7       	brne	.-24     	; 0xe78 <main+0x578>
 e90:	01 30       	cpi	r16, 0x01	; 1
 e92:	11 05       	cpc	r17, r1
 e94:	89 f7       	brne	.-30     	; 0xe78 <main+0x578>
                        LCDClear();
 e96:	60 e0       	ldi	r22, 0x00	; 0
 e98:	81 e0       	ldi	r24, 0x01	; 1
 e9a:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                        LCDWriteString("ADDING CARD 2");
 e9e:	88 eb       	ldi	r24, 0xB8	; 184
 ea0:	91 e0       	ldi	r25, 0x01	; 1
 ea2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 ea6:	ff ef       	ldi	r31, 0xFF	; 255
 ea8:	29 e6       	ldi	r18, 0x69	; 105
 eaa:	88 e1       	ldi	r24, 0x18	; 24
 eac:	f1 50       	subi	r31, 0x01	; 1
 eae:	20 40       	sbci	r18, 0x00	; 0
 eb0:	80 40       	sbci	r24, 0x00	; 0
 eb2:	e1 f7       	brne	.-8      	; 0xeac <main+0x5ac>
 eb4:	00 c0       	rjmp	.+0      	; 0xeb6 <main+0x5b6>
 eb6:	00 00       	nop
 eb8:	05 e0       	ldi	r16, 0x05	; 5
 eba:	12 e0       	ldi	r17, 0x02	; 2
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
                            write_eeprom_word(tag2[i], str[i]);
 ebc:	d6 01       	movw	r26, r12
 ebe:	6d 91       	ld	r22, X+
 ec0:	6d 01       	movw	r12, r26
 ec2:	f8 01       	movw	r30, r16
 ec4:	81 91       	ld	r24, Z+
 ec6:	8f 01       	movw	r16, r30
 ec8:	70 e0       	ldi	r23, 0x00	; 0
 eca:	90 e0       	ldi	r25, 0x00	; 0
 ecc:	0e 94 bf 07 	call	0xf7e	; 0xf7e <eeprom_write_word>
                    
                    else if(tagNumber ==2 && addNext ==1){
                        LCDClear();
                        LCDWriteString("ADDING CARD 2");
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
 ed0:	ca 14       	cp	r12, r10
 ed2:	db 04       	cpc	r13, r11
 ed4:	99 f7       	brne	.-26     	; 0xebc <main+0x5bc>
 ed6:	c2 cf       	rjmp	.-124    	; 0xe5c <main+0x55c>
                    if(card_display_Delay==1){_delay_ms(1000);}
                }
            }
            else
            { //not a valid card found
                LCDWriteStringXY(0,1,"Error");
 ed8:	61 e0       	ldi	r22, 0x01	; 1
 eda:	80 e0       	ldi	r24, 0x00	; 0
 edc:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 ee0:	86 ec       	ldi	r24, 0xC6	; 198
 ee2:	91 e0       	ldi	r25, 0x01	; 1
 ee4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 ee8:	a2 cd       	rjmp	.-1212   	; 0xa2e <main+0x12e>
                    LCDWriteString("MATCH");
                    _delay_ms(50);
                    LCDClear();
                    validCard = 1;
                }
                else if(str[k] == ADD[k]){
 eea:	f2 01       	movw	r30, r4
 eec:	90 81       	ld	r25, Z
 eee:	89 17       	cp	r24, r25
 ef0:	69 f0       	breq	.+26     	; 0xf0c <main+0x60c>
                    //nextTag read add
                    addNext = 1; //add the next tag
                    
                } //end of add
                else if(str[k] == DELETE[k]){
 ef2:	d1 01       	movw	r26, r2
 ef4:	9c 91       	ld	r25, X
 ef6:	89 17       	cp	r24, r25
 ef8:	69 f0       	breq	.+26     	; 0xf14 <main+0x614>
                    deleteNext =1;
                }
                else{
                    validCard = -1;
 efa:	8f ef       	ldi	r24, 0xFF	; 255
 efc:	9f ef       	ldi	r25, 0xFF	; 255
 efe:	90 93 05 01 	sts	0x0105, r25
 f02:	80 93 04 01 	sts	0x0104, r24
                    deleteNext = 0;
 f06:	78 01       	movw	r14, r16
                    addNext = 0;
 f08:	58 01       	movw	r10, r16
 f0a:	12 ce       	rjmp	.-988    	; 0xb30 <main+0x230>
                    LCDClear();
                    validCard = 1;
                }
                else if(str[k] == ADD[k]){
                    //nextTag read add
                    addNext = 1; //add the next tag
 f0c:	aa 24       	eor	r10, r10
 f0e:	a3 94       	inc	r10
 f10:	b1 2c       	mov	r11, r1
 f12:	0e ce       	rjmp	.-996    	; 0xb30 <main+0x230>
                    
                } //end of add
                else if(str[k] == DELETE[k]){
                    deleteNext =1;
 f14:	ee 24       	eor	r14, r14
 f16:	e3 94       	inc	r14
 f18:	f1 2c       	mov	r15, r1
 f1a:	0a ce       	rjmp	.-1004   	; 0xb30 <main+0x230>
 f1c:	78 01       	movw	r14, r16
 f1e:	58 01       	movw	r10, r16
 f20:	6b ce       	rjmp	.-810    	; 0xbf8 <main+0x2f8>

00000f22 <__divmodhi4>:
 f22:	97 fb       	bst	r25, 7
 f24:	07 2e       	mov	r0, r23
 f26:	16 f4       	brtc	.+4      	; 0xf2c <__divmodhi4+0xa>
 f28:	00 94       	com	r0
 f2a:	07 d0       	rcall	.+14     	; 0xf3a <__divmodhi4_neg1>
 f2c:	77 fd       	sbrc	r23, 7
 f2e:	09 d0       	rcall	.+18     	; 0xf42 <__divmodhi4_neg2>
 f30:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__udivmodhi4>
 f34:	07 fc       	sbrc	r0, 7
 f36:	05 d0       	rcall	.+10     	; 0xf42 <__divmodhi4_neg2>
 f38:	3e f4       	brtc	.+14     	; 0xf48 <__divmodhi4_exit>

00000f3a <__divmodhi4_neg1>:
 f3a:	90 95       	com	r25
 f3c:	81 95       	neg	r24
 f3e:	9f 4f       	sbci	r25, 0xFF	; 255
 f40:	08 95       	ret

00000f42 <__divmodhi4_neg2>:
 f42:	70 95       	com	r23
 f44:	61 95       	neg	r22
 f46:	7f 4f       	sbci	r23, 0xFF	; 255

00000f48 <__divmodhi4_exit>:
 f48:	08 95       	ret

00000f4a <__udivmodhi4>:
 f4a:	aa 1b       	sub	r26, r26
 f4c:	bb 1b       	sub	r27, r27
 f4e:	51 e1       	ldi	r21, 0x11	; 17
 f50:	07 c0       	rjmp	.+14     	; 0xf60 <__udivmodhi4_ep>

00000f52 <__udivmodhi4_loop>:
 f52:	aa 1f       	adc	r26, r26
 f54:	bb 1f       	adc	r27, r27
 f56:	a6 17       	cp	r26, r22
 f58:	b7 07       	cpc	r27, r23
 f5a:	10 f0       	brcs	.+4      	; 0xf60 <__udivmodhi4_ep>
 f5c:	a6 1b       	sub	r26, r22
 f5e:	b7 0b       	sbc	r27, r23

00000f60 <__udivmodhi4_ep>:
 f60:	88 1f       	adc	r24, r24
 f62:	99 1f       	adc	r25, r25
 f64:	5a 95       	dec	r21
 f66:	a9 f7       	brne	.-22     	; 0xf52 <__udivmodhi4_loop>
 f68:	80 95       	com	r24
 f6a:	90 95       	com	r25
 f6c:	bc 01       	movw	r22, r24
 f6e:	cd 01       	movw	r24, r26
 f70:	08 95       	ret

00000f72 <eeprom_read_word>:
 f72:	a8 e1       	ldi	r26, 0x18	; 24
 f74:	b0 e0       	ldi	r27, 0x00	; 0
 f76:	42 e0       	ldi	r20, 0x02	; 2
 f78:	50 e0       	ldi	r21, 0x00	; 0
 f7a:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <eeprom_read_blraw>

00000f7e <eeprom_write_word>:
 f7e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <eeprom_write_byte>
 f82:	27 2f       	mov	r18, r23
 f84:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <eeprom_write_r18>

00000f88 <eeprom_read_block>:
 f88:	dc 01       	movw	r26, r24
 f8a:	cb 01       	movw	r24, r22

00000f8c <eeprom_read_blraw>:
 f8c:	fc 01       	movw	r30, r24
 f8e:	f9 99       	sbic	0x1f, 1	; 31
 f90:	fe cf       	rjmp	.-4      	; 0xf8e <eeprom_read_blraw+0x2>
 f92:	06 c0       	rjmp	.+12     	; 0xfa0 <eeprom_read_blraw+0x14>
 f94:	f2 bd       	out	0x22, r31	; 34
 f96:	e1 bd       	out	0x21, r30	; 33
 f98:	f8 9a       	sbi	0x1f, 0	; 31
 f9a:	31 96       	adiw	r30, 0x01	; 1
 f9c:	00 b4       	in	r0, 0x20	; 32
 f9e:	0d 92       	st	X+, r0
 fa0:	41 50       	subi	r20, 0x01	; 1
 fa2:	50 40       	sbci	r21, 0x00	; 0
 fa4:	b8 f7       	brcc	.-18     	; 0xf94 <eeprom_read_blraw+0x8>
 fa6:	08 95       	ret

00000fa8 <eeprom_write_byte>:
 fa8:	26 2f       	mov	r18, r22

00000faa <eeprom_write_r18>:
 faa:	f9 99       	sbic	0x1f, 1	; 31
 fac:	fe cf       	rjmp	.-4      	; 0xfaa <eeprom_write_r18>
 fae:	1f ba       	out	0x1f, r1	; 31
 fb0:	92 bd       	out	0x22, r25	; 34
 fb2:	81 bd       	out	0x21, r24	; 33
 fb4:	20 bd       	out	0x20, r18	; 32
 fb6:	0f b6       	in	r0, 0x3f	; 63
 fb8:	f8 94       	cli
 fba:	fa 9a       	sbi	0x1f, 2	; 31
 fbc:	f9 9a       	sbi	0x1f, 1	; 31
 fbe:	0f be       	out	0x3f, r0	; 63
 fc0:	01 96       	adiw	r24, 0x01	; 1
 fc2:	08 95       	ret

00000fc4 <_exit>:
 fc4:	f8 94       	cli

00000fc6 <__stop_program>:
 fc6:	ff cf       	rjmp	.-2      	; 0xfc6 <__stop_program>
