
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fc  00800100  00000fe8  0000109c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fe8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  008001fc  008001fc  00001198  2**0
                  ALLOC
  3 .eeprom       0000000c  00810000  00810000  00001198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00003000  00000000  00000000  000011a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000151c  00000000  00000000  000041a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  000056c0  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000056d4  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  00005714  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  00005d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001d  00000000  00000000  000062aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  000062c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ee       	ldi	r30, 0xE8	; 232
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3f       	cpi	r26, 0xFC	; 252
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac ef       	ldi	r26, 0xFC	; 252
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 32       	cpi	r26, 0x2A	; 42
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <main>
  9e:	0c 94 f2 07 	jmp	0xfe4	; 0xfe4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	80 7f       	andi	r24, 0xF0	; 240
  aa:	8a b9       	out	0x0a, r24	; 10

	//change LCD mode
	SET_RW();		//Read mode
  ac:	5e 9a       	sbi	0x0b, 6	; 11
	CLEAR_RS();		//Read status
  ae:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCDBusyLoop+0xc>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <LCDBusyLoop+0xe>

	
	do
	{

		SET_E();
  b4:	5c 9a       	sbi	0x0b, 4	; 11
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <LCDBusyLoop+0x12>
  b8:	00 c0       	rjmp	.+0      	; 0xba <LCDBusyLoop+0x14>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
  ba:	89 b1       	in	r24, 0x09	; 9
		status=status<<4;
  bc:	82 95       	swap	r24
  be:	80 7f       	andi	r24, 0xF0	; 240
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <LCDBusyLoop+0x1c>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <LCDBusyLoop+0x1e>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  c4:	5c 98       	cbi	0x0b, 4	; 11
  c6:	92 e0       	ldi	r25, 0x02	; 2
  c8:	9a 95       	dec	r25
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCDBusyLoop+0x22>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LCDBusyLoop+0x28>
		_delay_us(1);	//tEL

		SET_E();
  ce:	5c 9a       	sbi	0x0b, 4	; 11
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCDBusyLoop+0x2c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCDBusyLoop+0x2e>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
  d4:	99 b1       	in	r25, 0x09	; 9
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <LCDBusyLoop+0x32>
  d8:	00 c0       	rjmp	.+0      	; 0xda <LCDBusyLoop+0x34>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
  da:	5c 98       	cbi	0x0b, 4	; 11
  dc:	92 e0       	ldi	r25, 0x02	; 2
  de:	9a 95       	dec	r25
  e0:	f1 f7       	brne	.-4      	; 0xde <LCDBusyLoop+0x38>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCDBusyLoop+0x3e>
		_delay_us(1);	//tEL
	}while(busy);
  e4:	87 fd       	sbrc	r24, 7
  e6:	e6 cf       	rjmp	.-52     	; 0xb4 <LCDBusyLoop+0xe>

	CLEAR_RW();		//write mode
  e8:	5e 98       	cbi	0x0b, 6	; 11
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
  ea:	8a b1       	in	r24, 0x0a	; 10
  ec:	8f 60       	ori	r24, 0x0F	; 15
  ee:	8a b9       	out	0x0a, r24	; 10
  f0:	08 95       	ret

000000f2 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
  f2:	38 2f       	mov	r19, r24
  f4:	32 95       	swap	r19
  f6:	3f 70       	andi	r19, 0x0F	; 15
ln=(c & 0x0F);
  f8:	28 2f       	mov	r18, r24
  fa:	2f 70       	andi	r18, 0x0F	; 15

if(isdata==0)
  fc:	61 11       	cpse	r22, r1
  fe:	21 c0       	rjmp	.+66     	; 0x142 <LCDByte+0x50>
	CLEAR_RS();
 100:	5d 98       	cbi	0x0b, 5	; 11
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCDByte+0x12>
 104:	00 c0       	rjmp	.+0      	; 0x106 <LCDByte+0x14>
else
	SET_RS();

_delay_us(0.500);		//tAS

SET_E();
 106:	5c 9a       	sbi	0x0b, 4	; 11

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 108:	9b b1       	in	r25, 0x0b	; 11
 10a:	90 7f       	andi	r25, 0xF0	; 240
 10c:	93 2b       	or	r25, r19
LCD_DATA_PORT=temp;
 10e:	9b b9       	out	0x0b, r25	; 11
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	8a 95       	dec	r24
 114:	f1 f7       	brne	.-4      	; 0x112 <LCDByte+0x20>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 118:	5c 98       	cbi	0x0b, 4	; 11
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	8a 95       	dec	r24
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCDByte+0x2a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCDByte+0x30>

_delay_us(1);

//Send the lower nibble
SET_E();
 122:	5c 9a       	sbi	0x0b, 4	; 11

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	82 2b       	or	r24, r18

LCD_DATA_PORT=temp;
 12a:	8b b9       	out	0x0b, r24	; 11
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	8a 95       	dec	r24
 130:	f1 f7       	brne	.-4      	; 0x12e <LCDByte+0x3c>
 132:	00 c0       	rjmp	.+0      	; 0x134 <LCDByte+0x42>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 134:	5c 98       	cbi	0x0b, 4	; 11
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCDByte+0x46>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCDByte+0x4c>

_delay_us(1);			//tEL

LCDBusyLoop();
 13e:	0c 94 53 00 	jmp	0xa6	; 0xa6 <LCDBusyLoop>
ln=(c & 0x0F);

if(isdata==0)
	CLEAR_RS();
else
	SET_RS();
 142:	5d 9a       	sbi	0x0b, 5	; 11
 144:	de cf       	rjmp	.-68     	; 0x102 <LCDByte+0x10>

00000146 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	8f e5       	ldi	r24, 0x5F	; 95
 14c:	9a ee       	ldi	r25, 0xEA	; 234
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <LCDInit+0x8>
 152:	00 c0       	rjmp	.+0      	; 0x154 <LCDInit+0xe>
 154:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 156:	8a b1       	in	r24, 0x0a	; 10
 158:	8f 60       	ori	r24, 0x0F	; 15
 15a:	8a b9       	out	0x0a, r24	; 10
	LCD_E_DDR|=(1<<LCD_E_POS);
 15c:	54 9a       	sbi	0x0a, 4	; 10
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 15e:	55 9a       	sbi	0x0a, 5	; 10
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 160:	56 9a       	sbi	0x0a, 6	; 10

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 162:	8b b1       	in	r24, 0x0b	; 11
 164:	80 7f       	andi	r24, 0xF0	; 240
 166:	8b b9       	out	0x0b, r24	; 11
	CLEAR_E();
 168:	5c 98       	cbi	0x0b, 4	; 11
	CLEAR_RW();
 16a:	5e 98       	cbi	0x0b, 6	; 11
	CLEAR_RS();
 16c:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCDInit+0x2a>
 170:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 172:	5c 9a       	sbi	0x0b, 4	; 11
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 174:	59 9a       	sbi	0x0b, 1	; 11
 176:	92 e0       	ldi	r25, 0x02	; 2
 178:	9a 95       	dec	r25
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCDInit+0x32>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCDInit+0x38>
	_delay_us(1);
	CLEAR_E();
 17e:	5c 98       	cbi	0x0b, 4	; 11
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	8a 95       	dec	r24
 184:	f1 f7       	brne	.-4      	; 0x182 <LCDInit+0x3c>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LCDInit+0x42>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 188:	0e 94 53 00 	call	0xa6	; 0xa6 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	8c 2f       	mov	r24, r28
 190:	8c 60       	ori	r24, 0x0C	; 12
 192:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	88 e2       	ldi	r24, 0x28	; 40
 19a:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	80 e8       	ldi	r24, 0x80	; 128
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format

	
	LCDGotoXY(0,0);

}
 1a2:	cf 91       	pop	r28
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 1a4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <LCDByte>

000001a8 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	ec 01       	movw	r28, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 1b2:	88 81       	ld	r24, Y
 1b4:	81 11       	cpse	r24, r1
 1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <LCDWriteString+0x1a>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	08 95       	ret

	*****************************************************************/
 while(*msg!='\0')
 {
 	//Custom Char Support
	if(*msg=='%')
 1c2:	85 32       	cpi	r24, 0x25	; 37
 1c4:	99 f4       	brne	.+38     	; 0x1ec <LCDWriteString+0x44>
	{
		msg++;
 1c6:	8e 01       	movw	r16, r28
 1c8:	0f 5f       	subi	r16, 0xFF	; 255
 1ca:	1f 4f       	sbci	r17, 0xFF	; 255
		int8_t cc=*msg-'0';
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
		{
			LCDData(cc);
 1d0:	61 e0       	ldi	r22, 0x01	; 1
	if(*msg=='%')
	{
		msg++;
		int8_t cc=*msg-'0';

		if(cc>=0 && cc<=7)
 1d2:	88 30       	cpi	r24, 0x08	; 8
 1d4:	28 f4       	brcc	.+10     	; 0x1e0 <LCDWriteString+0x38>
			LCDData(cc);
		}
		else
		{
			LCDData('%');
			LCDData(*msg);
 1d6:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	}
	else
	{
		LCDData(*msg);
	}
	msg++;
 1da:	e8 01       	movw	r28, r16
 1dc:	21 96       	adiw	r28, 0x01	; 1
 1de:	e9 cf       	rjmp	.-46     	; 0x1b2 <LCDWriteString+0xa>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 1e0:	85 e2       	ldi	r24, 0x25	; 37
 1e2:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
			LCDData(*msg);
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	f5 cf       	rjmp	.-22     	; 0x1d6 <LCDWriteString+0x2e>
		}
	}
	else
	{
		LCDData(*msg);
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 1f2:	8e 01       	movw	r16, r28
 1f4:	f2 cf       	rjmp	.-28     	; 0x1da <LCDWriteString+0x32>

000001f6 <LCDWriteInt>:
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
{
 1f6:	ef 92       	push	r14
 1f8:	ff 92       	push	r15
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	00 d0       	rcall	.+0      	; 0x204 <LCDWriteInt+0xe>
 204:	00 d0       	rcall	.+0      	; 0x206 <LCDWriteInt+0x10>
 206:	1f 92       	push	r1
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	9b 01       	movw	r18, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 20e:	ae 01       	movw	r20, r28
 210:	4f 5f       	subi	r20, 0xFF	; 255
 212:	5f 4f       	sbci	r21, 0xFF	; 255
 214:	7a 01       	movw	r14, r20
 216:	45 e0       	ldi	r20, 0x05	; 5
 218:	f7 01       	movw	r30, r14
 21a:	11 92       	st	Z+, r1
 21c:	4a 95       	dec	r20
 21e:	e9 f7       	brne	.-6      	; 0x21a <LCDWriteInt+0x24>
 220:	fe 01       	movw	r30, r28
 222:	36 96       	adiw	r30, 0x06	; 6
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 224:	0a e0       	ldi	r16, 0x0A	; 10
 226:	10 e0       	ldi	r17, 0x00	; 0

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 228:	00 97       	sbiw	r24, 0x00	; 0
 22a:	f1 f4       	brne	.+60     	; 0x268 <LCDWriteInt+0x72>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 22c:	2f 3f       	cpi	r18, 0xFF	; 255
 22e:	ff ef       	ldi	r31, 0xFF	; 255
 230:	3f 07       	cpc	r19, r31
 232:	01 f5       	brne	.+64     	; 0x274 <LCDWriteInt+0x7e>
 234:	f7 01       	movw	r30, r14
 236:	8f 01       	movw	r16, r30
 238:	0e 19       	sub	r16, r14
 23a:	1f 09       	sbc	r17, r15
		while(str[j]==0) j++;
 23c:	81 91       	ld	r24, Z+
 23e:	88 23       	and	r24, r24
 240:	d1 f3       	breq	.-12     	; 0x236 <LCDWriteInt+0x40>
 242:	0e 0d       	add	r16, r14
 244:	1f 1d       	adc	r17, r15
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 246:	c8 01       	movw	r24, r16
 248:	8e 19       	sub	r24, r14
 24a:	9f 09       	sbc	r25, r15
 24c:	05 97       	sbiw	r24, 0x05	; 5
 24e:	bc f0       	brlt	.+46     	; 0x27e <LCDWriteInt+0x88>
	{
	LCDData(48+str[i]);
	}
}
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	1f 91       	pop	r17
 260:	0f 91       	pop	r16
 262:	ff 90       	pop	r15
 264:	ef 90       	pop	r14
 266:	08 95       	ret

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 268:	b8 01       	movw	r22, r16
 26a:	0e 94 a1 07 	call	0xf42	; 0xf42 <__divmodhi4>
 26e:	82 93       	st	-Z, r24
	val=val/10;
 270:	cb 01       	movw	r24, r22
 272:	da cf       	rjmp	.-76     	; 0x228 <LCDWriteInt+0x32>
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
	else
		j=5-field_length;
 274:	05 e0       	ldi	r16, 0x05	; 5
 276:	10 e0       	ldi	r17, 0x00	; 0
 278:	02 1b       	sub	r16, r18
 27a:	13 0b       	sbc	r17, r19
 27c:	e2 cf       	rjmp	.-60     	; 0x242 <LCDWriteInt+0x4c>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 27e:	f8 01       	movw	r30, r16
 280:	81 91       	ld	r24, Z+
 282:	8f 01       	movw	r16, r30
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	80 5d       	subi	r24, 0xD0	; 208
 288:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 28c:	dc cf       	rjmp	.-72     	; 0x246 <LCDWriteInt+0x50>

0000028e <LCDGotoXY>:
	}
}
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 28e:	84 31       	cpi	r24, 0x14	; 20
 290:	78 f4       	brcc	.+30     	; 0x2b0 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
 292:	62 30       	cpi	r22, 0x02	; 2
 294:	49 f0       	breq	.+18     	; 0x2a8 <LCDGotoXY+0x1a>
 296:	63 30       	cpi	r22, 0x03	; 3
 298:	49 f0       	breq	.+18     	; 0x2ac <LCDGotoXY+0x1e>
 29a:	61 30       	cpi	r22, 0x01	; 1
 29c:	09 f4       	brne	.+2      	; 0x2a0 <LCDGotoXY+0x12>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 29e:	80 64       	ori	r24, 0x40	; 64
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	80 68       	ori	r24, 0x80	; 128
 2a4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <LCDByte>
			break;
		case 1:
			x|=0b01000000;
			break;
		case 2:
			x+=0x14;
 2a8:	8c 5e       	subi	r24, 0xEC	; 236
 2aa:	fa cf       	rjmp	.-12     	; 0x2a0 <LCDGotoXY+0x12>
			break;
		case 3:
			x+=0x54;
 2ac:	8c 5a       	subi	r24, 0xAC	; 172
 2ae:	f8 cf       	rjmp	.-16     	; 0x2a0 <LCDGotoXY+0x12>
 2b0:	08 95       	ret

000002b2 <LCDHexDumpXY>:
}



void LCDHexDumpXY(uint8_t x, uint8_t y,uint8_t d)
{
 2b2:	cf 93       	push	r28
 2b4:	c4 2f       	mov	r28, r20
	LCDGotoXY(x,y);
 2b6:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
	uint8_t byte = '0';
	(((d>>4)&0x0F)<=9) ? (byte='0'+((d>>4)&0x0F)) : (byte='A'+ ((d>>4)&0x0F)-0x0A);
 2ba:	8c 2f       	mov	r24, r28
 2bc:	82 95       	swap	r24
 2be:	8f 70       	andi	r24, 0x0F	; 15
 2c0:	8a 30       	cpi	r24, 0x0A	; 10
 2c2:	88 f4       	brcc	.+34     	; 0x2e6 <LCDHexDumpXY+0x34>
 2c4:	80 5d       	subi	r24, 0xD0	; 208
	LCDByte(byte,1);
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	LCDBusyLoop();
 2cc:	0e 94 53 00 	call	0xa6	; 0xa6 <LCDBusyLoop>
 2d0:	8c 2f       	mov	r24, r28
 2d2:	8f 70       	andi	r24, 0x0F	; 15
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
 2d4:	8a 30       	cpi	r24, 0x0A	; 10
 2d6:	48 f4       	brcc	.+18     	; 0x2ea <LCDHexDumpXY+0x38>
 2d8:	80 5d       	subi	r24, 0xD0	; 208
	LCDByte(byte,1);
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	LCDBusyLoop();
}
 2e0:	cf 91       	pop	r28
	LCDByte(byte,1);
	LCDBusyLoop();
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
	LCDByte(byte,1);
	LCDBusyLoop();
 2e2:	0c 94 53 00 	jmp	0xa6	; 0xa6 <LCDBusyLoop>

void LCDHexDumpXY(uint8_t x, uint8_t y,uint8_t d)
{
	LCDGotoXY(x,y);
	uint8_t byte = '0';
	(((d>>4)&0x0F)<=9) ? (byte='0'+((d>>4)&0x0F)) : (byte='A'+ ((d>>4)&0x0F)-0x0A);
 2e6:	89 5c       	subi	r24, 0xC9	; 201
 2e8:	ee cf       	rjmp	.-36     	; 0x2c6 <LCDHexDumpXY+0x14>
	LCDByte(byte,1);
	LCDBusyLoop();
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
 2ea:	89 5c       	subi	r24, 0xC9	; 201
 2ec:	f6 cf       	rjmp	.-20     	; 0x2da <LCDHexDumpXY+0x28>

000002ee <validTag.part.0>:
        PORTC |= BV(ledG);
        _delay_ms(300);
        //PORTC ^= BV(ledG);
    }
    else if(state ==-1){
        PORTC |= BV(ledR);
 2ee:	41 9a       	sbi	0x08, 1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f0:	2f ef       	ldi	r18, 0xFF	; 255
 2f2:	82 e5       	ldi	r24, 0x52	; 82
 2f4:	97 e0       	ldi	r25, 0x07	; 7
 2f6:	21 50       	subi	r18, 0x01	; 1
 2f8:	80 40       	sbci	r24, 0x00	; 0
 2fa:	90 40       	sbci	r25, 0x00	; 0
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <validTag.part.0+0x8>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <validTag.part.0+0x12>
 300:	00 00       	nop
        _delay_ms(300);
        PORTC ^= BV(ledR);
 302:	88 b1       	in	r24, 0x08	; 8
 304:	92 e0       	ldi	r25, 0x02	; 2
 306:	89 27       	eor	r24, r25
 308:	88 b9       	out	0x08, r24	; 8
 30a:	08 95       	ret

0000030c <initServo>:
    //            //make A5 output.
    //            *ddr=BV(pin);      // PORTC declared as output 0xFF is all output 11111 so i have 8 bits i can set and 8 leds....
    //            *port=BV(pin);     // PORTC is initially LOW OFF the led initially /
    //to do make the register parameter work
    
    DDRC = BV(5);
 30c:	90 e2       	ldi	r25, 0x20	; 32
 30e:	97 b9       	out	0x07, r25	; 7
    //set to closed position
    PORTC = (BV(5));
 310:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 312:	ef ec       	ldi	r30, 0xCF	; 207
 314:	f7 e0       	ldi	r31, 0x07	; 7
 316:	31 97       	sbiw	r30, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <initServo+0xa>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <initServo+0x10>
 31c:	00 00       	nop
    _delay_us(1000);
    PORTC   ^=BV(5);
 31e:	88 b1       	in	r24, 0x08	; 8
 320:	89 27       	eor	r24, r25
 322:	88 b9       	out	0x08, r24	; 8
 324:	8f e6       	ldi	r24, 0x6F	; 111
 326:	94 e9       	ldi	r25, 0x94	; 148
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <initServo+0x1c>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <initServo+0x22>
 32e:	00 00       	nop
 330:	08 95       	ret

00000332 <initLED>:
    _delay_us(19000); //remember that total period is 2ms or 2k micros and you need to do it this way because of standard 50hz servo
    
}

void initLED(void){
    DDRC |= BV(ledG);
 332:	3a 9a       	sbi	0x07, 2	; 7
    DDRC |= BV(ledR); //output
 334:	39 9a       	sbi	0x07, 1	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 336:	2f ef       	ldi	r18, 0xFF	; 255
 338:	82 e5       	ldi	r24, 0x52	; 82
 33a:	97 e0       	ldi	r25, 0x07	; 7
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	80 40       	sbci	r24, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <initLED+0xa>
 344:	00 c0       	rjmp	.+0      	; 0x346 <initLED+0x14>
 346:	00 00       	nop
    
    _delay_ms(300);
    PORTC|= BV(ledG);
 348:	42 9a       	sbi	0x08, 2	; 8
 34a:	2f ef       	ldi	r18, 0xFF	; 255
 34c:	81 ee       	ldi	r24, 0xE1	; 225
 34e:	94 e0       	ldi	r25, 0x04	; 4
 350:	21 50       	subi	r18, 0x01	; 1
 352:	80 40       	sbci	r24, 0x00	; 0
 354:	90 40       	sbci	r25, 0x00	; 0
 356:	e1 f7       	brne	.-8      	; 0x350 <initLED+0x1e>
 358:	00 c0       	rjmp	.+0      	; 0x35a <initLED+0x28>
 35a:	00 00       	nop
    _delay_ms(200);
    PORTC ^= BV(ledG);
 35c:	88 b1       	in	r24, 0x08	; 8
 35e:	94 e0       	ldi	r25, 0x04	; 4
 360:	89 27       	eor	r24, r25
 362:	88 b9       	out	0x08, r24	; 8
 364:	2f ef       	ldi	r18, 0xFF	; 255
 366:	82 e5       	ldi	r24, 0x52	; 82
 368:	97 e0       	ldi	r25, 0x07	; 7
 36a:	21 50       	subi	r18, 0x01	; 1
 36c:	80 40       	sbci	r24, 0x00	; 0
 36e:	90 40       	sbci	r25, 0x00	; 0
 370:	e1 f7       	brne	.-8      	; 0x36a <initLED+0x38>
 372:	00 c0       	rjmp	.+0      	; 0x374 <initLED+0x42>
 374:	00 00       	nop
    
    _delay_ms(300);
    PORTC |= BV(ledR);     _delay_ms(200);
 376:	41 9a       	sbi	0x08, 1	; 8
 378:	2f ef       	ldi	r18, 0xFF	; 255
 37a:	81 ee       	ldi	r24, 0xE1	; 225
 37c:	94 e0       	ldi	r25, 0x04	; 4
 37e:	21 50       	subi	r18, 0x01	; 1
 380:	80 40       	sbci	r24, 0x00	; 0
 382:	90 40       	sbci	r25, 0x00	; 0
 384:	e1 f7       	brne	.-8      	; 0x37e <initLED+0x4c>
 386:	00 c0       	rjmp	.+0      	; 0x388 <initLED+0x56>
 388:	00 00       	nop
    PORTC ^= BV(ledR);
 38a:	88 b1       	in	r24, 0x08	; 8
 38c:	92 e0       	ldi	r25, 0x02	; 2
 38e:	89 27       	eor	r24, r25
 390:	88 b9       	out	0x08, r24	; 8
 392:	08 95       	ret

00000394 <addQ>:
    
    
}

int addQ(int str[], int ADD[]){
 394:	dc 01       	movw	r26, r24
 396:	12 96       	adiw	r26, 0x02	; 2
 398:	fb 01       	movw	r30, r22
 39a:	32 96       	adiw	r30, 0x02	; 2
 39c:	0c 96       	adiw	r24, 0x0c	; 12
    for(int i=1; i<=5; i++){
        if(str[i] != ADD[i])
 39e:	4d 91       	ld	r20, X+
 3a0:	5d 91       	ld	r21, X+
 3a2:	21 91       	ld	r18, Z+
 3a4:	31 91       	ld	r19, Z+
 3a6:	42 17       	cp	r20, r18
 3a8:	53 07       	cpc	r21, r19
 3aa:	31 f4       	brne	.+12     	; 0x3b8 <addQ+0x24>
    
    
}

int addQ(int str[], int ADD[]){
    for(int i=1; i<=5; i++){
 3ac:	a8 17       	cp	r26, r24
 3ae:	b9 07       	cpc	r27, r25
 3b0:	b1 f7       	brne	.-20     	; 0x39e <addQ+0xa>
        if(str[i] != ADD[i])
            return -1;
    }
    return 0;
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	08 95       	ret
}

int addQ(int str[], int ADD[]){
    for(int i=1; i<=5; i++){
        if(str[i] != ADD[i])
            return -1;
 3b8:	8f ef       	ldi	r24, 0xFF	; 255
 3ba:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return 0;
}
 3bc:	08 95       	ret

000003be <addTag>:
unsigned int EEMEM tag[5]= {0,0,0,0,0};
//unsigned int EEMEM tag2[5]= {0,0,0,0,0};
unsigned int ram_tag[5]; //this is where we write the read tag to the stack will be str[] array.

//to do int tagNumber)
void addTag(int str[], int tagNumber){
 3be:	df 92       	push	r13
 3c0:	ef 92       	push	r14
 3c2:	ff 92       	push	r15
 3c4:	0f 93       	push	r16
 3c6:	1f 93       	push	r17
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
    if(tagNumber ==1){
 3cc:	61 30       	cpi	r22, 0x01	; 1
 3ce:	71 05       	cpc	r23, r1
 3d0:	51 f5       	brne	.+84     	; 0x426 <addTag+0x68>
 3d2:	8c 01       	movw	r16, r24
 3d4:	0e 5f       	subi	r16, 0xFE	; 254
 3d6:	1f 4f       	sbci	r17, 0xFF	; 255
 3d8:	38 e0       	ldi	r19, 0x08	; 8
 3da:	e3 2e       	mov	r14, r19
 3dc:	32 e0       	ldi	r19, 0x02	; 2
 3de:	f3 2e       	mov	r15, r19
 3e0:	ec 01       	movw	r28, r24
 3e2:	2c 96       	adiw	r28, 0x0c	; 12
        for(int i=1; i<=5; i++){
            write_eeprom_word(tag1[i], str[i]);
            PORTC = BV(ledG);
 3e4:	44 e0       	ldi	r20, 0x04	; 4
 3e6:	d4 2e       	mov	r13, r20

//to do int tagNumber)
void addTag(int str[], int tagNumber){
    if(tagNumber ==1){
        for(int i=1; i<=5; i++){
            write_eeprom_word(tag1[i], str[i]);
 3e8:	f8 01       	movw	r30, r16
 3ea:	61 91       	ld	r22, Z+
 3ec:	71 91       	ld	r23, Z+
 3ee:	8f 01       	movw	r16, r30
 3f0:	f7 01       	movw	r30, r14
 3f2:	81 91       	ld	r24, Z+
 3f4:	7f 01       	movw	r14, r30
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 cf 07 	call	0xf9e	; 0xf9e <eeprom_write_word>
            PORTC = BV(ledG);
 3fc:	d8 b8       	out	0x08, r13	; 8
 3fe:	ff ef       	ldi	r31, 0xFF	; 255
 400:	20 e7       	ldi	r18, 0x70	; 112
 402:	82 e0       	ldi	r24, 0x02	; 2
 404:	f1 50       	subi	r31, 0x01	; 1
 406:	20 40       	sbci	r18, 0x00	; 0
 408:	80 40       	sbci	r24, 0x00	; 0
 40a:	e1 f7       	brne	.-8      	; 0x404 <addTag+0x46>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <addTag+0x50>
 40e:	00 00       	nop
unsigned int ram_tag[5]; //this is where we write the read tag to the stack will be str[] array.

//to do int tagNumber)
void addTag(int str[], int tagNumber){
    if(tagNumber ==1){
        for(int i=1; i<=5; i++){
 410:	c0 17       	cp	r28, r16
 412:	d1 07       	cpc	r29, r17
 414:	49 f7       	brne	.-46     	; 0x3e8 <addTag+0x2a>
        for(int i=1; i<=5; i++){
            write_eeprom_word(tag2[i], str[i]);
        }
        tagNumber++; //incriment so we can keep track if we have room or not
    }
}
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	1f 91       	pop	r17
 41c:	0f 91       	pop	r16
 41e:	ff 90       	pop	r15
 420:	ef 90       	pop	r14
 422:	df 90       	pop	r13
 424:	08 95       	ret
            PORTC = BV(ledG);
            _delay_ms(100);
        }
        tagNumber++;
    }
    else if(tagNumber ==2){
 426:	62 30       	cpi	r22, 0x02	; 2
 428:	71 05       	cpc	r23, r1
 42a:	a9 f7       	brne	.-22     	; 0x416 <addTag+0x58>
 42c:	8c 01       	movw	r16, r24
 42e:	0e 5f       	subi	r16, 0xFE	; 254
 430:	1f 4f       	sbci	r17, 0xFF	; 255
 432:	22 e1       	ldi	r18, 0x12	; 18
 434:	e2 2e       	mov	r14, r18
 436:	22 e0       	ldi	r18, 0x02	; 2
 438:	f2 2e       	mov	r15, r18
 43a:	ec 01       	movw	r28, r24
 43c:	2c 96       	adiw	r28, 0x0c	; 12
        for(int i=1; i<=5; i++){
            write_eeprom_word(tag2[i], str[i]);
 43e:	f8 01       	movw	r30, r16
 440:	61 91       	ld	r22, Z+
 442:	71 91       	ld	r23, Z+
 444:	8f 01       	movw	r16, r30
 446:	f7 01       	movw	r30, r14
 448:	81 91       	ld	r24, Z+
 44a:	7f 01       	movw	r14, r30
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <eeprom_write_word>
            _delay_ms(100);
        }
        tagNumber++;
    }
    else if(tagNumber ==2){
        for(int i=1; i<=5; i++){
 452:	0c 17       	cp	r16, r28
 454:	1d 07       	cpc	r17, r29
 456:	99 f7       	brne	.-26     	; 0x43e <addTag+0x80>
 458:	de cf       	rjmp	.-68     	; 0x416 <addTag+0x58>

0000045a <validTag>:
 
 }
 */

void validTag(int state ){
    if(state == 1){
 45a:	81 30       	cpi	r24, 0x01	; 1
 45c:	91 05       	cpc	r25, r1
 45e:	59 f4       	brne	.+22     	; 0x476 <validTag+0x1c>
        PORTC |= BV(ledG);
 460:	42 9a       	sbi	0x08, 2	; 8
 462:	2f ef       	ldi	r18, 0xFF	; 255
 464:	82 e5       	ldi	r24, 0x52	; 82
 466:	97 e0       	ldi	r25, 0x07	; 7
 468:	21 50       	subi	r18, 0x01	; 1
 46a:	80 40       	sbci	r24, 0x00	; 0
 46c:	90 40       	sbci	r25, 0x00	; 0
 46e:	e1 f7       	brne	.-8      	; 0x468 <validTag+0xe>
 470:	00 c0       	rjmp	.+0      	; 0x472 <validTag+0x18>
 472:	00 00       	nop
 474:	08 95       	ret
        _delay_ms(300);
        //PORTC ^= BV(ledG);
    }
    else if(state ==-1){
 476:	01 96       	adiw	r24, 0x01	; 1
 478:	11 f4       	brne	.+4      	; 0x47e <validTag+0x24>
 47a:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <validTag.part.0>
        _delay_ms(300);
        PORTC ^= BV(ledR);
    }
    else
    {
        PORTC &= ~BV(ledG);
 47e:	42 98       	cbi	0x08, 2	; 8
 480:	08 95       	ret

00000482 <open>:
}

int open(void){
    
  //  validTag(1);
    PORTC = (BV(5));
 482:	90 e2       	ldi	r25, 0x20	; 32
 484:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 486:	ef e9       	ldi	r30, 0x9F	; 159
 488:	ff e0       	ldi	r31, 0x0F	; 15
 48a:	31 97       	sbiw	r30, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <open+0x8>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <open+0xe>
 490:	00 00       	nop
    _delay_us(2000);
    PORTC  ^=BV(5);
 492:	88 b1       	in	r24, 0x08	; 8
 494:	89 27       	eor	r24, r25
 496:	88 b9       	out	0x08, r24	; 8
 498:	8f e9       	ldi	r24, 0x9F	; 159
 49a:	9c e8       	ldi	r25, 0x8C	; 140
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <open+0x1a>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <open+0x20>
 4a2:	00 00       	nop
    _delay_us(18000);
    
    return 1;
}
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	08 95       	ret

000004aa <close>:

int close(void){
    //ToDo: need to update this
    //close sequence
    PORTC = (BV(5));
 4aa:	90 e2       	ldi	r25, 0x20	; 32
 4ac:	98 b9       	out	0x08, r25	; 8
 4ae:	ef ec       	ldi	r30, 0xCF	; 207
 4b0:	f7 e0       	ldi	r31, 0x07	; 7
 4b2:	31 97       	sbiw	r30, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <close+0x8>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <close+0xe>
 4b8:	00 00       	nop
    _delay_us(1000);
    PORTC   ^=BV(5);
 4ba:	88 b1       	in	r24, 0x08	; 8
 4bc:	89 27       	eor	r24, r25
 4be:	88 b9       	out	0x08, r24	; 8
 4c0:	8f e6       	ldi	r24, 0x6F	; 111
 4c2:	94 e9       	ldi	r25, 0x94	; 148
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <close+0x1a>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <close+0x20>
 4ca:	00 00       	nop
    _delay_us(19000);
    validTag(0);
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0e 94 2d 02 	call	0x45a	; 0x45a <validTag>

    return 1;
}
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	08 95       	ret

000004da <initButton>:


void initButton(void){
    // uint8_t button = 3;
    //uint8_t ledG = 2;
    DDRC ^= BV(button); //set as input
 4da:	97 b1       	in	r25, 0x07	; 7
 4dc:	21 e0       	ldi	r18, 0x01	; 1
 4de:	92 27       	eor	r25, r18
 4e0:	97 b9       	out	0x07, r25	; 7
    DDRC |= BV(ledG); //set output
 4e2:	3a 9a       	sbi	0x07, 2	; 7
    
    PORTC ^= BV(button); // set low
 4e4:	88 b1       	in	r24, 0x08	; 8
 4e6:	82 27       	eor	r24, r18
 4e8:	88 b9       	out	0x08, r24	; 8
 4ea:	08 95       	ret

000004ec <buttonRead>:
}

int buttonRead(void){
    if(bit_is_clear(PINC, button)){
 4ec:	30 99       	sbic	0x06, 0	; 6
 4ee:	2e c0       	rjmp	.+92     	; 0x54c <buttonRead+0x60>
        LCDClear();
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4f8:	2f ef       	ldi	r18, 0xFF	; 255
 4fa:	89 ef       	ldi	r24, 0xF9	; 249
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	21 50       	subi	r18, 0x01	; 1
 500:	80 40       	sbci	r24, 0x00	; 0
 502:	90 40       	sbci	r25, 0x00	; 0
 504:	e1 f7       	brne	.-8      	; 0x4fe <buttonRead+0x12>
 506:	00 c0       	rjmp	.+0      	; 0x508 <buttonRead+0x1c>
 508:	00 00       	nop
        _delay_ms(40);
        LCDWriteString("button press");
 50a:	8a e1       	ldi	r24, 0x1A	; 26
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
        open();
 512:	0e 94 41 02 	call	0x482	; 0x482 <open>
 516:	2f ef       	ldi	r18, 0xFF	; 255
 518:	84 e3       	ldi	r24, 0x34	; 52
 51a:	9c e0       	ldi	r25, 0x0C	; 12
 51c:	21 50       	subi	r18, 0x01	; 1
 51e:	80 40       	sbci	r24, 0x00	; 0
 520:	90 40       	sbci	r25, 0x00	; 0
 522:	e1 f7       	brne	.-8      	; 0x51c <buttonRead+0x30>
 524:	00 c0       	rjmp	.+0      	; 0x526 <buttonRead+0x3a>
 526:	00 00       	nop
        _delay_ms(500);
        close();
 528:	0e 94 55 02 	call	0x4aa	; 0x4aa <close>
 52c:	2f ef       	ldi	r18, 0xFF	; 255
 52e:	89 e6       	ldi	r24, 0x69	; 105
 530:	98 e1       	ldi	r25, 0x18	; 24
 532:	21 50       	subi	r18, 0x01	; 1
 534:	80 40       	sbci	r24, 0x00	; 0
 536:	90 40       	sbci	r25, 0x00	; 0
 538:	e1 f7       	brne	.-8      	; 0x532 <buttonRead+0x46>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <buttonRead+0x50>
 53c:	00 00       	nop
        _delay_ms(1000);
        LCDClear();
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	08 95       	ret
        return 1;
    }
    return 0;
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	90 e0       	ldi	r25, 0x00	; 0
}
 550:	08 95       	ret

00000552 <loadTags>:

void loadTags(void){
 552:	cf 92       	push	r12
 554:	df 92       	push	r13
 556:	ef 92       	push	r14
 558:	ff 92       	push	r15
 55a:	0f 93       	push	r16
 55c:	1f 93       	push	r17
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
 562:	c7 e0       	ldi	r28, 0x07	; 7
 564:	d2 e0       	ldi	r29, 0x02	; 2
 566:	82 e0       	ldi	r24, 0x02	; 2
 568:	c8 2e       	mov	r12, r24
 56a:	82 e0       	ldi	r24, 0x02	; 2
 56c:	d8 2e       	mov	r13, r24
 56e:	91 e1       	ldi	r25, 0x11	; 17
 570:	e9 2e       	mov	r14, r25
 572:	92 e0       	ldi	r25, 0x02	; 2
 574:	f9 2e       	mov	r15, r25
 576:	06 e1       	ldi	r16, 0x16	; 22
 578:	12 e0       	ldi	r17, 0x02	; 2
    for(int i=0; i<5; i++){
        ram_tag1[i] = read_eeprom_word(tag1[i]);
 57a:	89 91       	ld	r24, Y+
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 c9 07 	call	0xf92	; 0xf92 <eeprom_read_word>
 582:	f6 01       	movw	r30, r12
 584:	81 93       	st	Z+, r24
 586:	6f 01       	movw	r12, r30
        ram_tag2[i] = read_eeprom_word(tag2[i]);
 588:	f7 01       	movw	r30, r14
 58a:	81 91       	ld	r24, Z+
 58c:	7f 01       	movw	r14, r30
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	0e 94 c9 07 	call	0xf92	; 0xf92 <eeprom_read_word>
 594:	f8 01       	movw	r30, r16
 596:	81 93       	st	Z+, r24
 598:	8f 01       	movw	r16, r30
    }
    return 0;
}

void loadTags(void){
    for(int i=0; i<5; i++){
 59a:	f2 e0       	ldi	r31, 0x02	; 2
 59c:	cc 30       	cpi	r28, 0x0C	; 12
 59e:	df 07       	cpc	r29, r31
 5a0:	61 f7       	brne	.-40     	; 0x57a <loadTags+0x28>
        ram_tag1[i] = read_eeprom_word(tag1[i]);
        ram_tag2[i] = read_eeprom_word(tag2[i]);
    }
}
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	1f 91       	pop	r17
 5a8:	0f 91       	pop	r16
 5aa:	ff 90       	pop	r15
 5ac:	ef 90       	pop	r14
 5ae:	df 90       	pop	r13
 5b0:	cf 90       	pop	r12
 5b2:	08 95       	ret

000005b4 <mfrc522_write>:
		mfrc522_write(TxControlReg,byte|0x03);
	}
}

void mfrc522_write(uint8_t reg, uint8_t data)
{
 5b4:	cf 93       	push	r28
 5b6:	c6 2f       	mov	r28, r22
	ENABLE_CHIP();
 5b8:	2a 98       	cbi	0x05, 2	; 5
	spi_transmit((reg<<1)&0x7E);
 5ba:	88 0f       	add	r24, r24
 5bc:	8e 77       	andi	r24, 0x7E	; 126
 5be:	0e 94 78 04 	call	0x8f0	; 0x8f0 <spi_transmit>
	spi_transmit(data);
 5c2:	8c 2f       	mov	r24, r28
 5c4:	0e 94 78 04 	call	0x8f0	; 0x8f0 <spi_transmit>
	DISABLE_CHIP();
 5c8:	2a 9a       	sbi	0x05, 2	; 5
}
 5ca:	cf 91       	pop	r28
 5cc:	08 95       	ret

000005ce <mfrc522_read>:

uint8_t mfrc522_read(uint8_t reg)
{
	uint8_t data;	
	ENABLE_CHIP();
 5ce:	2a 98       	cbi	0x05, 2	; 5
	spi_transmit(((reg<<1)&0x7E)|0x80);
 5d0:	88 0f       	add	r24, r24
 5d2:	8e 77       	andi	r24, 0x7E	; 126
 5d4:	80 68       	ori	r24, 0x80	; 128
 5d6:	0e 94 78 04 	call	0x8f0	; 0x8f0 <spi_transmit>
	data = spi_transmit(0x00);
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	0e 94 78 04 	call	0x8f0	; 0x8f0 <spi_transmit>
	DISABLE_CHIP();
 5e0:	2a 9a       	sbi	0x05, 2	; 5
	return data;
}
 5e2:	08 95       	ret

000005e4 <mfrc522_reset>:

void mfrc522_reset()
{
	mfrc522_write(CommandReg,SoftReset_CMD);
 5e4:	6f e0       	ldi	r22, 0x0F	; 15
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <mfrc522_write>

000005ec <mfrc522_init>:
#endif

void mfrc522_init()
{
	uint8_t byte;
	mfrc522_reset();
 5ec:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <mfrc522_reset>
	
	mfrc522_write(TModeReg, 0x8D);
 5f0:	6d e8       	ldi	r22, 0x8D	; 141
 5f2:	8a e2       	ldi	r24, 0x2A	; 42
 5f4:	0e 94 da 02 	call	0x5b4	; 0x5b4 <mfrc522_write>
    mfrc522_write(TPrescalerReg, 0x3E);
 5f8:	6e e3       	ldi	r22, 0x3E	; 62
 5fa:	8b e2       	ldi	r24, 0x2B	; 43
 5fc:	0e 94 da 02 	call	0x5b4	; 0x5b4 <mfrc522_write>
    mfrc522_write(TReloadReg_1, 30);   
 600:	6e e1       	ldi	r22, 0x1E	; 30
 602:	8c e2       	ldi	r24, 0x2C	; 44
 604:	0e 94 da 02 	call	0x5b4	; 0x5b4 <mfrc522_write>
    mfrc522_write(TReloadReg_2, 0);	
 608:	60 e0       	ldi	r22, 0x00	; 0
 60a:	8d e2       	ldi	r24, 0x2D	; 45
 60c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <mfrc522_write>
	mfrc522_write(TxASKReg, 0x40);	
 610:	60 e4       	ldi	r22, 0x40	; 64
 612:	85 e1       	ldi	r24, 0x15	; 21
 614:	0e 94 da 02 	call	0x5b4	; 0x5b4 <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D);
 618:	6d e3       	ldi	r22, 0x3D	; 61
 61a:	81 e1       	ldi	r24, 0x11	; 17
 61c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <mfrc522_write>
	
	byte = mfrc522_read(TxControlReg);
 620:	84 e1       	ldi	r24, 0x14	; 20
 622:	0e 94 e7 02 	call	0x5ce	; 0x5ce <mfrc522_read>
	if(!(byte&0x03))
 626:	98 2f       	mov	r25, r24
 628:	93 70       	andi	r25, 0x03	; 3
 62a:	29 f4       	brne	.+10     	; 0x636 <mfrc522_init+0x4a>
	{
		mfrc522_write(TxControlReg,byte|0x03);
 62c:	68 2f       	mov	r22, r24
 62e:	63 60       	ori	r22, 0x03	; 3
 630:	84 e1       	ldi	r24, 0x14	; 20
 632:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <mfrc522_write>
 636:	08 95       	ret

00000638 <mfrc522_to_card>:
   
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
 638:	3f 92       	push	r3
 63a:	4f 92       	push	r4
 63c:	5f 92       	push	r5
 63e:	6f 92       	push	r6
 640:	7f 92       	push	r7
 642:	8f 92       	push	r8
 644:	9f 92       	push	r9
 646:	af 92       	push	r10
 648:	bf 92       	push	r11
 64a:	cf 92       	push	r12
 64c:	df 92       	push	r13
 64e:	ef 92       	push	r14
 650:	ff 92       	push	r15
 652:	0f 93       	push	r16
 654:	1f 93       	push	r17
 656:	cf 93       	push	r28
 658:	df 93       	push	r29
 65a:	d8 2e       	mov	r13, r24
 65c:	5b 01       	movw	r10, r22
 65e:	84 2e       	mov	r8, r20
 660:	79 01       	movw	r14, r18
 662:	e8 01       	movw	r28, r16
    uint8_t lastBits;
    uint8_t n;
    uint8_t	tmp;
    uint32_t i;

    switch (cmd)
 664:	8c e0       	ldi	r24, 0x0C	; 12
 666:	d8 16       	cp	r13, r24
 668:	09 f4       	brne	.+2      	; 0x66c <mfrc522_to_card+0x34>
 66a:	6b c0       	rjmp	.+214    	; 0x742 <mfrc522_to_card+0x10a>
 66c:	ee e0       	ldi	r30, 0x0E	; 14
 66e:	de 16       	cp	r13, r30
 670:	09 f4       	brne	.+2      	; 0x674 <mfrc522_to_card+0x3c>
 672:	6c c0       	rjmp	.+216    	; 0x74c <mfrc522_to_card+0x114>

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
 674:	31 2c       	mov	r3, r1
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
 676:	c1 2c       	mov	r12, r1
		default:
			break;
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
 678:	84 e0       	ldi	r24, 0x04	; 4
 67a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <mfrc522_read>
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
 67e:	68 2f       	mov	r22, r24
 680:	6f 77       	andi	r22, 0x7F	; 127
 682:	84 e0       	ldi	r24, 0x04	; 4
 684:	0e 94 da 02 	call	0x5b4	; 0x5b4 <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
 688:	8a e0       	ldi	r24, 0x0A	; 10
 68a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <mfrc522_read>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
 68e:	68 2f       	mov	r22, r24
 690:	60 68       	ori	r22, 0x80	; 128
 692:	8a e0       	ldi	r24, 0x0A	; 10
 694:	0e 94 da 02 	call	0x5b4	; 0x5b4 <mfrc522_write>
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
 698:	60 e0       	ldi	r22, 0x00	; 0
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <mfrc522_write>
 6a0:	85 01       	movw	r16, r10

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 6a2:	41 2c       	mov	r4, r1
 6a4:	51 2c       	mov	r5, r1
 6a6:	32 01       	movw	r6, r4
 6a8:	91 2c       	mov	r9, r1
 6aa:	a1 2c       	mov	r10, r1
 6ac:	b1 2c       	mov	r11, r1
 6ae:	48 14       	cp	r4, r8
 6b0:	59 04       	cpc	r5, r9
 6b2:	6a 04       	cpc	r6, r10
 6b4:	7b 04       	cpc	r7, r11
 6b6:	08 f4       	brcc	.+2      	; 0x6ba <mfrc522_to_card+0x82>
 6b8:	4e c0       	rjmp	.+156    	; 0x756 <mfrc522_to_card+0x11e>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
 6ba:	6d 2d       	mov	r22, r13
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	0e 94 da 02 	call	0x5b4	; 0x5b4 <mfrc522_write>
    if (cmd == Transceive_CMD)
 6c2:	8c e0       	ldi	r24, 0x0C	; 12
 6c4:	d8 12       	cpse	r13, r24
 6c6:	08 c0       	rjmp	.+16     	; 0x6d8 <mfrc522_to_card+0xa0>
    {    
		n=mfrc522_read(BitFramingReg);
 6c8:	8d e0       	ldi	r24, 0x0D	; 13
 6ca:	0e 94 e7 02 	call	0x5ce	; 0x5ce <mfrc522_read>
		mfrc522_write(BitFramingReg,n|0x80);  
 6ce:	68 2f       	mov	r22, r24
 6d0:	60 68       	ori	r22, 0x80	; 128
 6d2:	8d e0       	ldi	r24, 0x0D	; 13
 6d4:	0e 94 da 02 	call	0x5b4	; 0x5b4 <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 6d8:	40 ed       	ldi	r20, 0xD0	; 208
 6da:	84 2e       	mov	r8, r20
 6dc:	47 e0       	ldi	r20, 0x07	; 7
 6de:	94 2e       	mov	r9, r20
 6e0:	a1 2c       	mov	r10, r1
 6e2:	b1 2c       	mov	r11, r1
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
        i--;
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 6e4:	13 2d       	mov	r17, r3
 6e6:	11 60       	ori	r17, 0x01	; 1
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
 6e8:	84 e0       	ldi	r24, 0x04	; 4
 6ea:	0e 94 e7 02 	call	0x5ce	; 0x5ce <mfrc522_read>
 6ee:	08 2f       	mov	r16, r24
        i--;
 6f0:	e1 e0       	ldi	r30, 0x01	; 1
 6f2:	8e 1a       	sub	r8, r30
 6f4:	91 08       	sbc	r9, r1
 6f6:	a1 08       	sbc	r10, r1
 6f8:	b1 08       	sbc	r11, r1
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 6fa:	19 f0       	breq	.+6      	; 0x702 <mfrc522_to_card+0xca>
 6fc:	81 2f       	mov	r24, r17
 6fe:	80 23       	and	r24, r16
 700:	99 f3       	breq	.-26     	; 0x6e8 <mfrc522_to_card+0xb0>

	tmp=mfrc522_read(BitFramingReg);
 702:	8d e0       	ldi	r24, 0x0D	; 13
 704:	0e 94 e7 02 	call	0x5ce	; 0x5ce <mfrc522_read>
	mfrc522_write(BitFramingReg,tmp&(~0x80));
 708:	68 2f       	mov	r22, r24
 70a:	6f 77       	andi	r22, 0x7F	; 127
 70c:	8d e0       	ldi	r24, 0x0D	; 13
 70e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <mfrc522_write>
	
    if (i != 0)
 712:	89 28       	or	r8, r9
 714:	8a 28       	or	r8, r10
 716:	8b 28       	or	r8, r11
 718:	51 f5       	brne	.+84     	; 0x76e <mfrc522_to_card+0x136>
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
 71a:	03 e0       	ldi	r16, 0x03	; 3
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //mfrc522_write(cmdReg, PCD_IDLE); 

    return status;
}
 71c:	80 2f       	mov	r24, r16
 71e:	df 91       	pop	r29
 720:	cf 91       	pop	r28
 722:	1f 91       	pop	r17
 724:	0f 91       	pop	r16
 726:	ff 90       	pop	r15
 728:	ef 90       	pop	r14
 72a:	df 90       	pop	r13
 72c:	cf 90       	pop	r12
 72e:	bf 90       	pop	r11
 730:	af 90       	pop	r10
 732:	9f 90       	pop	r9
 734:	8f 90       	pop	r8
 736:	7f 90       	pop	r7
 738:	6f 90       	pop	r6
 73a:	5f 90       	pop	r5
 73c:	4f 90       	pop	r4
 73e:	3f 90       	pop	r3
 740:	08 95       	ret
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
 742:	70 e3       	ldi	r23, 0x30	; 48
 744:	37 2e       	mov	r3, r23
			waitIRq = 0x10;
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
 746:	e7 e7       	ldi	r30, 0x77	; 119
 748:	ce 2e       	mov	r12, r30
			waitIRq = 0x30;
			break;
 74a:	96 cf       	rjmp	.-212    	; 0x678 <mfrc522_to_card+0x40>
    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
 74c:	50 e1       	ldi	r21, 0x10	; 16
 74e:	35 2e       	mov	r3, r21

    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
 750:	62 e1       	ldi	r22, 0x12	; 18
 752:	c6 2e       	mov	r12, r22
 754:	91 cf       	rjmp	.-222    	; 0x678 <mfrc522_to_card+0x40>
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
 756:	f8 01       	movw	r30, r16
 758:	61 91       	ld	r22, Z+
 75a:	8f 01       	movw	r16, r30
 75c:	89 e0       	ldi	r24, 0x09	; 9
 75e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 762:	ff ef       	ldi	r31, 0xFF	; 255
 764:	4f 1a       	sub	r4, r31
 766:	5f 0a       	sbc	r5, r31
 768:	6f 0a       	sbc	r6, r31
 76a:	7f 0a       	sbc	r7, r31
 76c:	a0 cf       	rjmp	.-192    	; 0x6ae <mfrc522_to_card+0x76>
	tmp=mfrc522_read(BitFramingReg);
	mfrc522_write(BitFramingReg,tmp&(~0x80));
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 76e:	86 e0       	ldi	r24, 0x06	; 6
 770:	0e 94 e7 02 	call	0x5ce	; 0x5ce <mfrc522_read>
 774:	8b 71       	andi	r24, 0x1B	; 27
 776:	89 f6       	brne	.-94     	; 0x71a <mfrc522_to_card+0xe2>
        {
            status = CARD_FOUND;
            if (n & irqEn & 0x01)
 778:	fc 2d       	mov	r31, r12
 77a:	f1 70       	andi	r31, 0x01	; 1
 77c:	cf 2e       	mov	r12, r31
 77e:	c0 22       	and	r12, r16
 780:	e9 f1       	breq	.+122    	; 0x7fc <mfrc522_to_card+0x1c4>
            {   
				status = CARD_NOT_FOUND;			//??   
 782:	02 e0       	ldi	r16, 0x02	; 2
			}

            if (cmd == Transceive_CMD)
 784:	8c e0       	ldi	r24, 0x0C	; 12
 786:	d8 12       	cpse	r13, r24
 788:	c9 cf       	rjmp	.-110    	; 0x71c <mfrc522_to_card+0xe4>
            {
               	n = mfrc522_read(FIFOLevelReg);
 78a:	8a e0       	ldi	r24, 0x0A	; 10
 78c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <mfrc522_read>
 790:	18 2f       	mov	r17, r24
              	lastBits = mfrc522_read(ControlReg) & 0x07;
 792:	8c e0       	ldi	r24, 0x0C	; 12
 794:	0e 94 e7 02 	call	0x5ce	; 0x5ce <mfrc522_read>
 798:	28 2f       	mov	r18, r24
 79a:	27 70       	andi	r18, 0x07	; 7
 79c:	81 2f       	mov	r24, r17
 79e:	90 e0       	ldi	r25, 0x00	; 0
                if (lastBits)
 7a0:	79 f1       	breq	.+94     	; 0x800 <mfrc522_to_card+0x1c8>
                {   
					*back_data_len = (n-1)*8 + lastBits;   
 7a2:	01 97       	sbiw	r24, 0x01	; 1
 7a4:	33 e0       	ldi	r19, 0x03	; 3
 7a6:	88 0f       	add	r24, r24
 7a8:	99 1f       	adc	r25, r25
 7aa:	3a 95       	dec	r19
 7ac:	e1 f7       	brne	.-8      	; 0x7a6 <mfrc522_to_card+0x16e>
 7ae:	82 0f       	add	r24, r18
 7b0:	91 1d       	adc	r25, r1
				}
                else
                {   
					*back_data_len = n*8;   
 7b2:	09 2e       	mov	r0, r25
 7b4:	00 0c       	add	r0, r0
 7b6:	aa 0b       	sbc	r26, r26
 7b8:	bb 0b       	sbc	r27, r27
 7ba:	88 83       	st	Y, r24
 7bc:	99 83       	std	Y+1, r25	; 0x01
 7be:	aa 83       	std	Y+2, r26	; 0x02
 7c0:	bb 83       	std	Y+3, r27	; 0x03
				}

                if (n == 0)
 7c2:	11 23       	and	r17, r17
 7c4:	19 f1       	breq	.+70     	; 0x80c <mfrc522_to_card+0x1d4>
 7c6:	11 31       	cpi	r17, 0x11	; 17
 7c8:	08 f0       	brcs	.+2      	; 0x7cc <mfrc522_to_card+0x194>
 7ca:	10 e1       	ldi	r17, 0x10	; 16
 7cc:	e7 01       	movw	r28, r14
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 7ce:	81 2c       	mov	r8, r1
 7d0:	91 2c       	mov	r9, r1
 7d2:	54 01       	movw	r10, r8
 7d4:	c1 2e       	mov	r12, r17
 7d6:	d1 2c       	mov	r13, r1
 7d8:	e1 2c       	mov	r14, r1
 7da:	f1 2c       	mov	r15, r1
 7dc:	8c 14       	cp	r8, r12
 7de:	9d 04       	cpc	r9, r13
 7e0:	ae 04       	cpc	r10, r14
 7e2:	bf 04       	cpc	r11, r15
 7e4:	08 f0       	brcs	.+2      	; 0x7e8 <mfrc522_to_card+0x1b0>
 7e6:	9a cf       	rjmp	.-204    	; 0x71c <mfrc522_to_card+0xe4>
                {   
					back_data[i] = mfrc522_read(FIFODataReg);    
 7e8:	89 e0       	ldi	r24, 0x09	; 9
 7ea:	0e 94 e7 02 	call	0x5ce	; 0x5ce <mfrc522_read>
 7ee:	89 93       	st	Y+, r24
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 7f0:	ef ef       	ldi	r30, 0xFF	; 255
 7f2:	8e 1a       	sub	r8, r30
 7f4:	9e 0a       	sbc	r9, r30
 7f6:	ae 0a       	sbc	r10, r30
 7f8:	be 0a       	sbc	r11, r30
 7fa:	f0 cf       	rjmp	.-32     	; 0x7dc <mfrc522_to_card+0x1a4>
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
 7fc:	01 e0       	ldi	r16, 0x01	; 1
 7fe:	c2 cf       	rjmp	.-124    	; 0x784 <mfrc522_to_card+0x14c>
                {   
					*back_data_len = (n-1)*8 + lastBits;   
				}
                else
                {   
					*back_data_len = n*8;   
 800:	23 e0       	ldi	r18, 0x03	; 3
 802:	88 0f       	add	r24, r24
 804:	99 1f       	adc	r25, r25
 806:	2a 95       	dec	r18
 808:	e1 f7       	brne	.-8      	; 0x802 <mfrc522_to_card+0x1ca>
 80a:	d3 cf       	rjmp	.-90     	; 0x7b2 <mfrc522_to_card+0x17a>
				}

                if (n == 0)
                {   
					n = 1;    
 80c:	11 e0       	ldi	r17, 0x01	; 1
 80e:	de cf       	rjmp	.-68     	; 0x7cc <mfrc522_to_card+0x194>

00000810 <mfrc522_request>:
{
	mfrc522_write(CommandReg,SoftReset_CMD);
}

uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
 810:	ef 92       	push	r14
 812:	ff 92       	push	r15
 814:	0f 93       	push	r16
 816:	1f 93       	push	r17
 818:	cf 93       	push	r28
 81a:	df 93       	push	r29
 81c:	00 d0       	rcall	.+0      	; 0x81e <mfrc522_request+0xe>
 81e:	00 d0       	rcall	.+0      	; 0x820 <mfrc522_request+0x10>
 820:	cd b7       	in	r28, 0x3d	; 61
 822:	de b7       	in	r29, 0x3e	; 62
 824:	18 2f       	mov	r17, r24
 826:	7b 01       	movw	r14, r22
	uint8_t  status;  
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
 828:	67 e0       	ldi	r22, 0x07	; 7
 82a:	8d e0       	ldi	r24, 0x0D	; 13
 82c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <mfrc522_write>
	
	tag_type[0] = req_mode;
 830:	f7 01       	movw	r30, r14
 832:	10 83       	st	Z, r17
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
 834:	8e 01       	movw	r16, r28
 836:	0f 5f       	subi	r16, 0xFF	; 255
 838:	1f 4f       	sbci	r17, 0xFF	; 255
 83a:	97 01       	movw	r18, r14
 83c:	41 e0       	ldi	r20, 0x01	; 1
 83e:	b7 01       	movw	r22, r14
 840:	8c e0       	ldi	r24, 0x0C	; 12
 842:	0e 94 1c 03 	call	0x638	; 0x638 <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
 846:	81 30       	cpi	r24, 0x01	; 1
 848:	a1 f4       	brne	.+40     	; 0x872 <mfrc522_request+0x62>
 84a:	49 81       	ldd	r20, Y+1	; 0x01
 84c:	5a 81       	ldd	r21, Y+2	; 0x02
 84e:	6b 81       	ldd	r22, Y+3	; 0x03
 850:	7c 81       	ldd	r23, Y+4	; 0x04
 852:	40 31       	cpi	r20, 0x10	; 16
 854:	51 05       	cpc	r21, r1
 856:	61 05       	cpc	r22, r1
 858:	71 05       	cpc	r23, r1
 85a:	59 f4       	brne	.+22     	; 0x872 <mfrc522_request+0x62>
	{    
		status = ERROR;
	}
   
	return status;
}
 85c:	0f 90       	pop	r0
 85e:	0f 90       	pop	r0
 860:	0f 90       	pop	r0
 862:	0f 90       	pop	r0
 864:	df 91       	pop	r29
 866:	cf 91       	pop	r28
 868:	1f 91       	pop	r17
 86a:	0f 91       	pop	r16
 86c:	ff 90       	pop	r15
 86e:	ef 90       	pop	r14
 870:	08 95       	ret
	tag_type[0] = req_mode;
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);

	if ((status != CARD_FOUND) || (backBits != 0x10))
	{    
		status = ERROR;
 872:	83 e0       	ldi	r24, 0x03	; 3
	}
   
	return status;
 874:	f3 cf       	rjmp	.-26     	; 0x85c <mfrc522_request+0x4c>

00000876 <mfrc522_get_card_serial>:
    return status;
}


uint8_t mfrc522_get_card_serial(uint8_t * serial_out)
{
 876:	ef 92       	push	r14
 878:	ff 92       	push	r15
 87a:	0f 93       	push	r16
 87c:	1f 93       	push	r17
 87e:	cf 93       	push	r28
 880:	df 93       	push	r29
 882:	00 d0       	rcall	.+0      	; 0x884 <mfrc522_get_card_serial+0xe>
 884:	00 d0       	rcall	.+0      	; 0x886 <mfrc522_get_card_serial+0x10>
 886:	cd b7       	in	r28, 0x3d	; 61
 888:	de b7       	in	r29, 0x3e	; 62
 88a:	7c 01       	movw	r14, r24
	uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
    uint32_t unLen;
    
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 88c:	60 e0       	ldi	r22, 0x00	; 0
 88e:	8d e0       	ldi	r24, 0x0D	; 13
 890:	0e 94 da 02 	call	0x5b4	; 0x5b4 <mfrc522_write>
 
    serial_out[0] = PICC_ANTICOLL;
 894:	83 e9       	ldi	r24, 0x93	; 147
 896:	f7 01       	movw	r30, r14
 898:	80 83       	st	Z, r24
    serial_out[1] = 0x20;
 89a:	80 e2       	ldi	r24, 0x20	; 32
 89c:	81 83       	std	Z+1, r24	; 0x01
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
 89e:	8e 01       	movw	r16, r28
 8a0:	0f 5f       	subi	r16, 0xFF	; 255
 8a2:	1f 4f       	sbci	r17, 0xFF	; 255
 8a4:	97 01       	movw	r18, r14
 8a6:	42 e0       	ldi	r20, 0x02	; 2
 8a8:	b7 01       	movw	r22, r14
 8aa:	8c e0       	ldi	r24, 0x0C	; 12
 8ac:	0e 94 1c 03 	call	0x638	; 0x638 <mfrc522_to_card>

    if (status == CARD_FOUND)
 8b0:	81 30       	cpi	r24, 0x01	; 1
 8b2:	71 f4       	brne	.+28     	; 0x8d0 <mfrc522_get_card_serial+0x5a>
 8b4:	f7 01       	movw	r30, r14
 8b6:	97 01       	movw	r18, r14
 8b8:	2c 5f       	subi	r18, 0xFC	; 252
 8ba:	3f 4f       	sbci	r19, 0xFF	; 255
 8bc:	90 e0       	ldi	r25, 0x00	; 0
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{   
		 	serNumCheck ^= serial_out[i];
 8be:	41 91       	ld	r20, Z+
 8c0:	94 27       	eor	r25, r20
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);

    if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
 8c2:	e2 17       	cp	r30, r18
 8c4:	f3 07       	cpc	r31, r19
 8c6:	d9 f7       	brne	.-10     	; 0x8be <mfrc522_get_card_serial+0x48>
		{   
		 	serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
 8c8:	f7 01       	movw	r30, r14
 8ca:	24 81       	ldd	r18, Z+4	; 0x04
 8cc:	92 13       	cpse	r25, r18
		{   
			status = ERROR;    
 8ce:	83 e0       	ldi	r24, 0x03	; 3
		}
    }
    return status;
}
 8d0:	0f 90       	pop	r0
 8d2:	0f 90       	pop	r0
 8d4:	0f 90       	pop	r0
 8d6:	0f 90       	pop	r0
 8d8:	df 91       	pop	r29
 8da:	cf 91       	pop	r28
 8dc:	1f 91       	pop	r17
 8de:	0f 91       	pop	r16
 8e0:	ff 90       	pop	r15
 8e2:	ef 90       	pop	r14
 8e4:	08 95       	ret

000008e6 <spi_init>:
#include <spi.h>

#if SPI_CONFIG_AS_MASTER
void spi_init()
{
	SPI_DDR = (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 8e6:	8c e2       	ldi	r24, 0x2C	; 44
 8e8:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//prescaler 16
 8ea:	81 e5       	ldi	r24, 0x51	; 81
 8ec:	8c bd       	out	0x2c, r24	; 44
 8ee:	08 95       	ret

000008f0 <spi_transmit>:
 8f0:	8e bd       	out	0x2e, r24	; 46
 8f2:	0d b4       	in	r0, 0x2d	; 45
 8f4:	07 fe       	sbrs	r0, 7
 8f6:	fd cf       	rjmp	.-6      	; 0x8f2 <spi_transmit+0x2>
 8f8:	8e b5       	in	r24, 0x2e	; 46
 8fa:	08 95       	ret

000008fc <main>:




int main(void)
{
 8fc:	cf 93       	push	r28
 8fe:	df 93       	push	r29
 900:	cd b7       	in	r28, 0x3d	; 61
 902:	de b7       	in	r29, 0x3e	; 62
 904:	6a 97       	sbiw	r28, 0x1a	; 26
 906:	0f b6       	in	r0, 0x3f	; 63
 908:	f8 94       	cli
 90a:	de bf       	out	0x3e, r29	; 62
 90c:	0f be       	out	0x3f, r0	; 63
 90e:	cd bf       	out	0x3d, r28	; 61
    
    
    
    
    loadTags(); //load any tags stored in eeprom.
 910:	0e 94 a9 02 	call	0x552	; 0x552 <loadTags>
    initServo(); //make servo an output at pin 5
 914:	0e 94 86 01 	call	0x30c	; 0x30c <initServo>
 918:	2f e7       	ldi	r18, 0x7F	; 127
 91a:	88 e3       	ldi	r24, 0x38	; 56
 91c:	91 e0       	ldi	r25, 0x01	; 1
 91e:	21 50       	subi	r18, 0x01	; 1
 920:	80 40       	sbci	r24, 0x00	; 0
 922:	90 40       	sbci	r25, 0x00	; 0
 924:	e1 f7       	brne	.-8      	; 0x91e <__stack+0x1f>
 926:	00 c0       	rjmp	.+0      	; 0x928 <__stack+0x29>
 928:	00 00       	nop
    
    uint8_t byte;
    uint8_t str[MAX_LEN];
    _delay_ms(50);
    LCDInit(LS_BLINK);
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	0e 94 a3 00 	call	0x146	; 0x146 <LCDInit>
    LCDWriteStringXY(2,0,"ECEN1310 RFID Tag Reader");
 930:	60 e0       	ldi	r22, 0x00	; 0
 932:	82 e0       	ldi	r24, 0x02	; 2
 934:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 938:	87 e2       	ldi	r24, 0x27	; 39
 93a:	91 e0       	ldi	r25, 0x01	; 1
 93c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
    initLED(); //very strange init of led needs to be after load tags and servo!
 940:	0e 94 99 01 	call	0x332	; 0x332 <initLED>

    
    spi_init(); //start communication for rfid
 944:	0e 94 73 04 	call	0x8e6	; 0x8e6 <spi_init>
 948:	af ef       	ldi	r26, 0xFF	; 255
 94a:	b9 e6       	ldi	r27, 0x69	; 105
 94c:	e8 e1       	ldi	r30, 0x18	; 24
 94e:	a1 50       	subi	r26, 0x01	; 1
 950:	b0 40       	sbci	r27, 0x00	; 0
 952:	e0 40       	sbci	r30, 0x00	; 0
 954:	e1 f7       	brne	.-8      	; 0x94e <__stack+0x4f>
 956:	00 c0       	rjmp	.+0      	; 0x958 <__stack+0x59>
 958:	00 00       	nop
    _delay_ms(1000);
    LCDClear();
 95a:	60 e0       	ldi	r22, 0x00	; 0
 95c:	81 e0       	ldi	r24, 0x01	; 1
 95e:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
    
    open();  //for testing
 962:	0e 94 41 02 	call	0x482	; 0x482 <open>
    close(); //was for testing
 966:	0e 94 55 02 	call	0x4aa	; 0x4aa <close>
    
    //init reader
    mfrc522_init();
 96a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <mfrc522_init>
 96e:	ff ef       	ldi	r31, 0xFF	; 255
 970:	2e e9       	ldi	r18, 0x9E	; 158
 972:	84 e2       	ldi	r24, 0x24	; 36
 974:	f1 50       	subi	r31, 0x01	; 1
 976:	20 40       	sbci	r18, 0x00	; 0
 978:	80 40       	sbci	r24, 0x00	; 0
 97a:	e1 f7       	brne	.-8      	; 0x974 <__stack+0x75>
 97c:	00 c0       	rjmp	.+0      	; 0x97e <__stack+0x7f>
 97e:	00 00       	nop
    
    _delay_ms(1500);
    LCDClear();
 980:	60 e0       	ldi	r22, 0x00	; 0
 982:	81 e0       	ldi	r24, 0x01	; 1
 984:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
    
    int addNext = 0;
    int deleteNext =0;
    
    
    PORTC |=BV(ledG);
 988:	42 9a       	sbi	0x08, 2	; 8
 98a:	9f e7       	ldi	r25, 0x7F	; 127
 98c:	a2 e3       	ldi	r26, 0x32	; 50
 98e:	b2 e0       	ldi	r27, 0x02	; 2
 990:	91 50       	subi	r25, 0x01	; 1
 992:	a0 40       	sbci	r26, 0x00	; 0
 994:	b0 40       	sbci	r27, 0x00	; 0
 996:	e1 f7       	brne	.-8      	; 0x990 <__stack+0x91>
 998:	00 c0       	rjmp	.+0      	; 0x99a <__stack+0x9b>
 99a:	00 00       	nop
    _delay_ms(90);
    PORTC ^= BV(ledG);
 99c:	88 b1       	in	r24, 0x08	; 8
 99e:	94 e0       	ldi	r25, 0x04	; 4
 9a0:	89 27       	eor	r24, r25
 9a2:	88 b9       	out	0x08, r24	; 8
 9a4:	ef e5       	ldi	r30, 0x5F	; 95
 9a6:	fa ee       	ldi	r31, 0xEA	; 234
 9a8:	31 97       	sbiw	r30, 0x01	; 1
 9aa:	f1 f7       	brne	.-4      	; 0x9a8 <__stack+0xa9>
 9ac:	00 c0       	rjmp	.+0      	; 0x9ae <__stack+0xaf>
 9ae:	00 00       	nop
    
    _delay_ms(1500);
    LCDClear();
    
    int addNext = 0;
    int deleteNext =0;
 9b0:	e1 2c       	mov	r14, r1
 9b2:	f1 2c       	mov	r15, r1
    mfrc522_init();
    
    _delay_ms(1500);
    LCDClear();
    
    int addNext = 0;
 9b4:	00 e0       	ldi	r16, 0x00	; 0
 9b6:	10 e0       	ldi	r17, 0x00	; 0
 9b8:	4e 01       	movw	r8, r28
 9ba:	f6 e0       	ldi	r31, 0x06	; 6
 9bc:	8f 0e       	add	r8, r31
 9be:	91 1c       	adc	r9, r1
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
                            write_eeprom_word(tag1[i], 0);
                            write_eeprom_word(tag2[i], 0);
                        }
                        tagNumber =1;
 9c0:	44 24       	eor	r4, r4
 9c2:	43 94       	inc	r4
 9c4:	51 2c       	mov	r5, r1
    
    while(1){
        
        // initLED();
        
        loadTags();
 9c6:	0e 94 a9 02 	call	0x552	; 0x552 <loadTags>
        byte = mfrc522_request(PICC_REQALL,str);
 9ca:	be 01       	movw	r22, r28
 9cc:	6f 5f       	subi	r22, 0xFF	; 255
 9ce:	7f 4f       	sbci	r23, 0xFF	; 255
 9d0:	82 e5       	ldi	r24, 0x52	; 82
 9d2:	0e 94 08 04 	call	0x810	; 0x810 <mfrc522_request>
 9d6:	d8 2e       	mov	r13, r24
        
        LCDHexDumpXY(0,0,byte);
 9d8:	48 2f       	mov	r20, r24
 9da:	60 e0       	ldi	r22, 0x00	; 0
 9dc:	80 e0       	ldi	r24, 0x00	; 0
 9de:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCDHexDumpXY>
        buttonRead();
 9e2:	0e 94 76 02 	call	0x4ec	; 0x4ec <buttonRead>
        LCDClear();
 9e6:	60 e0       	ldi	r22, 0x00	; 0
 9e8:	81 e0       	ldi	r24, 0x01	; 1
 9ea:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
        
        while(deleteNext == 1){
 9ee:	a1 e0       	ldi	r26, 0x01	; 1
 9f0:	ea 16       	cp	r14, r26
 9f2:	f1 04       	cpc	r15, r1
 9f4:	09 f4       	brne	.+2      	; 0x9f8 <__stack+0xf9>
 9f6:	1a c1       	rjmp	.+564    	; 0xc2c <__stack+0x32d>
            }
            loadTags();
            byte = mfrc522_request(PICC_REQALL,str);
        }//end of delete next
        
        while(addNext == 1){
 9f8:	01 30       	cpi	r16, 0x01	; 1
 9fa:	11 05       	cpc	r17, r1
 9fc:	09 f4       	brne	.+2      	; 0xa00 <__stack+0x101>
 9fe:	ab c1       	rjmp	.+854    	; 0xd56 <__stack+0x457>
            }
            loadTags();
            byte = mfrc522_request(PICC_REQALL,str);
        }
        
        if(byte == CARD_FOUND && addNext !=1)
 a00:	f1 e0       	ldi	r31, 0x01	; 1
 a02:	df 12       	cpse	r13, r31
 a04:	9b c2       	rjmp	.+1334   	; 0xf3c <__stack+0x63d>
        {
            byte = mfrc522_get_card_serial(str);
 a06:	ce 01       	movw	r24, r28
 a08:	01 96       	adiw	r24, 0x01	; 1
 a0a:	0e 94 3b 04 	call	0x876	; 0x876 <mfrc522_get_card_serial>
            if(byte == CARD_FOUND)
 a0e:	81 30       	cpi	r24, 0x01	; 1
 a10:	09 f0       	breq	.+2      	; 0xa14 <__stack+0x115>
 a12:	71 c2       	rjmp	.+1250   	; 0xef6 <__stack+0x5f7>
 a14:	ce 01       	movw	r24, r28
 a16:	01 96       	adiw	r24, 0x01	; 1
 a18:	7c 01       	movw	r14, r24
            {
                for(byte=0;byte<5;byte++){
                    LCDWriteInt(str[byte], -1);
 a1a:	d7 01       	movw	r26, r14
 a1c:	8d 91       	ld	r24, X+
 a1e:	7d 01       	movw	r14, r26
 a20:	6f ef       	ldi	r22, 0xFF	; 255
 a22:	7f ef       	ldi	r23, 0xFF	; 255
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteInt>
        if(byte == CARD_FOUND && addNext !=1)
        {
            byte = mfrc522_get_card_serial(str);
            if(byte == CARD_FOUND)
            {
                for(byte=0;byte<5;byte++){
 a2a:	e8 14       	cp	r14, r8
 a2c:	f9 04       	cpc	r15, r9
 a2e:	a9 f7       	brne	.-22     	; 0xa1a <__stack+0x11b>
 a30:	fe 01       	movw	r30, r28
 a32:	31 96       	adiw	r30, 0x01	; 1
 a34:	6f 01       	movw	r12, r30
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
                            write_eeprom_word(tag2[i], str[i]);
                        }
                        tagNumber++;
                        addNext = 0;
 a36:	3f 01       	movw	r6, r30
 a38:	af e5       	ldi	r26, 0x5F	; 95
 a3a:	ba ee       	ldi	r27, 0xEA	; 234
 a3c:	11 97       	sbiw	r26, 0x01	; 1
 a3e:	f1 f7       	brne	.-4      	; 0xa3c <__stack+0x13d>
 a40:	00 c0       	rjmp	.+0      	; 0xa42 <__stack+0x143>
 a42:	00 00       	nop
            { //not a valid card found
                LCDWriteStringXY(0,1,"Error");
            }
            for(int i=0; i<5; i++){
                _delay_ms(30);//test
                LCDWriteInt(str[i], -1);//test
 a44:	f3 01       	movw	r30, r6
 a46:	81 91       	ld	r24, Z+
 a48:	3f 01       	movw	r6, r30
 a4a:	6f ef       	ldi	r22, 0xFF	; 255
 a4c:	7f ef       	ldi	r23, 0xFF	; 255
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteInt>
            }
            else
            { //not a valid card found
                LCDWriteStringXY(0,1,"Error");
            }
            for(int i=0; i<5; i++){
 a54:	86 14       	cp	r8, r6
 a56:	97 04       	cpc	r9, r7
 a58:	79 f7       	brne	.-34     	; 0xa38 <__stack+0x139>
 a5a:	ff ef       	ldi	r31, 0xFF	; 255
 a5c:	20 e7       	ldi	r18, 0x70	; 112
 a5e:	82 e0       	ldi	r24, 0x02	; 2
 a60:	f1 50       	subi	r31, 0x01	; 1
 a62:	20 40       	sbci	r18, 0x00	; 0
 a64:	80 40       	sbci	r24, 0x00	; 0
 a66:	e1 f7       	brne	.-8      	; 0xa60 <__stack+0x161>
 a68:	00 c0       	rjmp	.+0      	; 0xa6a <__stack+0x16b>
 a6a:	00 00       	nop
                _delay_ms(30);//test
                LCDWriteInt(str[i], -1);//test
            }
            _delay_ms(100);//test
            LCDClear();//test
 a6c:	60 e0       	ldi	r22, 0x00	; 0
 a6e:	81 e0       	ldi	r24, 0x01	; 1
 a70:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 a74:	a0 e1       	ldi	r26, 0x10	; 16
 a76:	b1 e0       	ldi	r27, 0x01	; 1
 a78:	ba 8f       	std	Y+26, r27	; 0x1a
 a7a:	a9 8f       	std	Y+25, r26	; 0x19
 a7c:	2b e0       	ldi	r18, 0x0B	; 11
 a7e:	22 2e       	mov	r2, r18
 a80:	21 e0       	ldi	r18, 0x01	; 1
 a82:	32 2e       	mov	r3, r18
 a84:	e6 e0       	ldi	r30, 0x06	; 6
 a86:	f1 e0       	ldi	r31, 0x01	; 1
 a88:	fe 8b       	std	Y+22, r31	; 0x16
 a8a:	ed 8b       	std	Y+21, r30	; 0x15
 a8c:	86 e1       	ldi	r24, 0x16	; 22
 a8e:	92 e0       	ldi	r25, 0x02	; 2
 a90:	9a 8b       	std	Y+18, r25	; 0x12
 a92:	89 8b       	std	Y+17, r24	; 0x11
 a94:	a2 e0       	ldi	r26, 0x02	; 2
 a96:	b2 e0       	ldi	r27, 0x02	; 2
 a98:	b8 8f       	std	Y+24, r27	; 0x18
 a9a:	af 8b       	std	Y+23, r26	; 0x17
 a9c:	e5 e1       	ldi	r30, 0x15	; 21
 a9e:	f1 e0       	ldi	r31, 0x01	; 1
 aa0:	fc 8b       	std	Y+20, r31	; 0x14
 aa2:	eb 8b       	std	Y+19, r30	; 0x13
 aa4:	78 01       	movw	r14, r16
 aa6:	58 01       	movw	r10, r16
            
            for(int k=0;k<5 ;k++){ //loop through id arras
                LCDWriteIntXY(0,1,str[k], -1);
 aa8:	61 e0       	ldi	r22, 0x01	; 1
 aaa:	80 e0       	ldi	r24, 0x00	; 0
 aac:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 ab0:	d6 01       	movw	r26, r12
 ab2:	8c 91       	ld	r24, X
 ab4:	6f ef       	ldi	r22, 0xFF	; 255
 ab6:	7f ef       	ldi	r23, 0xFF	; 255
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteInt>
                if(str[k] == card2[k] || str[k] == card1[k] || str[k] == ram_tag1[k] || str[k] ==ram_tag2[k]) //tag compare
 abe:	f6 01       	movw	r30, r12
 ac0:	80 81       	ld	r24, Z
 ac2:	a9 8d       	ldd	r26, Y+25	; 0x19
 ac4:	ba 8d       	ldd	r27, Y+26	; 0x1a
 ac6:	9d 91       	ld	r25, X+
 ac8:	ba 8f       	std	Y+26, r27	; 0x1a
 aca:	a9 8f       	std	Y+25, r26	; 0x19
 acc:	89 17       	cp	r24, r25
 ace:	79 f0       	breq	.+30     	; 0xaee <__stack+0x1ef>
 ad0:	eb 89       	ldd	r30, Y+19	; 0x13
 ad2:	fc 89       	ldd	r31, Y+20	; 0x14
 ad4:	90 81       	ld	r25, Z
 ad6:	89 17       	cp	r24, r25
 ad8:	51 f0       	breq	.+20     	; 0xaee <__stack+0x1ef>
 ada:	af 89       	ldd	r26, Y+23	; 0x17
 adc:	b8 8d       	ldd	r27, Y+24	; 0x18
 ade:	9c 91       	ld	r25, X
 ae0:	89 17       	cp	r24, r25
 ae2:	29 f0       	breq	.+10     	; 0xaee <__stack+0x1ef>
 ae4:	e9 89       	ldd	r30, Y+17	; 0x11
 ae6:	fa 89       	ldd	r31, Y+18	; 0x12
 ae8:	90 81       	ld	r25, Z
 aea:	89 13       	cpse	r24, r25
 aec:	0d c2       	rjmp	.+1050   	; 0xf08 <__stack+0x609>
                {
                    LCDWriteIntXY(0,1,str[k], -1);
 aee:	61 e0       	ldi	r22, 0x01	; 1
 af0:	80 e0       	ldi	r24, 0x00	; 0
 af2:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 af6:	d6 01       	movw	r26, r12
 af8:	8c 91       	ld	r24, X
 afa:	6f ef       	ldi	r22, 0xFF	; 255
 afc:	7f ef       	ldi	r23, 0xFF	; 255
 afe:	90 e0       	ldi	r25, 0x00	; 0
 b00:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteInt>
                    LCDWriteString("MATCH");
 b04:	8c ec       	ldi	r24, 0xCC	; 204
 b06:	91 e0       	ldi	r25, 0x01	; 1
 b08:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 b0c:	bf e7       	ldi	r27, 0x7F	; 127
 b0e:	e8 e3       	ldi	r30, 0x38	; 56
 b10:	f1 e0       	ldi	r31, 0x01	; 1
 b12:	b1 50       	subi	r27, 0x01	; 1
 b14:	e0 40       	sbci	r30, 0x00	; 0
 b16:	f0 40       	sbci	r31, 0x00	; 0
 b18:	e1 f7       	brne	.-8      	; 0xb12 <__stack+0x213>
 b1a:	00 c0       	rjmp	.+0      	; 0xb1c <__stack+0x21d>
 b1c:	00 00       	nop
                    _delay_ms(50);
                    LCDClear();
 b1e:	60 e0       	ldi	r22, 0x00	; 0
 b20:	81 e0       	ldi	r24, 0x01	; 1
 b22:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                    validCard = 1;
 b26:	50 92 05 01 	sts	0x0105, r5
 b2a:	40 92 04 01 	sts	0x0104, r4
 b2e:	ff ef       	ldi	r31, 0xFF	; 255
 b30:	cf 1a       	sub	r12, r31
 b32:	df 0a       	sbc	r13, r31
 b34:	2f ef       	ldi	r18, 0xFF	; 255
 b36:	22 1a       	sub	r2, r18
 b38:	32 0a       	sbc	r3, r18
 b3a:	8d 89       	ldd	r24, Y+21	; 0x15
 b3c:	9e 89       	ldd	r25, Y+22	; 0x16
 b3e:	01 96       	adiw	r24, 0x01	; 1
 b40:	9e 8b       	std	Y+22, r25	; 0x16
 b42:	8d 8b       	std	Y+21, r24	; 0x15
 b44:	a9 89       	ldd	r26, Y+17	; 0x11
 b46:	ba 89       	ldd	r27, Y+18	; 0x12
 b48:	11 96       	adiw	r26, 0x01	; 1
 b4a:	ba 8b       	std	Y+18, r27	; 0x12
 b4c:	a9 8b       	std	Y+17, r26	; 0x11
 b4e:	ef 89       	ldd	r30, Y+23	; 0x17
 b50:	f8 8d       	ldd	r31, Y+24	; 0x18
 b52:	31 96       	adiw	r30, 0x01	; 1
 b54:	f8 8f       	std	Y+24, r31	; 0x18
 b56:	ef 8b       	std	Y+23, r30	; 0x17
 b58:	8b 89       	ldd	r24, Y+19	; 0x13
 b5a:	9c 89       	ldd	r25, Y+20	; 0x14
 b5c:	01 96       	adiw	r24, 0x01	; 1
 b5e:	9c 8b       	std	Y+20, r25	; 0x14
 b60:	8b 8b       	std	Y+19, r24	; 0x13
                LCDWriteInt(str[i], -1);//test
            }
            _delay_ms(100);//test
            LCDClear();//test
            
            for(int k=0;k<5 ;k++){ //loop through id arras
 b62:	6c 14       	cp	r6, r12
 b64:	7d 04       	cpc	r7, r13
 b66:	09 f0       	breq	.+2      	; 0xb6a <__stack+0x26b>
 b68:	9f cf       	rjmp	.-194    	; 0xaa8 <__stack+0x1a9>
                    validCard = -1;
                    deleteNext = 0;
                    addNext = 0;
                }
            } //end of for loop checking if what type of tag
            if(validCard == 1){
 b6a:	80 91 04 01 	lds	r24, 0x0104
 b6e:	90 91 05 01 	lds	r25, 0x0105
 b72:	01 97       	sbiw	r24, 0x01	; 1
 b74:	49 f5       	brne	.+82     	; 0xbc8 <__stack+0x2c9>
                LCDClear();
 b76:	60 e0       	ldi	r22, 0x00	; 0
 b78:	81 e0       	ldi	r24, 0x01	; 1
 b7a:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 b7e:	9f ef       	ldi	r25, 0xFF	; 255
 b80:	a4 e3       	ldi	r26, 0x34	; 52
 b82:	bc e0       	ldi	r27, 0x0C	; 12
 b84:	91 50       	subi	r25, 0x01	; 1
 b86:	a0 40       	sbci	r26, 0x00	; 0
 b88:	b0 40       	sbci	r27, 0x00	; 0
 b8a:	e1 f7       	brne	.-8      	; 0xb84 <__stack+0x285>
 b8c:	00 c0       	rjmp	.+0      	; 0xb8e <__stack+0x28f>
 b8e:	00 00       	nop
                _delay_ms(500);
                LCDWriteString("Access Granted");
 b90:	82 ed       	ldi	r24, 0xD2	; 210
 b92:	91 e0       	ldi	r25, 0x01	; 1
 b94:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
                validTag(1);
 b98:	81 e0       	ldi	r24, 0x01	; 1
 b9a:	90 e0       	ldi	r25, 0x00	; 0
 b9c:	0e 94 2d 02 	call	0x45a	; 0x45a <validTag>
                open();
 ba0:	0e 94 41 02 	call	0x482	; 0x482 <open>
                validCard=5;
 ba4:	e5 e0       	ldi	r30, 0x05	; 5
 ba6:	f0 e0       	ldi	r31, 0x00	; 0
 ba8:	f0 93 05 01 	sts	0x0105, r31
 bac:	e0 93 04 01 	sts	0x0104, r30
 bb0:	ff ef       	ldi	r31, 0xFF	; 255
 bb2:	29 e6       	ldi	r18, 0x69	; 105
 bb4:	88 e1       	ldi	r24, 0x18	; 24
 bb6:	f1 50       	subi	r31, 0x01	; 1
 bb8:	20 40       	sbci	r18, 0x00	; 0
 bba:	80 40       	sbci	r24, 0x00	; 0
 bbc:	e1 f7       	brne	.-8      	; 0xbb6 <__stack+0x2b7>
 bbe:	00 c0       	rjmp	.+0      	; 0xbc0 <__stack+0x2c1>
 bc0:	00 00       	nop
                deleteNext =0;
                _delay_ms(1000);
                close();
 bc2:	0e 94 55 02 	call	0x4aa	; 0x4aa <close>
                _delay_ms(500);
                LCDWriteString("Access Granted");
                validTag(1);
                open();
                validCard=5;
                deleteNext =0;
 bc6:	78 01       	movw	r14, r16
                _delay_ms(1000);
                close();
                
            } //end if test worked
            if(validCard == -1 && addNext !=1){
 bc8:	80 91 04 01 	lds	r24, 0x0104
 bcc:	90 91 05 01 	lds	r25, 0x0105
 bd0:	01 96       	adiw	r24, 0x01	; 1
 bd2:	11 f5       	brne	.+68     	; 0xc18 <__stack+0x319>
 bd4:	b1 e0       	ldi	r27, 0x01	; 1
 bd6:	ab 16       	cp	r10, r27
 bd8:	b1 04       	cpc	r11, r1
 bda:	f1 f0       	breq	.+60     	; 0xc18 <__stack+0x319>
                LCDClear();
 bdc:	60 e0       	ldi	r22, 0x00	; 0
 bde:	81 e0       	ldi	r24, 0x01	; 1
 be0:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 be4:	ef ef       	ldi	r30, 0xFF	; 255
 be6:	f0 e7       	ldi	r31, 0x70	; 112
 be8:	22 e0       	ldi	r18, 0x02	; 2
 bea:	e1 50       	subi	r30, 0x01	; 1
 bec:	f0 40       	sbci	r31, 0x00	; 0
 bee:	20 40       	sbci	r18, 0x00	; 0
 bf0:	e1 f7       	brne	.-8      	; 0xbea <__stack+0x2eb>
 bf2:	00 c0       	rjmp	.+0      	; 0xbf4 <__stack+0x2f5>
 bf4:	00 00       	nop
                _delay_ms(100);
                LCDWriteString("Access Denied");
 bf6:	81 ee       	ldi	r24, 0xE1	; 225
 bf8:	91 e0       	ldi	r25, 0x01	; 1
 bfa:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 bfe:	0e 94 77 01 	call	0x2ee	; 0x2ee <validTag.part.0>
 c02:	8f ef       	ldi	r24, 0xFF	; 255
 c04:	90 e7       	ldi	r25, 0x70	; 112
 c06:	a2 e0       	ldi	r26, 0x02	; 2
 c08:	81 50       	subi	r24, 0x01	; 1
 c0a:	90 40       	sbci	r25, 0x00	; 0
 c0c:	a0 40       	sbci	r26, 0x00	; 0
 c0e:	e1 f7       	brne	.-8      	; 0xc08 <__stack+0x309>
 c10:	00 c0       	rjmp	.+0      	; 0xc12 <__stack+0x313>
 c12:	00 00       	nop
 c14:	0e 94 77 01 	call	0x2ee	; 0x2ee <validTag.part.0>
                LCDClear();
            }
            
        } //end of valid card found
        
        LCDWriteStringXY(0,0,"Present Tag");
 c18:	60 e0       	ldi	r22, 0x00	; 0
 c1a:	80 e0       	ldi	r24, 0x00	; 0
 c1c:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 c20:	8f ee       	ldi	r24, 0xEF	; 239
 c22:	91 e0       	ldi	r25, 0x01	; 1
 c24:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
    
    while(1){
        
        // initLED();
        
        loadTags();
 c28:	85 01       	movw	r16, r10
 c2a:	cd ce       	rjmp	.-614    	; 0x9c6 <__stack+0xc7>
        LCDHexDumpXY(0,0,byte);
        buttonRead();
        LCDClear();
        
        while(deleteNext == 1){
            LCDClear();
 c2c:	60 e0       	ldi	r22, 0x00	; 0
 c2e:	81 e0       	ldi	r24, 0x01	; 1
 c30:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
            LCDWriteString("delete tag acivated");
 c34:	80 e4       	ldi	r24, 0x40	; 64
 c36:	91 e0       	ldi	r25, 0x01	; 1
 c38:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 c3c:	2f ef       	ldi	r18, 0xFF	; 255
 c3e:	87 e8       	ldi	r24, 0x87	; 135
 c40:	93 e1       	ldi	r25, 0x13	; 19
 c42:	21 50       	subi	r18, 0x01	; 1
 c44:	80 40       	sbci	r24, 0x00	; 0
 c46:	90 40       	sbci	r25, 0x00	; 0
 c48:	e1 f7       	brne	.-8      	; 0xc42 <__stack+0x343>
 c4a:	00 c0       	rjmp	.+0      	; 0xc4c <__stack+0x34d>
 c4c:	00 00       	nop
            _delay_ms(800);
            byte = mfrc522_request(PICC_REQALL,str);
 c4e:	be 01       	movw	r22, r28
 c50:	6f 5f       	subi	r22, 0xFF	; 255
 c52:	7f 4f       	sbci	r23, 0xFF	; 255
 c54:	82 e5       	ldi	r24, 0x52	; 82
 c56:	0e 94 08 04 	call	0x810	; 0x810 <mfrc522_request>
            LCDClear();
 c5a:	60 e0       	ldi	r22, 0x00	; 0
 c5c:	81 e0       	ldi	r24, 0x01	; 1
 c5e:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
            LCDWriteString("Scan again to ");
 c62:	84 e5       	ldi	r24, 0x54	; 84
 c64:	91 e0       	ldi	r25, 0x01	; 1
 c66:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
            LCDWriteStringXY(0, 1, "delete all tags.");
 c6a:	61 e0       	ldi	r22, 0x01	; 1
 c6c:	80 e0       	ldi	r24, 0x00	; 0
 c6e:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 c72:	83 e6       	ldi	r24, 0x63	; 99
 c74:	91 e0       	ldi	r25, 0x01	; 1
 c76:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
            byte = mfrc522_request(PICC_REQALL,str);
 c7a:	be 01       	movw	r22, r28
 c7c:	6f 5f       	subi	r22, 0xFF	; 255
 c7e:	7f 4f       	sbci	r23, 0xFF	; 255
 c80:	82 e5       	ldi	r24, 0x52	; 82
 c82:	0e 94 08 04 	call	0x810	; 0x810 <mfrc522_request>
            if(byte == CARD_FOUND)
 c86:	81 30       	cpi	r24, 0x01	; 1
 c88:	09 f0       	breq	.+2      	; 0xc8c <__stack+0x38d>
 c8a:	5b c0       	rjmp	.+182    	; 0xd42 <__stack+0x443>
            {
                byte = mfrc522_get_card_serial(str);
 c8c:	ce 01       	movw	r24, r28
 c8e:	01 96       	adiw	r24, 0x01	; 1
 c90:	0e 94 3b 04 	call	0x876	; 0x876 <mfrc522_get_card_serial>
                if(byte == CARD_FOUND)
 c94:	81 30       	cpi	r24, 0x01	; 1
 c96:	09 f0       	breq	.+2      	; 0xc9a <__stack+0x39b>
 c98:	54 c0       	rjmp	.+168    	; 0xd42 <__stack+0x443>
 c9a:	fe 01       	movw	r30, r28
 c9c:	31 96       	adiw	r30, 0x01	; 1
 c9e:	a6 e0       	ldi	r26, 0x06	; 6
 ca0:	b1 e0       	ldi	r27, 0x01	; 1
                        if (tagNumber == 0 || str[j] != tag1[j] || str[j] != tag2[j]) {
                            deleteNext = 0;
                        }
                    }
                    for(int i=0; i<=4; i++){
                        if(str[i] == DELETE[i]){
 ca2:	91 91       	ld	r25, Z+
 ca4:	8d 91       	ld	r24, X+
                    for(int j=0; j<=4; j++){
                        if (tagNumber == 0 || str[j] != tag1[j] || str[j] != tag2[j]) {
                            deleteNext = 0;
                        }
                    }
                    for(int i=0; i<=4; i++){
 ca6:	e8 15       	cp	r30, r8
 ca8:	f9 05       	cpc	r31, r9
 caa:	d9 f7       	brne	.-10     	; 0xca2 <__stack+0x3a3>
                        }
                        else
                            deleteNext =0;
                    }//end of check if duplicate
                    
                    if(deleteNext ==1){
 cac:	98 13       	cpse	r25, r24
 cae:	47 c0       	rjmp	.+142    	; 0xd3e <__stack+0x43f>
                        LCDClear();
 cb0:	60 e0       	ldi	r22, 0x00	; 0
 cb2:	81 e0       	ldi	r24, 0x01	; 1
 cb4:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                        LCDWriteString("Removing Tags");
 cb8:	84 e7       	ldi	r24, 0x74	; 116
 cba:	91 e0       	ldi	r25, 0x01	; 1
 cbc:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 cc0:	af ef       	ldi	r26, 0xFF	; 255
 cc2:	b9 e6       	ldi	r27, 0x69	; 105
 cc4:	e8 e1       	ldi	r30, 0x18	; 24
 cc6:	a1 50       	subi	r26, 0x01	; 1
 cc8:	b0 40       	sbci	r27, 0x00	; 0
 cca:	e0 40       	sbci	r30, 0x00	; 0
 ccc:	e1 f7       	brne	.-8      	; 0xcc6 <__stack+0x3c7>
 cce:	00 c0       	rjmp	.+0      	; 0xcd0 <__stack+0x3d1>
 cd0:	00 00       	nop
 cd2:	37 e0       	ldi	r19, 0x07	; 7
 cd4:	e3 2e       	mov	r14, r19
 cd6:	32 e0       	ldi	r19, 0x02	; 2
 cd8:	f3 2e       	mov	r15, r19
 cda:	41 e1       	ldi	r20, 0x11	; 17
 cdc:	c4 2e       	mov	r12, r20
 cde:	42 e0       	ldi	r20, 0x02	; 2
 ce0:	d4 2e       	mov	r13, r20
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
                            write_eeprom_word(tag1[i], 0);
 ce2:	d7 01       	movw	r26, r14
 ce4:	8d 91       	ld	r24, X+
 ce6:	7d 01       	movw	r14, r26
 ce8:	60 e0       	ldi	r22, 0x00	; 0
 cea:	70 e0       	ldi	r23, 0x00	; 0
 cec:	90 e0       	ldi	r25, 0x00	; 0
 cee:	0e 94 cf 07 	call	0xf9e	; 0xf9e <eeprom_write_word>
                            write_eeprom_word(tag2[i], 0);
 cf2:	f6 01       	movw	r30, r12
 cf4:	81 91       	ld	r24, Z+
 cf6:	6f 01       	movw	r12, r30
 cf8:	60 e0       	ldi	r22, 0x00	; 0
 cfa:	70 e0       	ldi	r23, 0x00	; 0
 cfc:	90 e0       	ldi	r25, 0x00	; 0
 cfe:	0e 94 cf 07 	call	0xf9e	; 0xf9e <eeprom_write_word>
                    
                    if(deleteNext ==1){
                        LCDClear();
                        LCDWriteString("Removing Tags");
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
 d02:	fc e0       	ldi	r31, 0x0C	; 12
 d04:	ef 16       	cp	r14, r31
 d06:	f2 e0       	ldi	r31, 0x02	; 2
 d08:	ff 06       	cpc	r15, r31
 d0a:	59 f7       	brne	.-42     	; 0xce2 <__stack+0x3e3>
                            write_eeprom_word(tag1[i], 0);
                            write_eeprom_word(tag2[i], 0);
                        }
                        tagNumber =1;
 d0c:	50 92 03 01 	sts	0x0103, r5
 d10:	40 92 02 01 	sts	0x0102, r4
                        deleteNext =0;
                        LCDClear();
 d14:	60 e0       	ldi	r22, 0x00	; 0
 d16:	81 e0       	ldi	r24, 0x01	; 1
 d18:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                        LCDWriteString("Tags Erased");
 d1c:	82 e8       	ldi	r24, 0x82	; 130
 d1e:	91 e0       	ldi	r25, 0x01	; 1
 d20:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 d24:	2f ef       	ldi	r18, 0xFF	; 255
 d26:	82 e5       	ldi	r24, 0x52	; 82
 d28:	97 e0       	ldi	r25, 0x07	; 7
 d2a:	21 50       	subi	r18, 0x01	; 1
 d2c:	80 40       	sbci	r24, 0x00	; 0
 d2e:	90 40       	sbci	r25, 0x00	; 0
 d30:	e1 f7       	brne	.-8      	; 0xd2a <__stack+0x42b>
 d32:	00 c0       	rjmp	.+0      	; 0xd34 <__stack+0x435>
 d34:	00 00       	nop
                        _delay_ms(300);
                        tagNumber =1;
 d36:	50 92 03 01 	sts	0x0103, r5
 d3a:	40 92 02 01 	sts	0x0102, r4
                        
                    }
                    deleteNext =0;
 d3e:	e1 2c       	mov	r14, r1
 d40:	f1 2c       	mov	r15, r1
                    // addNext =0;
                }//end of if card found
            }
            loadTags();
 d42:	0e 94 a9 02 	call	0x552	; 0x552 <loadTags>
            byte = mfrc522_request(PICC_REQALL,str);
 d46:	be 01       	movw	r22, r28
 d48:	6f 5f       	subi	r22, 0xFF	; 255
 d4a:	7f 4f       	sbci	r23, 0xFF	; 255
 d4c:	82 e5       	ldi	r24, 0x52	; 82
 d4e:	0e 94 08 04 	call	0x810	; 0x810 <mfrc522_request>
 d52:	d8 2e       	mov	r13, r24
 d54:	4c ce       	rjmp	.-872    	; 0x9ee <__stack+0xef>
        }//end of delete next
        
        while(addNext == 1){
            byte = mfrc522_request(PICC_REQALL,str);
 d56:	be 01       	movw	r22, r28
 d58:	6f 5f       	subi	r22, 0xFF	; 255
 d5a:	7f 4f       	sbci	r23, 0xFF	; 255
 d5c:	82 e5       	ldi	r24, 0x52	; 82
 d5e:	0e 94 08 04 	call	0x810	; 0x810 <mfrc522_request>
            LCDClear();
 d62:	60 e0       	ldi	r22, 0x00	; 0
 d64:	81 e0       	ldi	r24, 0x01	; 1
 d66:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
            LCDWriteString("Scan tag to ");
 d6a:	8e e8       	ldi	r24, 0x8E	; 142
 d6c:	91 e0       	ldi	r25, 0x01	; 1
 d6e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
            LCDWriteStringXY(0, 1, "be added.");
 d72:	61 e0       	ldi	r22, 0x01	; 1
 d74:	80 e0       	ldi	r24, 0x00	; 0
 d76:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 d7a:	8b e9       	ldi	r24, 0x9B	; 155
 d7c:	91 e0       	ldi	r25, 0x01	; 1
 d7e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
            byte = mfrc522_request(PICC_REQALL,str);
 d82:	be 01       	movw	r22, r28
 d84:	6f 5f       	subi	r22, 0xFF	; 255
 d86:	7f 4f       	sbci	r23, 0xFF	; 255
 d88:	82 e5       	ldi	r24, 0x52	; 82
 d8a:	0e 94 08 04 	call	0x810	; 0x810 <mfrc522_request>
 d8e:	d8 2e       	mov	r13, r24
            
            if(addNext ==1 && tagNumber >2)
 d90:	80 91 02 01 	lds	r24, 0x0102
 d94:	90 91 03 01 	lds	r25, 0x0103
 d98:	03 97       	sbiw	r24, 0x03	; 3
 d9a:	b4 f0       	brlt	.+44     	; 0xdc8 <__stack+0x4c9>
            {
                addNext =0;
                tagNumber =1;
 d9c:	10 93 03 01 	sts	0x0103, r17
 da0:	00 93 02 01 	sts	0x0102, r16
                LCDClear();
 da4:	60 e0       	ldi	r22, 0x00	; 0
 da6:	81 e0       	ldi	r24, 0x01	; 1
 da8:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                LCDWriteString("Full");
 dac:	85 ea       	ldi	r24, 0xA5	; 165
 dae:	91 e0       	ldi	r25, 0x01	; 1
 db0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 db4:	bf ef       	ldi	r27, 0xFF	; 255
 db6:	e9 e6       	ldi	r30, 0x69	; 105
 db8:	f8 e1       	ldi	r31, 0x18	; 24
 dba:	b1 50       	subi	r27, 0x01	; 1
 dbc:	e0 40       	sbci	r30, 0x00	; 0
 dbe:	f0 40       	sbci	r31, 0x00	; 0
 dc0:	e1 f7       	brne	.-8      	; 0xdba <__stack+0x4bb>
 dc2:	00 c0       	rjmp	.+0      	; 0xdc4 <__stack+0x4c5>
 dc4:	00 00       	nop
            LCDWriteStringXY(0, 1, "be added.");
            byte = mfrc522_request(PICC_REQALL,str);
            
            if(addNext ==1 && tagNumber >2)
            {
                addNext =0;
 dc6:	87 01       	movw	r16, r14
                LCDClear();
                LCDWriteString("Full");
                _delay_ms(1000);
                
            }
            if(byte == CARD_FOUND)
 dc8:	21 e0       	ldi	r18, 0x01	; 1
 dca:	d2 12       	cpse	r13, r18
 dcc:	64 c0       	rjmp	.+200    	; 0xe96 <__stack+0x597>
            {
                byte = mfrc522_get_card_serial(str);
 dce:	ce 01       	movw	r24, r28
 dd0:	01 96       	adiw	r24, 0x01	; 1
 dd2:	0e 94 3b 04 	call	0x876	; 0x876 <mfrc522_get_card_serial>
                if(byte == CARD_FOUND)
 dd6:	81 30       	cpi	r24, 0x01	; 1
 dd8:	09 f0       	breq	.+2      	; 0xddc <__stack+0x4dd>
 dda:	5d c0       	rjmp	.+186    	; 0xe96 <__stack+0x597>
 ddc:	ce 01       	movw	r24, r28
 dde:	01 96       	adiw	r24, 0x01	; 1
 de0:	6c 01       	movw	r12, r24
 de2:	22 e0       	ldi	r18, 0x02	; 2
 de4:	32 e0       	ldi	r19, 0x02	; 2
 de6:	e6 e1       	ldi	r30, 0x16	; 22
 de8:	f2 e0       	ldi	r31, 0x02	; 2
 dea:	5c 01       	movw	r10, r24
                {
                    for(int i=0; i<=4; i++){
                        if(str[i] == ram_tag1[i] || str[i]== ram_tag2[i]){
 dec:	d5 01       	movw	r26, r10
 dee:	8d 91       	ld	r24, X+
 df0:	5d 01       	movw	r10, r26
 df2:	d9 01       	movw	r26, r18
 df4:	9d 91       	ld	r25, X+
 df6:	9d 01       	movw	r18, r26
 df8:	89 17       	cp	r24, r25
 dfa:	19 f0       	breq	.+6      	; 0xe02 <__stack+0x503>
 dfc:	90 81       	ld	r25, Z
 dfe:	89 13       	cpse	r24, r25
 e00:	01 c0       	rjmp	.+2      	; 0xe04 <__stack+0x505>
                            addNext =0;//duplicate
 e02:	87 01       	movw	r16, r14
 e04:	31 96       	adiw	r30, 0x01	; 1
            if(byte == CARD_FOUND)
            {
                byte = mfrc522_get_card_serial(str);
                if(byte == CARD_FOUND)
                {
                    for(int i=0; i<=4; i++){
 e06:	a8 14       	cp	r10, r8
 e08:	b9 04       	cpc	r11, r9
 e0a:	81 f7       	brne	.-32     	; 0xdec <__stack+0x4ed>
                        if(str[i] == ram_tag1[i] || str[i]== ram_tag2[i]){
                            addNext =0;//duplicate
                            //not likely to happen but it could
                        }
                    }//end of check if duplicate
                    LCDClear();
 e0c:	60 e0       	ldi	r22, 0x00	; 0
 e0e:	81 e0       	ldi	r24, 0x01	; 1
 e10:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 e14:	bf ef       	ldi	r27, 0xFF	; 255
 e16:	e3 ec       	ldi	r30, 0xC3	; 195
 e18:	f9 e0       	ldi	r31, 0x09	; 9
 e1a:	b1 50       	subi	r27, 0x01	; 1
 e1c:	e0 40       	sbci	r30, 0x00	; 0
 e1e:	f0 40       	sbci	r31, 0x00	; 0
 e20:	e1 f7       	brne	.-8      	; 0xe1a <__stack+0x51b>
 e22:	00 c0       	rjmp	.+0      	; 0xe24 <__stack+0x525>
 e24:	00 00       	nop
                    //LCDWriteString("whyyyyyy");
                    _delay_ms(400);
                    
                    if(tagNumber ==1 && addNext ==1){
 e26:	80 91 02 01 	lds	r24, 0x0102
 e2a:	90 91 03 01 	lds	r25, 0x0103
 e2e:	81 30       	cpi	r24, 0x01	; 1
 e30:	91 05       	cpc	r25, r1
 e32:	d9 f5       	brne	.+118    	; 0xeaa <__stack+0x5ab>
 e34:	01 30       	cpi	r16, 0x01	; 1
 e36:	11 05       	cpc	r17, r1
 e38:	71 f5       	brne	.+92     	; 0xe96 <__stack+0x597>
                        LCDClear();
 e3a:	60 e0       	ldi	r22, 0x00	; 0
 e3c:	81 e0       	ldi	r24, 0x01	; 1
 e3e:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                        LCDWriteString("ADDING CARD 1");
 e42:	8a ea       	ldi	r24, 0xAA	; 170
 e44:	91 e0       	ldi	r25, 0x01	; 1
 e46:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 e4a:	2f ef       	ldi	r18, 0xFF	; 255
 e4c:	89 e6       	ldi	r24, 0x69	; 105
 e4e:	98 e1       	ldi	r25, 0x18	; 24
 e50:	21 50       	subi	r18, 0x01	; 1
 e52:	80 40       	sbci	r24, 0x00	; 0
 e54:	90 40       	sbci	r25, 0x00	; 0
 e56:	e1 f7       	brne	.-8      	; 0xe50 <__stack+0x551>
 e58:	00 c0       	rjmp	.+0      	; 0xe5a <__stack+0x55b>
 e5a:	00 00       	nop
 e5c:	07 e0       	ldi	r16, 0x07	; 7
 e5e:	12 e0       	ldi	r17, 0x02	; 2
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
                            write_eeprom_word(tag1[i], str[i]);
 e60:	d6 01       	movw	r26, r12
 e62:	6d 91       	ld	r22, X+
 e64:	6d 01       	movw	r12, r26
 e66:	f8 01       	movw	r30, r16
 e68:	81 91       	ld	r24, Z+
 e6a:	8f 01       	movw	r16, r30
 e6c:	70 e0       	ldi	r23, 0x00	; 0
 e6e:	90 e0       	ldi	r25, 0x00	; 0
 e70:	0e 94 cf 07 	call	0xf9e	; 0xf9e <eeprom_write_word>
                    
                    if(tagNumber ==1 && addNext ==1){
                        LCDClear();
                        LCDWriteString("ADDING CARD 1");
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
 e74:	ac 14       	cp	r10, r12
 e76:	bd 04       	cpc	r11, r13
 e78:	99 f7       	brne	.-26     	; 0xe60 <__stack+0x561>
                        LCDWriteString("ADDING CARD 2");
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
                            write_eeprom_word(tag2[i], str[i]);
                        }
                        tagNumber++;
 e7a:	80 91 02 01 	lds	r24, 0x0102
 e7e:	90 91 03 01 	lds	r25, 0x0103
 e82:	01 96       	adiw	r24, 0x01	; 1
 e84:	90 93 03 01 	sts	0x0103, r25
 e88:	80 93 02 01 	sts	0x0102, r24
                        addNext = 0;
                        deleteNext =0;
                        LCDClear();
 e8c:	60 e0       	ldi	r22, 0x00	; 0
 e8e:	81 e0       	ldi	r24, 0x01	; 1
 e90:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
                            write_eeprom_word(tag2[i], str[i]);
                        }
                        tagNumber++;
                        addNext = 0;
 e94:	87 01       	movw	r16, r14
                     
                     */
                    
                }//end of if card found
            }
            loadTags();
 e96:	0e 94 a9 02 	call	0x552	; 0x552 <loadTags>
            byte = mfrc522_request(PICC_REQALL,str);
 e9a:	be 01       	movw	r22, r28
 e9c:	6f 5f       	subi	r22, 0xFF	; 255
 e9e:	7f 4f       	sbci	r23, 0xFF	; 255
 ea0:	82 e5       	ldi	r24, 0x52	; 82
 ea2:	0e 94 08 04 	call	0x810	; 0x810 <mfrc522_request>
 ea6:	d8 2e       	mov	r13, r24
 ea8:	a7 cd       	rjmp	.-1202   	; 0x9f8 <__stack+0xf9>
                        addNext =0;
                        deleteNext =0;
                        LCDClear();
                    }
                    
                    else if(tagNumber ==2 && addNext ==1){
 eaa:	02 97       	sbiw	r24, 0x02	; 2
 eac:	a1 f7       	brne	.-24     	; 0xe96 <__stack+0x597>
 eae:	01 30       	cpi	r16, 0x01	; 1
 eb0:	11 05       	cpc	r17, r1
 eb2:	89 f7       	brne	.-30     	; 0xe96 <__stack+0x597>
                        LCDClear();
 eb4:	60 e0       	ldi	r22, 0x00	; 0
 eb6:	81 e0       	ldi	r24, 0x01	; 1
 eb8:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                        LCDWriteString("ADDING CARD 2");
 ebc:	88 eb       	ldi	r24, 0xB8	; 184
 ebe:	91 e0       	ldi	r25, 0x01	; 1
 ec0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 ec4:	ff ef       	ldi	r31, 0xFF	; 255
 ec6:	29 e6       	ldi	r18, 0x69	; 105
 ec8:	88 e1       	ldi	r24, 0x18	; 24
 eca:	f1 50       	subi	r31, 0x01	; 1
 ecc:	20 40       	sbci	r18, 0x00	; 0
 ece:	80 40       	sbci	r24, 0x00	; 0
 ed0:	e1 f7       	brne	.-8      	; 0xeca <__stack+0x5cb>
 ed2:	00 c0       	rjmp	.+0      	; 0xed4 <__stack+0x5d5>
 ed4:	00 00       	nop
 ed6:	01 e1       	ldi	r16, 0x11	; 17
 ed8:	12 e0       	ldi	r17, 0x02	; 2
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
                            write_eeprom_word(tag2[i], str[i]);
 eda:	d6 01       	movw	r26, r12
 edc:	6d 91       	ld	r22, X+
 ede:	6d 01       	movw	r12, r26
 ee0:	f8 01       	movw	r30, r16
 ee2:	81 91       	ld	r24, Z+
 ee4:	8f 01       	movw	r16, r30
 ee6:	70 e0       	ldi	r23, 0x00	; 0
 ee8:	90 e0       	ldi	r25, 0x00	; 0
 eea:	0e 94 cf 07 	call	0xf9e	; 0xf9e <eeprom_write_word>
                    
                    else if(tagNumber ==2 && addNext ==1){
                        LCDClear();
                        LCDWriteString("ADDING CARD 2");
                        _delay_ms(1000);
                        for(int i=0; i<5; i++){
 eee:	ca 14       	cp	r12, r10
 ef0:	db 04       	cpc	r13, r11
 ef2:	99 f7       	brne	.-26     	; 0xeda <__stack+0x5db>
 ef4:	c2 cf       	rjmp	.-124    	; 0xe7a <__stack+0x57b>
                    if(card_display_Delay==1){_delay_ms(1000);}
                }
            }
            else
            { //not a valid card found
                LCDWriteStringXY(0,1,"Error");
 ef6:	61 e0       	ldi	r22, 0x01	; 1
 ef8:	80 e0       	ldi	r24, 0x00	; 0
 efa:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 efe:	86 ec       	ldi	r24, 0xC6	; 198
 f00:	91 e0       	ldi	r25, 0x01	; 1
 f02:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 f06:	94 cd       	rjmp	.-1240   	; 0xa30 <__stack+0x131>
                    LCDWriteString("MATCH");
                    _delay_ms(50);
                    LCDClear();
                    validCard = 1;
                }
                else if(str[k] == ADD[k]){
 f08:	d1 01       	movw	r26, r2
 f0a:	9c 91       	ld	r25, X
 f0c:	89 17       	cp	r24, r25
 f0e:	71 f0       	breq	.+28     	; 0xf2c <__stack+0x62d>
                    //nextTag read add
                    addNext = 1; //add the next tag
                    
                } //end of add
                else if(str[k] == DELETE[k]){
 f10:	ed 89       	ldd	r30, Y+21	; 0x15
 f12:	fe 89       	ldd	r31, Y+22	; 0x16
 f14:	90 81       	ld	r25, Z
 f16:	89 17       	cp	r24, r25
 f18:	69 f0       	breq	.+26     	; 0xf34 <__stack+0x635>
                    deleteNext =1;
                }
                else{
                    validCard = -1;
 f1a:	8f ef       	ldi	r24, 0xFF	; 255
 f1c:	9f ef       	ldi	r25, 0xFF	; 255
 f1e:	90 93 05 01 	sts	0x0105, r25
 f22:	80 93 04 01 	sts	0x0104, r24
                    deleteNext = 0;
 f26:	78 01       	movw	r14, r16
                    addNext = 0;
 f28:	58 01       	movw	r10, r16
 f2a:	01 ce       	rjmp	.-1022   	; 0xb2e <__stack+0x22f>
                    LCDClear();
                    validCard = 1;
                }
                else if(str[k] == ADD[k]){
                    //nextTag read add
                    addNext = 1; //add the next tag
 f2c:	aa 24       	eor	r10, r10
 f2e:	a3 94       	inc	r10
 f30:	b1 2c       	mov	r11, r1
 f32:	fd cd       	rjmp	.-1030   	; 0xb2e <__stack+0x22f>
                    
                } //end of add
                else if(str[k] == DELETE[k]){
                    deleteNext =1;
 f34:	ee 24       	eor	r14, r14
 f36:	e3 94       	inc	r14
 f38:	f1 2c       	mov	r15, r1
 f3a:	f9 cd       	rjmp	.-1038   	; 0xb2e <__stack+0x22f>
 f3c:	78 01       	movw	r14, r16
 f3e:	58 01       	movw	r10, r16
 f40:	6b ce       	rjmp	.-810    	; 0xc18 <__stack+0x319>

00000f42 <__divmodhi4>:
 f42:	97 fb       	bst	r25, 7
 f44:	07 2e       	mov	r0, r23
 f46:	16 f4       	brtc	.+4      	; 0xf4c <__divmodhi4+0xa>
 f48:	00 94       	com	r0
 f4a:	07 d0       	rcall	.+14     	; 0xf5a <__divmodhi4_neg1>
 f4c:	77 fd       	sbrc	r23, 7
 f4e:	09 d0       	rcall	.+18     	; 0xf62 <__divmodhi4_neg2>
 f50:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__udivmodhi4>
 f54:	07 fc       	sbrc	r0, 7
 f56:	05 d0       	rcall	.+10     	; 0xf62 <__divmodhi4_neg2>
 f58:	3e f4       	brtc	.+14     	; 0xf68 <__divmodhi4_exit>

00000f5a <__divmodhi4_neg1>:
 f5a:	90 95       	com	r25
 f5c:	81 95       	neg	r24
 f5e:	9f 4f       	sbci	r25, 0xFF	; 255
 f60:	08 95       	ret

00000f62 <__divmodhi4_neg2>:
 f62:	70 95       	com	r23
 f64:	61 95       	neg	r22
 f66:	7f 4f       	sbci	r23, 0xFF	; 255

00000f68 <__divmodhi4_exit>:
 f68:	08 95       	ret

00000f6a <__udivmodhi4>:
 f6a:	aa 1b       	sub	r26, r26
 f6c:	bb 1b       	sub	r27, r27
 f6e:	51 e1       	ldi	r21, 0x11	; 17
 f70:	07 c0       	rjmp	.+14     	; 0xf80 <__udivmodhi4_ep>

00000f72 <__udivmodhi4_loop>:
 f72:	aa 1f       	adc	r26, r26
 f74:	bb 1f       	adc	r27, r27
 f76:	a6 17       	cp	r26, r22
 f78:	b7 07       	cpc	r27, r23
 f7a:	10 f0       	brcs	.+4      	; 0xf80 <__udivmodhi4_ep>
 f7c:	a6 1b       	sub	r26, r22
 f7e:	b7 0b       	sbc	r27, r23

00000f80 <__udivmodhi4_ep>:
 f80:	88 1f       	adc	r24, r24
 f82:	99 1f       	adc	r25, r25
 f84:	5a 95       	dec	r21
 f86:	a9 f7       	brne	.-22     	; 0xf72 <__udivmodhi4_loop>
 f88:	80 95       	com	r24
 f8a:	90 95       	com	r25
 f8c:	bc 01       	movw	r22, r24
 f8e:	cd 01       	movw	r24, r26
 f90:	08 95       	ret

00000f92 <eeprom_read_word>:
 f92:	a8 e1       	ldi	r26, 0x18	; 24
 f94:	b0 e0       	ldi	r27, 0x00	; 0
 f96:	42 e0       	ldi	r20, 0x02	; 2
 f98:	50 e0       	ldi	r21, 0x00	; 0
 f9a:	0c 94 d6 07 	jmp	0xfac	; 0xfac <eeprom_read_blraw>

00000f9e <eeprom_write_word>:
 f9e:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <eeprom_write_byte>
 fa2:	27 2f       	mov	r18, r23
 fa4:	0c 94 e5 07 	jmp	0xfca	; 0xfca <eeprom_write_r18>

00000fa8 <eeprom_read_block>:
 fa8:	dc 01       	movw	r26, r24
 faa:	cb 01       	movw	r24, r22

00000fac <eeprom_read_blraw>:
 fac:	fc 01       	movw	r30, r24
 fae:	f9 99       	sbic	0x1f, 1	; 31
 fb0:	fe cf       	rjmp	.-4      	; 0xfae <eeprom_read_blraw+0x2>
 fb2:	06 c0       	rjmp	.+12     	; 0xfc0 <eeprom_read_blraw+0x14>
 fb4:	f2 bd       	out	0x22, r31	; 34
 fb6:	e1 bd       	out	0x21, r30	; 33
 fb8:	f8 9a       	sbi	0x1f, 0	; 31
 fba:	31 96       	adiw	r30, 0x01	; 1
 fbc:	00 b4       	in	r0, 0x20	; 32
 fbe:	0d 92       	st	X+, r0
 fc0:	41 50       	subi	r20, 0x01	; 1
 fc2:	50 40       	sbci	r21, 0x00	; 0
 fc4:	b8 f7       	brcc	.-18     	; 0xfb4 <eeprom_read_blraw+0x8>
 fc6:	08 95       	ret

00000fc8 <eeprom_write_byte>:
 fc8:	26 2f       	mov	r18, r22

00000fca <eeprom_write_r18>:
 fca:	f9 99       	sbic	0x1f, 1	; 31
 fcc:	fe cf       	rjmp	.-4      	; 0xfca <eeprom_write_r18>
 fce:	1f ba       	out	0x1f, r1	; 31
 fd0:	92 bd       	out	0x22, r25	; 34
 fd2:	81 bd       	out	0x21, r24	; 33
 fd4:	20 bd       	out	0x20, r18	; 32
 fd6:	0f b6       	in	r0, 0x3f	; 63
 fd8:	f8 94       	cli
 fda:	fa 9a       	sbi	0x1f, 2	; 31
 fdc:	f9 9a       	sbi	0x1f, 1	; 31
 fde:	0f be       	out	0x3f, r0	; 63
 fe0:	01 96       	adiw	r24, 0x01	; 1
 fe2:	08 95       	ret

00000fe4 <_exit>:
 fe4:	f8 94       	cli

00000fe6 <__stop_program>:
 fe6:	ff cf       	rjmp	.-2      	; 0xfe6 <__stop_program>
