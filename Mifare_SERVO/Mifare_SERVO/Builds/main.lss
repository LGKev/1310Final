
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800100  00000a40  00000ad4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  0080018a  0080018a  00000b5e  2**0
                  ALLOC
  3 .stab         0000267c  00000000  00000000  00000b60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012bb  00000000  00000000  000031dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004497  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000044a8  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  000044e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00004adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  0000507e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  0000509b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 38       	cpi	r26, 0x8A	; 138
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e8       	ldi	r26, 0x8A	; 138
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 3c       	cpi	r26, 0xCA	; 202
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 48 03 	call	0x690	; 0x690 <main>
  9e:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	80 7f       	andi	r24, 0xF0	; 240
  aa:	8a b9       	out	0x0a, r24	; 10

	//change LCD mode
	SET_RW();		//Read mode
  ac:	5e 9a       	sbi	0x0b, 6	; 11
	CLEAR_RS();		//Read status
  ae:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCDBusyLoop+0xc>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <LCDBusyLoop+0xe>

	
	do
	{

		SET_E();
  b4:	5c 9a       	sbi	0x0b, 4	; 11
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <LCDBusyLoop+0x12>
  b8:	00 c0       	rjmp	.+0      	; 0xba <LCDBusyLoop+0x14>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
  ba:	89 b1       	in	r24, 0x09	; 9
		status=status<<4;
  bc:	82 95       	swap	r24
  be:	80 7f       	andi	r24, 0xF0	; 240
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <LCDBusyLoop+0x1c>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <LCDBusyLoop+0x1e>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  c4:	5c 98       	cbi	0x0b, 4	; 11
  c6:	92 e0       	ldi	r25, 0x02	; 2
  c8:	9a 95       	dec	r25
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCDBusyLoop+0x22>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LCDBusyLoop+0x28>
		_delay_us(1);	//tEL

		SET_E();
  ce:	5c 9a       	sbi	0x0b, 4	; 11
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCDBusyLoop+0x2c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCDBusyLoop+0x2e>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
  d4:	99 b1       	in	r25, 0x09	; 9
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <LCDBusyLoop+0x32>
  d8:	00 c0       	rjmp	.+0      	; 0xda <LCDBusyLoop+0x34>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
  da:	5c 98       	cbi	0x0b, 4	; 11
  dc:	92 e0       	ldi	r25, 0x02	; 2
  de:	9a 95       	dec	r25
  e0:	f1 f7       	brne	.-4      	; 0xde <LCDBusyLoop+0x38>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCDBusyLoop+0x3e>
		_delay_us(1);	//tEL
	}while(busy);
  e4:	87 fd       	sbrc	r24, 7
  e6:	e6 cf       	rjmp	.-52     	; 0xb4 <LCDBusyLoop+0xe>

	CLEAR_RW();		//write mode
  e8:	5e 98       	cbi	0x0b, 6	; 11
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
  ea:	8a b1       	in	r24, 0x0a	; 10
  ec:	8f 60       	ori	r24, 0x0F	; 15
  ee:	8a b9       	out	0x0a, r24	; 10
  f0:	08 95       	ret

000000f2 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
  f2:	38 2f       	mov	r19, r24
  f4:	32 95       	swap	r19
  f6:	3f 70       	andi	r19, 0x0F	; 15
ln=(c & 0x0F);
  f8:	28 2f       	mov	r18, r24
  fa:	2f 70       	andi	r18, 0x0F	; 15

if(isdata==0)
  fc:	61 11       	cpse	r22, r1
  fe:	21 c0       	rjmp	.+66     	; 0x142 <LCDByte+0x50>
	CLEAR_RS();
 100:	5d 98       	cbi	0x0b, 5	; 11
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCDByte+0x12>
 104:	00 c0       	rjmp	.+0      	; 0x106 <LCDByte+0x14>
else
	SET_RS();

_delay_us(0.500);		//tAS

SET_E();
 106:	5c 9a       	sbi	0x0b, 4	; 11

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 108:	9b b1       	in	r25, 0x0b	; 11
 10a:	90 7f       	andi	r25, 0xF0	; 240
 10c:	93 2b       	or	r25, r19
LCD_DATA_PORT=temp;
 10e:	9b b9       	out	0x0b, r25	; 11
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	8a 95       	dec	r24
 114:	f1 f7       	brne	.-4      	; 0x112 <LCDByte+0x20>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 118:	5c 98       	cbi	0x0b, 4	; 11
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	8a 95       	dec	r24
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCDByte+0x2a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCDByte+0x30>

_delay_us(1);

//Send the lower nibble
SET_E();
 122:	5c 9a       	sbi	0x0b, 4	; 11

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	82 2b       	or	r24, r18

LCD_DATA_PORT=temp;
 12a:	8b b9       	out	0x0b, r24	; 11
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	8a 95       	dec	r24
 130:	f1 f7       	brne	.-4      	; 0x12e <LCDByte+0x3c>
 132:	00 c0       	rjmp	.+0      	; 0x134 <LCDByte+0x42>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 134:	5c 98       	cbi	0x0b, 4	; 11
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCDByte+0x46>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCDByte+0x4c>

_delay_us(1);			//tEL

LCDBusyLoop();
 13e:	0c 94 53 00 	jmp	0xa6	; 0xa6 <LCDBusyLoop>
ln=(c & 0x0F);

if(isdata==0)
	CLEAR_RS();
else
	SET_RS();
 142:	5d 9a       	sbi	0x0b, 5	; 11
 144:	de cf       	rjmp	.-68     	; 0x102 <LCDByte+0x10>

00000146 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	8f e5       	ldi	r24, 0x5F	; 95
 14c:	9a ee       	ldi	r25, 0xEA	; 234
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <LCDInit+0x8>
 152:	00 c0       	rjmp	.+0      	; 0x154 <LCDInit+0xe>
 154:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 156:	8a b1       	in	r24, 0x0a	; 10
 158:	8f 60       	ori	r24, 0x0F	; 15
 15a:	8a b9       	out	0x0a, r24	; 10
	LCD_E_DDR|=(1<<LCD_E_POS);
 15c:	54 9a       	sbi	0x0a, 4	; 10
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 15e:	55 9a       	sbi	0x0a, 5	; 10
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 160:	56 9a       	sbi	0x0a, 6	; 10

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 162:	8b b1       	in	r24, 0x0b	; 11
 164:	80 7f       	andi	r24, 0xF0	; 240
 166:	8b b9       	out	0x0b, r24	; 11
	CLEAR_E();
 168:	5c 98       	cbi	0x0b, 4	; 11
	CLEAR_RW();
 16a:	5e 98       	cbi	0x0b, 6	; 11
	CLEAR_RS();
 16c:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCDInit+0x2a>
 170:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 172:	5c 9a       	sbi	0x0b, 4	; 11
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 174:	59 9a       	sbi	0x0b, 1	; 11
 176:	92 e0       	ldi	r25, 0x02	; 2
 178:	9a 95       	dec	r25
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCDInit+0x32>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCDInit+0x38>
	_delay_us(1);
	CLEAR_E();
 17e:	5c 98       	cbi	0x0b, 4	; 11
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	8a 95       	dec	r24
 184:	f1 f7       	brne	.-4      	; 0x182 <LCDInit+0x3c>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LCDInit+0x42>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 188:	0e 94 53 00 	call	0xa6	; 0xa6 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	8c 2f       	mov	r24, r28
 190:	8c 60       	ori	r24, 0x0C	; 12
 192:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	88 e2       	ldi	r24, 0x28	; 40
 19a:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	80 e8       	ldi	r24, 0x80	; 128
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format

	
	LCDGotoXY(0,0);

}
 1a2:	cf 91       	pop	r28
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 1a4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <LCDByte>

000001a8 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	ec 01       	movw	r28, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 1b2:	88 81       	ld	r24, Y
 1b4:	81 11       	cpse	r24, r1
 1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <LCDWriteString+0x1a>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	08 95       	ret

	*****************************************************************/
 while(*msg!='\0')
 {
 	//Custom Char Support
	if(*msg=='%')
 1c2:	85 32       	cpi	r24, 0x25	; 37
 1c4:	99 f4       	brne	.+38     	; 0x1ec <LCDWriteString+0x44>
	{
		msg++;
 1c6:	8e 01       	movw	r16, r28
 1c8:	0f 5f       	subi	r16, 0xFF	; 255
 1ca:	1f 4f       	sbci	r17, 0xFF	; 255
		int8_t cc=*msg-'0';
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
		{
			LCDData(cc);
 1d0:	61 e0       	ldi	r22, 0x01	; 1
	if(*msg=='%')
	{
		msg++;
		int8_t cc=*msg-'0';

		if(cc>=0 && cc<=7)
 1d2:	88 30       	cpi	r24, 0x08	; 8
 1d4:	28 f4       	brcc	.+10     	; 0x1e0 <LCDWriteString+0x38>
			LCDData(cc);
		}
		else
		{
			LCDData('%');
			LCDData(*msg);
 1d6:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	}
	else
	{
		LCDData(*msg);
	}
	msg++;
 1da:	e8 01       	movw	r28, r16
 1dc:	21 96       	adiw	r28, 0x01	; 1
 1de:	e9 cf       	rjmp	.-46     	; 0x1b2 <LCDWriteString+0xa>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 1e0:	85 e2       	ldi	r24, 0x25	; 37
 1e2:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
			LCDData(*msg);
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	f5 cf       	rjmp	.-22     	; 0x1d6 <LCDWriteString+0x2e>
		}
	}
	else
	{
		LCDData(*msg);
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 1f2:	8e 01       	movw	r16, r28
 1f4:	f2 cf       	rjmp	.-28     	; 0x1da <LCDWriteString+0x32>

000001f6 <LCDWriteInt>:
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
{
 1f6:	ef 92       	push	r14
 1f8:	ff 92       	push	r15
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	00 d0       	rcall	.+0      	; 0x204 <LCDWriteInt+0xe>
 204:	00 d0       	rcall	.+0      	; 0x206 <LCDWriteInt+0x10>
 206:	1f 92       	push	r1
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	9b 01       	movw	r18, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 20e:	ae 01       	movw	r20, r28
 210:	4f 5f       	subi	r20, 0xFF	; 255
 212:	5f 4f       	sbci	r21, 0xFF	; 255
 214:	7a 01       	movw	r14, r20
 216:	45 e0       	ldi	r20, 0x05	; 5
 218:	f7 01       	movw	r30, r14
 21a:	11 92       	st	Z+, r1
 21c:	4a 95       	dec	r20
 21e:	e9 f7       	brne	.-6      	; 0x21a <LCDWriteInt+0x24>
 220:	fe 01       	movw	r30, r28
 222:	36 96       	adiw	r30, 0x06	; 6
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 224:	0a e0       	ldi	r16, 0x0A	; 10
 226:	10 e0       	ldi	r17, 0x00	; 0

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 228:	00 97       	sbiw	r24, 0x00	; 0
 22a:	f1 f4       	brne	.+60     	; 0x268 <LCDWriteInt+0x72>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 22c:	2f 3f       	cpi	r18, 0xFF	; 255
 22e:	ff ef       	ldi	r31, 0xFF	; 255
 230:	3f 07       	cpc	r19, r31
 232:	01 f5       	brne	.+64     	; 0x274 <LCDWriteInt+0x7e>
 234:	f7 01       	movw	r30, r14
 236:	8f 01       	movw	r16, r30
 238:	0e 19       	sub	r16, r14
 23a:	1f 09       	sbc	r17, r15
		while(str[j]==0) j++;
 23c:	81 91       	ld	r24, Z+
 23e:	88 23       	and	r24, r24
 240:	d1 f3       	breq	.-12     	; 0x236 <LCDWriteInt+0x40>
 242:	0e 0d       	add	r16, r14
 244:	1f 1d       	adc	r17, r15
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 246:	c8 01       	movw	r24, r16
 248:	8e 19       	sub	r24, r14
 24a:	9f 09       	sbc	r25, r15
 24c:	05 97       	sbiw	r24, 0x05	; 5
 24e:	bc f0       	brlt	.+46     	; 0x27e <LCDWriteInt+0x88>
	{
	LCDData(48+str[i]);
	}
}
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	1f 91       	pop	r17
 260:	0f 91       	pop	r16
 262:	ff 90       	pop	r15
 264:	ef 90       	pop	r14
 266:	08 95       	ret

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 268:	b8 01       	movw	r22, r16
 26a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__divmodhi4>
 26e:	82 93       	st	-Z, r24
	val=val/10;
 270:	cb 01       	movw	r24, r22
 272:	da cf       	rjmp	.-76     	; 0x228 <LCDWriteInt+0x32>
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
	else
		j=5-field_length;
 274:	05 e0       	ldi	r16, 0x05	; 5
 276:	10 e0       	ldi	r17, 0x00	; 0
 278:	02 1b       	sub	r16, r18
 27a:	13 0b       	sbc	r17, r19
 27c:	e2 cf       	rjmp	.-60     	; 0x242 <LCDWriteInt+0x4c>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 27e:	f8 01       	movw	r30, r16
 280:	81 91       	ld	r24, Z+
 282:	8f 01       	movw	r16, r30
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	80 5d       	subi	r24, 0xD0	; 208
 288:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 28c:	dc cf       	rjmp	.-72     	; 0x246 <LCDWriteInt+0x50>

0000028e <LCDGotoXY>:
	}
}
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 28e:	84 31       	cpi	r24, 0x14	; 20
 290:	78 f4       	brcc	.+30     	; 0x2b0 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
 292:	62 30       	cpi	r22, 0x02	; 2
 294:	49 f0       	breq	.+18     	; 0x2a8 <LCDGotoXY+0x1a>
 296:	63 30       	cpi	r22, 0x03	; 3
 298:	49 f0       	breq	.+18     	; 0x2ac <LCDGotoXY+0x1e>
 29a:	61 30       	cpi	r22, 0x01	; 1
 29c:	09 f4       	brne	.+2      	; 0x2a0 <LCDGotoXY+0x12>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 29e:	80 64       	ori	r24, 0x40	; 64
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	80 68       	ori	r24, 0x80	; 128
 2a4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <LCDByte>
			break;
		case 1:
			x|=0b01000000;
			break;
		case 2:
			x+=0x14;
 2a8:	8c 5e       	subi	r24, 0xEC	; 236
 2aa:	fa cf       	rjmp	.-12     	; 0x2a0 <LCDGotoXY+0x12>
			break;
		case 3:
			x+=0x54;
 2ac:	8c 5a       	subi	r24, 0xAC	; 172
 2ae:	f8 cf       	rjmp	.-16     	; 0x2a0 <LCDGotoXY+0x12>
 2b0:	08 95       	ret

000002b2 <LCDHexDumpXY>:
}



void LCDHexDumpXY(uint8_t x, uint8_t y,uint8_t d)
{
 2b2:	cf 93       	push	r28
 2b4:	c4 2f       	mov	r28, r20
	LCDGotoXY(x,y);
 2b6:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
	uint8_t byte = '0';
	(((d>>4)&0x0F)<=9) ? (byte='0'+((d>>4)&0x0F)) : (byte='A'+ ((d>>4)&0x0F)-0x0A);
 2ba:	8c 2f       	mov	r24, r28
 2bc:	82 95       	swap	r24
 2be:	8f 70       	andi	r24, 0x0F	; 15
 2c0:	8a 30       	cpi	r24, 0x0A	; 10
 2c2:	88 f4       	brcc	.+34     	; 0x2e6 <LCDHexDumpXY+0x34>
 2c4:	80 5d       	subi	r24, 0xD0	; 208
	LCDByte(byte,1);
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	LCDBusyLoop();
 2cc:	0e 94 53 00 	call	0xa6	; 0xa6 <LCDBusyLoop>
 2d0:	8c 2f       	mov	r24, r28
 2d2:	8f 70       	andi	r24, 0x0F	; 15
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
 2d4:	8a 30       	cpi	r24, 0x0A	; 10
 2d6:	48 f4       	brcc	.+18     	; 0x2ea <LCDHexDumpXY+0x38>
 2d8:	80 5d       	subi	r24, 0xD0	; 208
	LCDByte(byte,1);
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	LCDBusyLoop();
}
 2e0:	cf 91       	pop	r28
	LCDByte(byte,1);
	LCDBusyLoop();
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
	LCDByte(byte,1);
	LCDBusyLoop();
 2e2:	0c 94 53 00 	jmp	0xa6	; 0xa6 <LCDBusyLoop>

void LCDHexDumpXY(uint8_t x, uint8_t y,uint8_t d)
{
	LCDGotoXY(x,y);
	uint8_t byte = '0';
	(((d>>4)&0x0F)<=9) ? (byte='0'+((d>>4)&0x0F)) : (byte='A'+ ((d>>4)&0x0F)-0x0A);
 2e6:	89 5c       	subi	r24, 0xC9	; 201
 2e8:	ee cf       	rjmp	.-36     	; 0x2c6 <LCDHexDumpXY+0x14>
	LCDByte(byte,1);
	LCDBusyLoop();
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
 2ea:	89 5c       	subi	r24, 0xC9	; 201
 2ec:	f6 cf       	rjmp	.-20     	; 0x2da <LCDHexDumpXY+0x28>

000002ee <open.1831>:
        PORTC   ^=BV(5);
        _delay_us(19000);
    }
    
    int open(void){
        PORTC = (BV(5));
 2ee:	80 e2       	ldi	r24, 0x20	; 32
 2f0:	88 b9       	out	0x08, r24	; 8
 2f2:	ef e9       	ldi	r30, 0x9F	; 159
 2f4:	ff e0       	ldi	r31, 0x0F	; 15
 2f6:	31 97       	sbiw	r30, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <open.1831+0x8>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <open.1831+0xe>
 2fc:	00 00       	nop
        _delay_us(2000);
        PORTC   ^=BV(5);
 2fe:	98 b1       	in	r25, 0x08	; 8
 300:	98 27       	eor	r25, r24
 302:	98 b9       	out	0x08, r25	; 8
 304:	ef e9       	ldi	r30, 0x9F	; 159
 306:	fc e8       	ldi	r31, 0x8C	; 140
 308:	31 97       	sbiw	r30, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <open.1831+0x1a>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <open.1831+0x20>
 30e:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 310:	ff ef       	ldi	r31, 0xFF	; 255
 312:	27 ea       	ldi	r18, 0xA7	; 167
 314:	31 e6       	ldi	r19, 0x61	; 97
 316:	f1 50       	subi	r31, 0x01	; 1
 318:	20 40       	sbci	r18, 0x00	; 0
 31a:	30 40       	sbci	r19, 0x00	; 0
 31c:	e1 f7       	brne	.-8      	; 0x316 <open.1831+0x28>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <open.1831+0x32>
 320:	00 00       	nop
        _delay_us(18000);
        
        _delay_ms(4000);
        
        
        PORTC = (BV(5));
 322:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 324:	ef ec       	ldi	r30, 0xCF	; 207
 326:	f7 e0       	ldi	r31, 0x07	; 7
 328:	31 97       	sbiw	r30, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <open.1831+0x3a>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <open.1831+0x40>
 32e:	00 00       	nop
        _delay_us(1000);
        PORTC   ^=BV(5);
 330:	98 b1       	in	r25, 0x08	; 8
 332:	89 27       	eor	r24, r25
 334:	88 b9       	out	0x08, r24	; 8
 336:	8f e6       	ldi	r24, 0x6F	; 111
 338:	94 e9       	ldi	r25, 0x94	; 148
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <open.1831+0x4c>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <open.1831+0x52>
 340:	00 00       	nop
        _delay_us(19000);
        
        return 1;
    }
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	08 95       	ret

00000348 <mfrc522_write>:
		mfrc522_write(TxControlReg,byte|0x03);
	}
}

void mfrc522_write(uint8_t reg, uint8_t data)
{
 348:	cf 93       	push	r28
 34a:	c6 2f       	mov	r28, r22
	ENABLE_CHIP();
 34c:	2a 98       	cbi	0x05, 2	; 5
	spi_transmit((reg<<1)&0x7E);
 34e:	88 0f       	add	r24, r24
 350:	8e 77       	andi	r24, 0x7E	; 126
 352:	0e 94 42 03 	call	0x684	; 0x684 <spi_transmit>
	spi_transmit(data);
 356:	8c 2f       	mov	r24, r28
 358:	0e 94 42 03 	call	0x684	; 0x684 <spi_transmit>
	DISABLE_CHIP();
 35c:	2a 9a       	sbi	0x05, 2	; 5
}
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <mfrc522_read>:

uint8_t mfrc522_read(uint8_t reg)
{
	uint8_t data;	
	ENABLE_CHIP();
 362:	2a 98       	cbi	0x05, 2	; 5
	spi_transmit(((reg<<1)&0x7E)|0x80);
 364:	88 0f       	add	r24, r24
 366:	8e 77       	andi	r24, 0x7E	; 126
 368:	80 68       	ori	r24, 0x80	; 128
 36a:	0e 94 42 03 	call	0x684	; 0x684 <spi_transmit>
	data = spi_transmit(0x00);
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	0e 94 42 03 	call	0x684	; 0x684 <spi_transmit>
	DISABLE_CHIP();
 374:	2a 9a       	sbi	0x05, 2	; 5
	return data;
}
 376:	08 95       	ret

00000378 <mfrc522_reset>:

void mfrc522_reset()
{
	mfrc522_write(CommandReg,SoftReset_CMD);
 378:	6f e0       	ldi	r22, 0x0F	; 15
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	0c 94 a4 01 	jmp	0x348	; 0x348 <mfrc522_write>

00000380 <mfrc522_init>:
#endif

void mfrc522_init()
{
	uint8_t byte;
	mfrc522_reset();
 380:	0e 94 bc 01 	call	0x378	; 0x378 <mfrc522_reset>
	
	mfrc522_write(TModeReg, 0x8D);
 384:	6d e8       	ldi	r22, 0x8D	; 141
 386:	8a e2       	ldi	r24, 0x2A	; 42
 388:	0e 94 a4 01 	call	0x348	; 0x348 <mfrc522_write>
    mfrc522_write(TPrescalerReg, 0x3E);
 38c:	6e e3       	ldi	r22, 0x3E	; 62
 38e:	8b e2       	ldi	r24, 0x2B	; 43
 390:	0e 94 a4 01 	call	0x348	; 0x348 <mfrc522_write>
    mfrc522_write(TReloadReg_1, 30);   
 394:	6e e1       	ldi	r22, 0x1E	; 30
 396:	8c e2       	ldi	r24, 0x2C	; 44
 398:	0e 94 a4 01 	call	0x348	; 0x348 <mfrc522_write>
    mfrc522_write(TReloadReg_2, 0);	
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	8d e2       	ldi	r24, 0x2D	; 45
 3a0:	0e 94 a4 01 	call	0x348	; 0x348 <mfrc522_write>
	mfrc522_write(TxASKReg, 0x40);	
 3a4:	60 e4       	ldi	r22, 0x40	; 64
 3a6:	85 e1       	ldi	r24, 0x15	; 21
 3a8:	0e 94 a4 01 	call	0x348	; 0x348 <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D);
 3ac:	6d e3       	ldi	r22, 0x3D	; 61
 3ae:	81 e1       	ldi	r24, 0x11	; 17
 3b0:	0e 94 a4 01 	call	0x348	; 0x348 <mfrc522_write>
	
	byte = mfrc522_read(TxControlReg);
 3b4:	84 e1       	ldi	r24, 0x14	; 20
 3b6:	0e 94 b1 01 	call	0x362	; 0x362 <mfrc522_read>
	if(!(byte&0x03))
 3ba:	98 2f       	mov	r25, r24
 3bc:	93 70       	andi	r25, 0x03	; 3
 3be:	29 f4       	brne	.+10     	; 0x3ca <mfrc522_init+0x4a>
	{
		mfrc522_write(TxControlReg,byte|0x03);
 3c0:	68 2f       	mov	r22, r24
 3c2:	63 60       	ori	r22, 0x03	; 3
 3c4:	84 e1       	ldi	r24, 0x14	; 20
 3c6:	0c 94 a4 01 	jmp	0x348	; 0x348 <mfrc522_write>
 3ca:	08 95       	ret

000003cc <mfrc522_to_card>:
   
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
 3cc:	3f 92       	push	r3
 3ce:	4f 92       	push	r4
 3d0:	5f 92       	push	r5
 3d2:	6f 92       	push	r6
 3d4:	7f 92       	push	r7
 3d6:	8f 92       	push	r8
 3d8:	9f 92       	push	r9
 3da:	af 92       	push	r10
 3dc:	bf 92       	push	r11
 3de:	cf 92       	push	r12
 3e0:	df 92       	push	r13
 3e2:	ef 92       	push	r14
 3e4:	ff 92       	push	r15
 3e6:	0f 93       	push	r16
 3e8:	1f 93       	push	r17
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	d8 2e       	mov	r13, r24
 3f0:	5b 01       	movw	r10, r22
 3f2:	84 2e       	mov	r8, r20
 3f4:	79 01       	movw	r14, r18
 3f6:	e8 01       	movw	r28, r16
    uint8_t lastBits;
    uint8_t n;
    uint8_t	tmp;
    uint32_t i;

    switch (cmd)
 3f8:	8c e0       	ldi	r24, 0x0C	; 12
 3fa:	d8 16       	cp	r13, r24
 3fc:	09 f4       	brne	.+2      	; 0x400 <mfrc522_to_card+0x34>
 3fe:	6b c0       	rjmp	.+214    	; 0x4d6 <mfrc522_to_card+0x10a>
 400:	ee e0       	ldi	r30, 0x0E	; 14
 402:	de 16       	cp	r13, r30
 404:	09 f4       	brne	.+2      	; 0x408 <mfrc522_to_card+0x3c>
 406:	6c c0       	rjmp	.+216    	; 0x4e0 <mfrc522_to_card+0x114>

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
 408:	31 2c       	mov	r3, r1
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
 40a:	c1 2c       	mov	r12, r1
		default:
			break;
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
 40c:	84 e0       	ldi	r24, 0x04	; 4
 40e:	0e 94 b1 01 	call	0x362	; 0x362 <mfrc522_read>
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
 412:	68 2f       	mov	r22, r24
 414:	6f 77       	andi	r22, 0x7F	; 127
 416:	84 e0       	ldi	r24, 0x04	; 4
 418:	0e 94 a4 01 	call	0x348	; 0x348 <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
 41c:	8a e0       	ldi	r24, 0x0A	; 10
 41e:	0e 94 b1 01 	call	0x362	; 0x362 <mfrc522_read>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
 422:	68 2f       	mov	r22, r24
 424:	60 68       	ori	r22, 0x80	; 128
 426:	8a e0       	ldi	r24, 0x0A	; 10
 428:	0e 94 a4 01 	call	0x348	; 0x348 <mfrc522_write>
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	0e 94 a4 01 	call	0x348	; 0x348 <mfrc522_write>
 434:	85 01       	movw	r16, r10

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 436:	41 2c       	mov	r4, r1
 438:	51 2c       	mov	r5, r1
 43a:	32 01       	movw	r6, r4
 43c:	91 2c       	mov	r9, r1
 43e:	a1 2c       	mov	r10, r1
 440:	b1 2c       	mov	r11, r1
 442:	48 14       	cp	r4, r8
 444:	59 04       	cpc	r5, r9
 446:	6a 04       	cpc	r6, r10
 448:	7b 04       	cpc	r7, r11
 44a:	08 f4       	brcc	.+2      	; 0x44e <mfrc522_to_card+0x82>
 44c:	4e c0       	rjmp	.+156    	; 0x4ea <mfrc522_to_card+0x11e>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
 44e:	6d 2d       	mov	r22, r13
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	0e 94 a4 01 	call	0x348	; 0x348 <mfrc522_write>
    if (cmd == Transceive_CMD)
 456:	8c e0       	ldi	r24, 0x0C	; 12
 458:	d8 12       	cpse	r13, r24
 45a:	08 c0       	rjmp	.+16     	; 0x46c <mfrc522_to_card+0xa0>
    {    
		n=mfrc522_read(BitFramingReg);
 45c:	8d e0       	ldi	r24, 0x0D	; 13
 45e:	0e 94 b1 01 	call	0x362	; 0x362 <mfrc522_read>
		mfrc522_write(BitFramingReg,n|0x80);  
 462:	68 2f       	mov	r22, r24
 464:	60 68       	ori	r22, 0x80	; 128
 466:	8d e0       	ldi	r24, 0x0D	; 13
 468:	0e 94 a4 01 	call	0x348	; 0x348 <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 46c:	40 ed       	ldi	r20, 0xD0	; 208
 46e:	84 2e       	mov	r8, r20
 470:	47 e0       	ldi	r20, 0x07	; 7
 472:	94 2e       	mov	r9, r20
 474:	a1 2c       	mov	r10, r1
 476:	b1 2c       	mov	r11, r1
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
        i--;
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 478:	13 2d       	mov	r17, r3
 47a:	11 60       	ori	r17, 0x01	; 1
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
 47c:	84 e0       	ldi	r24, 0x04	; 4
 47e:	0e 94 b1 01 	call	0x362	; 0x362 <mfrc522_read>
 482:	08 2f       	mov	r16, r24
        i--;
 484:	e1 e0       	ldi	r30, 0x01	; 1
 486:	8e 1a       	sub	r8, r30
 488:	91 08       	sbc	r9, r1
 48a:	a1 08       	sbc	r10, r1
 48c:	b1 08       	sbc	r11, r1
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 48e:	19 f0       	breq	.+6      	; 0x496 <mfrc522_to_card+0xca>
 490:	81 2f       	mov	r24, r17
 492:	80 23       	and	r24, r16
 494:	99 f3       	breq	.-26     	; 0x47c <mfrc522_to_card+0xb0>

	tmp=mfrc522_read(BitFramingReg);
 496:	8d e0       	ldi	r24, 0x0D	; 13
 498:	0e 94 b1 01 	call	0x362	; 0x362 <mfrc522_read>
	mfrc522_write(BitFramingReg,tmp&(~0x80));
 49c:	68 2f       	mov	r22, r24
 49e:	6f 77       	andi	r22, 0x7F	; 127
 4a0:	8d e0       	ldi	r24, 0x0D	; 13
 4a2:	0e 94 a4 01 	call	0x348	; 0x348 <mfrc522_write>
	
    if (i != 0)
 4a6:	89 28       	or	r8, r9
 4a8:	8a 28       	or	r8, r10
 4aa:	8b 28       	or	r8, r11
 4ac:	51 f5       	brne	.+84     	; 0x502 <mfrc522_to_card+0x136>
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
 4ae:	03 e0       	ldi	r16, 0x03	; 3
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //mfrc522_write(cmdReg, PCD_IDLE); 

    return status;
}
 4b0:	80 2f       	mov	r24, r16
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	1f 91       	pop	r17
 4b8:	0f 91       	pop	r16
 4ba:	ff 90       	pop	r15
 4bc:	ef 90       	pop	r14
 4be:	df 90       	pop	r13
 4c0:	cf 90       	pop	r12
 4c2:	bf 90       	pop	r11
 4c4:	af 90       	pop	r10
 4c6:	9f 90       	pop	r9
 4c8:	8f 90       	pop	r8
 4ca:	7f 90       	pop	r7
 4cc:	6f 90       	pop	r6
 4ce:	5f 90       	pop	r5
 4d0:	4f 90       	pop	r4
 4d2:	3f 90       	pop	r3
 4d4:	08 95       	ret
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
 4d6:	70 e3       	ldi	r23, 0x30	; 48
 4d8:	37 2e       	mov	r3, r23
			waitIRq = 0x10;
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
 4da:	e7 e7       	ldi	r30, 0x77	; 119
 4dc:	ce 2e       	mov	r12, r30
			waitIRq = 0x30;
			break;
 4de:	96 cf       	rjmp	.-212    	; 0x40c <mfrc522_to_card+0x40>
    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
 4e0:	50 e1       	ldi	r21, 0x10	; 16
 4e2:	35 2e       	mov	r3, r21

    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
 4e4:	62 e1       	ldi	r22, 0x12	; 18
 4e6:	c6 2e       	mov	r12, r22
 4e8:	91 cf       	rjmp	.-222    	; 0x40c <mfrc522_to_card+0x40>
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
 4ea:	f8 01       	movw	r30, r16
 4ec:	61 91       	ld	r22, Z+
 4ee:	8f 01       	movw	r16, r30
 4f0:	89 e0       	ldi	r24, 0x09	; 9
 4f2:	0e 94 a4 01 	call	0x348	; 0x348 <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 4f6:	ff ef       	ldi	r31, 0xFF	; 255
 4f8:	4f 1a       	sub	r4, r31
 4fa:	5f 0a       	sbc	r5, r31
 4fc:	6f 0a       	sbc	r6, r31
 4fe:	7f 0a       	sbc	r7, r31
 500:	a0 cf       	rjmp	.-192    	; 0x442 <mfrc522_to_card+0x76>
	tmp=mfrc522_read(BitFramingReg);
	mfrc522_write(BitFramingReg,tmp&(~0x80));
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 502:	86 e0       	ldi	r24, 0x06	; 6
 504:	0e 94 b1 01 	call	0x362	; 0x362 <mfrc522_read>
 508:	8b 71       	andi	r24, 0x1B	; 27
 50a:	89 f6       	brne	.-94     	; 0x4ae <mfrc522_to_card+0xe2>
        {
            status = CARD_FOUND;
            if (n & irqEn & 0x01)
 50c:	fc 2d       	mov	r31, r12
 50e:	f1 70       	andi	r31, 0x01	; 1
 510:	cf 2e       	mov	r12, r31
 512:	c0 22       	and	r12, r16
 514:	e9 f1       	breq	.+122    	; 0x590 <mfrc522_to_card+0x1c4>
            {   
				status = CARD_NOT_FOUND;			//??   
 516:	02 e0       	ldi	r16, 0x02	; 2
			}

            if (cmd == Transceive_CMD)
 518:	8c e0       	ldi	r24, 0x0C	; 12
 51a:	d8 12       	cpse	r13, r24
 51c:	c9 cf       	rjmp	.-110    	; 0x4b0 <mfrc522_to_card+0xe4>
            {
               	n = mfrc522_read(FIFOLevelReg);
 51e:	8a e0       	ldi	r24, 0x0A	; 10
 520:	0e 94 b1 01 	call	0x362	; 0x362 <mfrc522_read>
 524:	18 2f       	mov	r17, r24
              	lastBits = mfrc522_read(ControlReg) & 0x07;
 526:	8c e0       	ldi	r24, 0x0C	; 12
 528:	0e 94 b1 01 	call	0x362	; 0x362 <mfrc522_read>
 52c:	28 2f       	mov	r18, r24
 52e:	27 70       	andi	r18, 0x07	; 7
 530:	81 2f       	mov	r24, r17
 532:	90 e0       	ldi	r25, 0x00	; 0
                if (lastBits)
 534:	79 f1       	breq	.+94     	; 0x594 <mfrc522_to_card+0x1c8>
                {   
					*back_data_len = (n-1)*8 + lastBits;   
 536:	01 97       	sbiw	r24, 0x01	; 1
 538:	33 e0       	ldi	r19, 0x03	; 3
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	3a 95       	dec	r19
 540:	e1 f7       	brne	.-8      	; 0x53a <mfrc522_to_card+0x16e>
 542:	82 0f       	add	r24, r18
 544:	91 1d       	adc	r25, r1
				}
                else
                {   
					*back_data_len = n*8;   
 546:	09 2e       	mov	r0, r25
 548:	00 0c       	add	r0, r0
 54a:	aa 0b       	sbc	r26, r26
 54c:	bb 0b       	sbc	r27, r27
 54e:	88 83       	st	Y, r24
 550:	99 83       	std	Y+1, r25	; 0x01
 552:	aa 83       	std	Y+2, r26	; 0x02
 554:	bb 83       	std	Y+3, r27	; 0x03
				}

                if (n == 0)
 556:	11 23       	and	r17, r17
 558:	19 f1       	breq	.+70     	; 0x5a0 <mfrc522_to_card+0x1d4>
 55a:	11 31       	cpi	r17, 0x11	; 17
 55c:	08 f0       	brcs	.+2      	; 0x560 <mfrc522_to_card+0x194>
 55e:	10 e1       	ldi	r17, 0x10	; 16
 560:	e7 01       	movw	r28, r14
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 562:	81 2c       	mov	r8, r1
 564:	91 2c       	mov	r9, r1
 566:	54 01       	movw	r10, r8
 568:	c1 2e       	mov	r12, r17
 56a:	d1 2c       	mov	r13, r1
 56c:	e1 2c       	mov	r14, r1
 56e:	f1 2c       	mov	r15, r1
 570:	8c 14       	cp	r8, r12
 572:	9d 04       	cpc	r9, r13
 574:	ae 04       	cpc	r10, r14
 576:	bf 04       	cpc	r11, r15
 578:	08 f0       	brcs	.+2      	; 0x57c <mfrc522_to_card+0x1b0>
 57a:	9a cf       	rjmp	.-204    	; 0x4b0 <mfrc522_to_card+0xe4>
                {   
					back_data[i] = mfrc522_read(FIFODataReg);    
 57c:	89 e0       	ldi	r24, 0x09	; 9
 57e:	0e 94 b1 01 	call	0x362	; 0x362 <mfrc522_read>
 582:	89 93       	st	Y+, r24
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 584:	ef ef       	ldi	r30, 0xFF	; 255
 586:	8e 1a       	sub	r8, r30
 588:	9e 0a       	sbc	r9, r30
 58a:	ae 0a       	sbc	r10, r30
 58c:	be 0a       	sbc	r11, r30
 58e:	f0 cf       	rjmp	.-32     	; 0x570 <mfrc522_to_card+0x1a4>
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
 590:	01 e0       	ldi	r16, 0x01	; 1
 592:	c2 cf       	rjmp	.-124    	; 0x518 <mfrc522_to_card+0x14c>
                {   
					*back_data_len = (n-1)*8 + lastBits;   
				}
                else
                {   
					*back_data_len = n*8;   
 594:	23 e0       	ldi	r18, 0x03	; 3
 596:	88 0f       	add	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	2a 95       	dec	r18
 59c:	e1 f7       	brne	.-8      	; 0x596 <mfrc522_to_card+0x1ca>
 59e:	d3 cf       	rjmp	.-90     	; 0x546 <mfrc522_to_card+0x17a>
				}

                if (n == 0)
                {   
					n = 1;    
 5a0:	11 e0       	ldi	r17, 0x01	; 1
 5a2:	de cf       	rjmp	.-68     	; 0x560 <mfrc522_to_card+0x194>

000005a4 <mfrc522_request>:
{
	mfrc522_write(CommandReg,SoftReset_CMD);
}

uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
 5a4:	ef 92       	push	r14
 5a6:	ff 92       	push	r15
 5a8:	0f 93       	push	r16
 5aa:	1f 93       	push	r17
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	00 d0       	rcall	.+0      	; 0x5b2 <mfrc522_request+0xe>
 5b2:	00 d0       	rcall	.+0      	; 0x5b4 <mfrc522_request+0x10>
 5b4:	cd b7       	in	r28, 0x3d	; 61
 5b6:	de b7       	in	r29, 0x3e	; 62
 5b8:	18 2f       	mov	r17, r24
 5ba:	7b 01       	movw	r14, r22
	uint8_t  status;  
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
 5bc:	67 e0       	ldi	r22, 0x07	; 7
 5be:	8d e0       	ldi	r24, 0x0D	; 13
 5c0:	0e 94 a4 01 	call	0x348	; 0x348 <mfrc522_write>
	
	tag_type[0] = req_mode;
 5c4:	f7 01       	movw	r30, r14
 5c6:	10 83       	st	Z, r17
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
 5c8:	8e 01       	movw	r16, r28
 5ca:	0f 5f       	subi	r16, 0xFF	; 255
 5cc:	1f 4f       	sbci	r17, 0xFF	; 255
 5ce:	97 01       	movw	r18, r14
 5d0:	41 e0       	ldi	r20, 0x01	; 1
 5d2:	b7 01       	movw	r22, r14
 5d4:	8c e0       	ldi	r24, 0x0C	; 12
 5d6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
 5da:	81 30       	cpi	r24, 0x01	; 1
 5dc:	a1 f4       	brne	.+40     	; 0x606 <mfrc522_request+0x62>
 5de:	49 81       	ldd	r20, Y+1	; 0x01
 5e0:	5a 81       	ldd	r21, Y+2	; 0x02
 5e2:	6b 81       	ldd	r22, Y+3	; 0x03
 5e4:	7c 81       	ldd	r23, Y+4	; 0x04
 5e6:	40 31       	cpi	r20, 0x10	; 16
 5e8:	51 05       	cpc	r21, r1
 5ea:	61 05       	cpc	r22, r1
 5ec:	71 05       	cpc	r23, r1
 5ee:	59 f4       	brne	.+22     	; 0x606 <mfrc522_request+0x62>
	{    
		status = ERROR;
	}
   
	return status;
}
 5f0:	0f 90       	pop	r0
 5f2:	0f 90       	pop	r0
 5f4:	0f 90       	pop	r0
 5f6:	0f 90       	pop	r0
 5f8:	df 91       	pop	r29
 5fa:	cf 91       	pop	r28
 5fc:	1f 91       	pop	r17
 5fe:	0f 91       	pop	r16
 600:	ff 90       	pop	r15
 602:	ef 90       	pop	r14
 604:	08 95       	ret
	tag_type[0] = req_mode;
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);

	if ((status != CARD_FOUND) || (backBits != 0x10))
	{    
		status = ERROR;
 606:	83 e0       	ldi	r24, 0x03	; 3
	}
   
	return status;
 608:	f3 cf       	rjmp	.-26     	; 0x5f0 <mfrc522_request+0x4c>

0000060a <mfrc522_get_card_serial>:
    return status;
}


uint8_t mfrc522_get_card_serial(uint8_t * serial_out)
{
 60a:	ef 92       	push	r14
 60c:	ff 92       	push	r15
 60e:	0f 93       	push	r16
 610:	1f 93       	push	r17
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	00 d0       	rcall	.+0      	; 0x618 <mfrc522_get_card_serial+0xe>
 618:	00 d0       	rcall	.+0      	; 0x61a <mfrc522_get_card_serial+0x10>
 61a:	cd b7       	in	r28, 0x3d	; 61
 61c:	de b7       	in	r29, 0x3e	; 62
 61e:	7c 01       	movw	r14, r24
	uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
    uint32_t unLen;
    
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 620:	60 e0       	ldi	r22, 0x00	; 0
 622:	8d e0       	ldi	r24, 0x0D	; 13
 624:	0e 94 a4 01 	call	0x348	; 0x348 <mfrc522_write>
 
    serial_out[0] = PICC_ANTICOLL;
 628:	83 e9       	ldi	r24, 0x93	; 147
 62a:	f7 01       	movw	r30, r14
 62c:	80 83       	st	Z, r24
    serial_out[1] = 0x20;
 62e:	80 e2       	ldi	r24, 0x20	; 32
 630:	81 83       	std	Z+1, r24	; 0x01
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
 632:	8e 01       	movw	r16, r28
 634:	0f 5f       	subi	r16, 0xFF	; 255
 636:	1f 4f       	sbci	r17, 0xFF	; 255
 638:	97 01       	movw	r18, r14
 63a:	42 e0       	ldi	r20, 0x02	; 2
 63c:	b7 01       	movw	r22, r14
 63e:	8c e0       	ldi	r24, 0x0C	; 12
 640:	0e 94 e6 01 	call	0x3cc	; 0x3cc <mfrc522_to_card>

    if (status == CARD_FOUND)
 644:	81 30       	cpi	r24, 0x01	; 1
 646:	71 f4       	brne	.+28     	; 0x664 <mfrc522_get_card_serial+0x5a>
 648:	f7 01       	movw	r30, r14
 64a:	97 01       	movw	r18, r14
 64c:	2c 5f       	subi	r18, 0xFC	; 252
 64e:	3f 4f       	sbci	r19, 0xFF	; 255
 650:	90 e0       	ldi	r25, 0x00	; 0
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{   
		 	serNumCheck ^= serial_out[i];
 652:	41 91       	ld	r20, Z+
 654:	94 27       	eor	r25, r20
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);

    if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
 656:	e2 17       	cp	r30, r18
 658:	f3 07       	cpc	r31, r19
 65a:	d9 f7       	brne	.-10     	; 0x652 <mfrc522_get_card_serial+0x48>
		{   
		 	serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
 65c:	f7 01       	movw	r30, r14
 65e:	24 81       	ldd	r18, Z+4	; 0x04
 660:	92 13       	cpse	r25, r18
		{   
			status = ERROR;    
 662:	83 e0       	ldi	r24, 0x03	; 3
		}
    }
    return status;
}
 664:	0f 90       	pop	r0
 666:	0f 90       	pop	r0
 668:	0f 90       	pop	r0
 66a:	0f 90       	pop	r0
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	1f 91       	pop	r17
 672:	0f 91       	pop	r16
 674:	ff 90       	pop	r15
 676:	ef 90       	pop	r14
 678:	08 95       	ret

0000067a <spi_init>:
#include <spi.h>

#if SPI_CONFIG_AS_MASTER
void spi_init()
{
	SPI_DDR = (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 67a:	8c e2       	ldi	r24, 0x2C	; 44
 67c:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//prescaler 16
 67e:	81 e5       	ldi	r24, 0x51	; 81
 680:	8c bd       	out	0x2c, r24	; 44
 682:	08 95       	ret

00000684 <spi_transmit>:
 684:	8e bd       	out	0x2e, r24	; 46
 686:	0d b4       	in	r0, 0x2d	; 45
 688:	07 fe       	sbrs	r0, 7
 68a:	fd cf       	rjmp	.-6      	; 0x686 <spi_transmit+0x2>
 68c:	8e b5       	in	r24, 0x2e	; 46
 68e:	08 95       	ret

00000690 <main>:


uint8_t SelfTestBuffer[64];

int main(void)
{
 690:	cf 93       	push	r28
 692:	df 93       	push	r29
 694:	cd b7       	in	r28, 0x3d	; 61
 696:	de b7       	in	r29, 0x3e	; 62
 698:	a0 97       	sbiw	r28, 0x20	; 32
 69a:	0f b6       	in	r0, 0x3f	; 63
 69c:	f8 94       	cli
 69e:	de bf       	out	0x3e, r29	; 62
 6a0:	0f be       	out	0x3f, r0	; 63
 6a2:	cd bf       	out	0x3d, r28	; 61
     
     */

    void initServo(void){
            //make A5 output.
            DDRC=BV(5);      // PORTC declared as output 0xFF is all output 11111 so i have 8 bits i can set and 8 leds....
 6a4:	80 e2       	ldi	r24, 0x20	; 32
 6a6:	87 b9       	out	0x07, r24	; 7
            PORTC=BV(5);     // PORTC is initially LOW OFF the led initially
 6a8:	88 b9       	out	0x08, r24	; 8
        
        //set to closed position
        PORTC = (BV(5));
 6aa:	88 b9       	out	0x08, r24	; 8
 6ac:	ef ec       	ldi	r30, 0xCF	; 207
 6ae:	f7 e0       	ldi	r31, 0x07	; 7
 6b0:	31 97       	sbiw	r30, 0x01	; 1
 6b2:	f1 f7       	brne	.-4      	; 0x6b0 <main+0x20>
 6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <main+0x26>
 6b6:	00 00       	nop
        _delay_us(1000);
        PORTC   ^=BV(5);
 6b8:	98 b1       	in	r25, 0x08	; 8
 6ba:	89 27       	eor	r24, r25
 6bc:	88 b9       	out	0x08, r24	; 8
 6be:	8f e6       	ldi	r24, 0x6F	; 111
 6c0:	94 e9       	ldi	r25, 0x94	; 148
 6c2:	01 97       	sbiw	r24, 0x01	; 1
 6c4:	f1 f7       	brne	.-4      	; 0x6c2 <main+0x32>
 6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <main+0x38>
 6c8:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ca:	9f e7       	ldi	r25, 0x7F	; 127
 6cc:	e8 e3       	ldi	r30, 0x38	; 56
 6ce:	f1 e0       	ldi	r31, 0x01	; 1
 6d0:	91 50       	subi	r25, 0x01	; 1
 6d2:	e0 40       	sbci	r30, 0x00	; 0
 6d4:	f0 40       	sbci	r31, 0x00	; 0
 6d6:	e1 f7       	brne	.-8      	; 0x6d0 <main+0x40>
 6d8:	00 c0       	rjmp	.+0      	; 0x6da <main+0x4a>
 6da:	00 00       	nop
    initServo();
    
    uint8_t byte;
    uint8_t str[MAX_LEN];
    _delay_ms(50);
    LCDInit(LS_BLINK);
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	0e 94 a3 00 	call	0x146	; 0x146 <LCDInit>
    LCDWriteStringXY(2,0,"RFID Reader");
 6e2:	60 e0       	ldi	r22, 0x00	; 0
 6e4:	82 e0       	ldi	r24, 0x02	; 2
 6e6:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	91 e0       	ldi	r25, 0x01	; 1
 6ee:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
    LCDWriteStringXY(5,1,VERSION_STR);
 6f2:	61 e0       	ldi	r22, 0x01	; 1
 6f4:	85 e0       	ldi	r24, 0x05	; 5
 6f6:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 6fa:	8c e0       	ldi	r24, 0x0C	; 12
 6fc:	91 e0       	ldi	r25, 0x01	; 1
 6fe:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
    
    open();
 702:	0e 94 77 01 	call	0x2ee	; 0x2ee <open.1831>
    close();
    spi_init();
 706:	0e 94 3d 03 	call	0x67a	; 0x67a <spi_init>
 70a:	2f ef       	ldi	r18, 0xFF	; 255
 70c:	89 e6       	ldi	r24, 0x69	; 105
 70e:	98 e1       	ldi	r25, 0x18	; 24
 710:	21 50       	subi	r18, 0x01	; 1
 712:	80 40       	sbci	r24, 0x00	; 0
 714:	90 40       	sbci	r25, 0x00	; 0
 716:	e1 f7       	brne	.-8      	; 0x710 <main+0x80>
 718:	00 c0       	rjmp	.+0      	; 0x71a <main+0x8a>
 71a:	00 00       	nop
    _delay_ms(1000);
    LCDClear();
 71c:	60 e0       	ldi	r22, 0x00	; 0
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
    
    open();
 724:	0e 94 77 01 	call	0x2ee	; 0x2ee <open.1831>
    close();
    

    //init reader
    mfrc522_init();
 728:	0e 94 c0 01 	call	0x380	; 0x380 <mfrc522_init>
    
    //check version of the reader
    byte = mfrc522_read(VersionReg);
 72c:	87 e3       	ldi	r24, 0x37	; 55
 72e:	0e 94 b1 01 	call	0x362	; 0x362 <mfrc522_read>
    if(byte == 0x92)
 732:	82 39       	cpi	r24, 0x92	; 146
 734:	09 f0       	breq	.+2      	; 0x738 <main+0xa8>
 736:	29 c1       	rjmp	.+594    	; 0x98a <__stack+0x8b>
    {
        LCDWriteStringXY(2,0,"MIFARE RC522v2");
 738:	60 e0       	ldi	r22, 0x00	; 0
 73a:	82 e0       	ldi	r24, 0x02	; 2
 73c:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 740:	82 e1       	ldi	r24, 0x12	; 18
 742:	91 e0       	ldi	r25, 0x01	; 1
        LCDWriteStringXY(4,1,"Detected");
    }else if(byte == 0x91 || byte==0x90)
    {
        LCDWriteStringXY(2,0,"MIFARE RC522v1");
 744:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
        LCDWriteStringXY(4,1,"Detected");
 748:	61 e0       	ldi	r22, 0x01	; 1
 74a:	84 e0       	ldi	r24, 0x04	; 4
 74c:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 750:	81 e2       	ldi	r24, 0x21	; 33
 752:	91 e0       	ldi	r25, 0x01	; 1
    }else
    {
        LCDWriteStringXY(0,0,"No reader found");
 754:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
    }
    
    byte = mfrc522_read(ComIEnReg);
 758:	82 e0       	ldi	r24, 0x02	; 2
 75a:	0e 94 b1 01 	call	0x362	; 0x362 <mfrc522_read>
    mfrc522_write(ComIEnReg,byte|0x20);
 75e:	68 2f       	mov	r22, r24
 760:	60 62       	ori	r22, 0x20	; 32
 762:	82 e0       	ldi	r24, 0x02	; 2
 764:	0e 94 a4 01 	call	0x348	; 0x348 <mfrc522_write>
    byte = mfrc522_read(DivIEnReg);
 768:	83 e0       	ldi	r24, 0x03	; 3
 76a:	0e 94 b1 01 	call	0x362	; 0x362 <mfrc522_read>
    mfrc522_write(DivIEnReg,byte|0x80);
 76e:	68 2f       	mov	r22, r24
 770:	60 68       	ori	r22, 0x80	; 128
 772:	83 e0       	ldi	r24, 0x03	; 3
 774:	0e 94 a4 01 	call	0x348	; 0x348 <mfrc522_write>
 778:	ef ef       	ldi	r30, 0xFF	; 255
 77a:	fe e9       	ldi	r31, 0x9E	; 158
 77c:	24 e2       	ldi	r18, 0x24	; 36
 77e:	e1 50       	subi	r30, 0x01	; 1
 780:	f0 40       	sbci	r31, 0x00	; 0
 782:	20 40       	sbci	r18, 0x00	; 0
 784:	e1 f7       	brne	.-8      	; 0x77e <main+0xee>
 786:	00 c0       	rjmp	.+0      	; 0x788 <main+0xf8>
 788:	00 00       	nop
    
    _delay_ms(1500);
    LCDClear();
 78a:	60 e0       	ldi	r22, 0x00	; 0
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
    
    uint8_t card1[16] = {174,68,45,91,156}; //only 5 elements!!!
 792:	ce 01       	movw	r24, r28
 794:	01 96       	adiw	r24, 0x01	; 1
 796:	6c 01       	movw	r12, r24
 798:	80 e1       	ldi	r24, 0x10	; 16
 79a:	f6 01       	movw	r30, r12
 79c:	11 92       	st	Z+, r1
 79e:	8a 95       	dec	r24
 7a0:	e9 f7       	brne	.-6      	; 0x79c <main+0x10c>
 7a2:	8e ea       	ldi	r24, 0xAE	; 174
 7a4:	89 83       	std	Y+1, r24	; 0x01
 7a6:	84 e4       	ldi	r24, 0x44	; 68
 7a8:	8a 83       	std	Y+2, r24	; 0x02
 7aa:	8d e2       	ldi	r24, 0x2D	; 45
 7ac:	8b 83       	std	Y+3, r24	; 0x03
 7ae:	8b e5       	ldi	r24, 0x5B	; 91
 7b0:	8c 83       	std	Y+4, r24	; 0x04
 7b2:	8c e9       	ldi	r24, 0x9C	; 156
 7b4:	8d 83       	std	Y+5, r24	; 0x05
 7b6:	3e 01       	movw	r6, r28
 7b8:	f6 e1       	ldi	r31, 0x16	; 22
 7ba:	6f 0e       	add	r6, r31
 7bc:	71 1c       	adc	r7, r1
 7be:	4e 01       	movw	r8, r28
 7c0:	29 e1       	ldi	r18, 0x19	; 25
 7c2:	82 0e       	add	r8, r18
 7c4:	91 1c       	adc	r9, r1
    int validCard = -2;
    
    while(1){
        byte = mfrc522_request(PICC_REQALL,str);
 7c6:	be 01       	movw	r22, r28
 7c8:	6f 5e       	subi	r22, 0xEF	; 239
 7ca:	7f 4f       	sbci	r23, 0xFF	; 255
 7cc:	82 e5       	ldi	r24, 0x52	; 82
 7ce:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <mfrc522_request>
 7d2:	18 2f       	mov	r17, r24
        LCDHexDumpXY(0,0,byte);
 7d4:	48 2f       	mov	r20, r24
 7d6:	60 e0       	ldi	r22, 0x00	; 0
 7d8:	80 e0       	ldi	r24, 0x00	; 0
 7da:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCDHexDumpXY>
        
        if(byte == CARD_FOUND)
 7de:	11 30       	cpi	r17, 0x01	; 1
 7e0:	09 f0       	breq	.+2      	; 0x7e4 <main+0x154>
 7e2:	c1 c0       	rjmp	.+386    	; 0x966 <__stack+0x67>
        {
            byte = mfrc522_get_card_serial(str);
 7e4:	ce 01       	movw	r24, r28
 7e6:	41 96       	adiw	r24, 0x11	; 17
 7e8:	0e 94 05 03 	call	0x60a	; 0x60a <mfrc522_get_card_serial>
            if(byte == CARD_FOUND)
 7ec:	81 30       	cpi	r24, 0x01	; 1
 7ee:	09 f0       	breq	.+2      	; 0x7f2 <main+0x162>
 7f0:	dc c0       	rjmp	.+440    	; 0x9aa <__stack+0xab>
 7f2:	8f e5       	ldi	r24, 0x5F	; 95
 7f4:	9a ee       	ldi	r25, 0xEA	; 234
 7f6:	01 97       	sbiw	r24, 0x01	; 1
 7f8:	f1 f7       	brne	.-4      	; 0x7f6 <main+0x166>
 7fa:	00 c0       	rjmp	.+0      	; 0x7fc <main+0x16c>
 7fc:	00 00       	nop
            {
                _delay_ms(30);
                LCDClear();
 7fe:	60 e0       	ldi	r22, 0x00	; 0
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 806:	8e 01       	movw	r16, r28
 808:	0f 5e       	subi	r16, 0xEF	; 239
 80a:	1f 4f       	sbci	r17, 0xFF	; 255
                
                for(byte=0;byte<8;byte++)
                    // LCDHexDumpXY(byte*2,0,str[byte]);
                    //       LCDHexDumpXY(byte*2, 0, str[byte]);
                    LCDWriteInt(str[byte], -1);
 80c:	f8 01       	movw	r30, r16
 80e:	81 91       	ld	r24, Z+
 810:	8f 01       	movw	r16, r30
 812:	6f ef       	ldi	r22, 0xFF	; 255
 814:	7f ef       	ldi	r23, 0xFF	; 255
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteInt>
            if(byte == CARD_FOUND)
            {
                _delay_ms(30);
                LCDClear();
                
                for(byte=0;byte<8;byte++)
 81c:	08 15       	cp	r16, r8
 81e:	19 05       	cpc	r17, r9
 820:	a9 f7       	brne	.-22     	; 0x80c <main+0x17c>
            else
            {
                LCDWriteStringXY(0,1,"Error");
            }
            
            LCDWriteStringXY(0, 1, "BOUT TO CHECK");
 822:	61 e0       	ldi	r22, 0x01	; 1
 824:	80 e0       	ldi	r24, 0x00	; 0
 826:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 82a:	8f e4       	ldi	r24, 0x4F	; 79
 82c:	91 e0       	ldi	r25, 0x01	; 1
 82e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 832:	ff ef       	ldi	r31, 0xFF	; 255
 834:	29 e6       	ldi	r18, 0x69	; 105
 836:	88 e1       	ldi	r24, 0x18	; 24
 838:	f1 50       	subi	r31, 0x01	; 1
 83a:	20 40       	sbci	r18, 0x00	; 0
 83c:	80 40       	sbci	r24, 0x00	; 0
 83e:	e1 f7       	brne	.-8      	; 0x838 <main+0x1a8>
 840:	00 c0       	rjmp	.+0      	; 0x842 <main+0x1b2>
 842:	00 00       	nop
            _delay_ms(1000);
            LCDClear(); //test
 844:	60 e0       	ldi	r22, 0x00	; 0
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 84c:	8e 01       	movw	r16, r28
 84e:	0f 5e       	subi	r16, 0xEF	; 239
 850:	1f 4f       	sbci	r17, 0xFF	; 255
 852:	78 01       	movw	r14, r16
 854:	8f e5       	ldi	r24, 0x5F	; 95
 856:	9a ee       	ldi	r25, 0xEA	; 234
 858:	01 97       	sbiw	r24, 0x01	; 1
 85a:	f1 f7       	brne	.-4      	; 0x858 <main+0x1c8>
 85c:	00 c0       	rjmp	.+0      	; 0x85e <main+0x1ce>
 85e:	00 00       	nop
            for(int i=0; i<5; i++){
                _delay_ms(30);//test
                //LCDWriteStringXY(0,0,"i:  ");
                // LCDWriteIntXY(5,0, i,1);//test
                LCDWriteInt(str[i], -1);//test
 860:	f7 01       	movw	r30, r14
 862:	81 91       	ld	r24, Z+
 864:	7f 01       	movw	r14, r30
 866:	6f ef       	ldi	r22, 0xFF	; 255
 868:	7f ef       	ldi	r23, 0xFF	; 255
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteInt>
            }
            
            LCDWriteStringXY(0, 1, "BOUT TO CHECK");
            _delay_ms(1000);
            LCDClear(); //test
            for(int i=0; i<5; i++){
 870:	e6 14       	cp	r14, r6
 872:	f7 04       	cpc	r15, r7
 874:	79 f7       	brne	.-34     	; 0x854 <main+0x1c4>
 876:	ff ef       	ldi	r31, 0xFF	; 255
 878:	20 e7       	ldi	r18, 0x70	; 112
 87a:	82 e0       	ldi	r24, 0x02	; 2
 87c:	f1 50       	subi	r31, 0x01	; 1
 87e:	20 40       	sbci	r18, 0x00	; 0
 880:	80 40       	sbci	r24, 0x00	; 0
 882:	e1 f7       	brne	.-8      	; 0x87c <main+0x1ec>
 884:	00 c0       	rjmp	.+0      	; 0x886 <main+0x1f6>
 886:	00 00       	nop
                // LCDWriteIntXY(5,0, i,1);//test
                LCDWriteInt(str[i], -1);//test
                //   _delay_ms(1000);
            }
            _delay_ms(100);//test
            LCDClear();//test
 888:	60 e0       	ldi	r22, 0x00	; 0
 88a:	81 e0       	ldi	r24, 0x01	; 1
 88c:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 890:	56 01       	movw	r10, r12
            
            for(int k=0;k<5 ;k++){
                // LCDHexDumpXY(byte*2,0,str[byte]);
                //       LCDHexDumpXY(byte*2, 0, str[byte]);
                LCDWriteIntXY(0,1,str[k], -1);
 892:	61 e0       	ldi	r22, 0x01	; 1
 894:	80 e0       	ldi	r24, 0x00	; 0
 896:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 89a:	f8 01       	movw	r30, r16
 89c:	80 81       	ld	r24, Z
 89e:	6f ef       	ldi	r22, 0xFF	; 255
 8a0:	7f ef       	ldi	r23, 0xFF	; 255
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteInt>
                if(str[k] == card1[k])
 8a8:	f5 01       	movw	r30, r10
 8aa:	81 91       	ld	r24, Z+
 8ac:	5f 01       	movw	r10, r30
 8ae:	f8 01       	movw	r30, r16
 8b0:	90 81       	ld	r25, Z
 8b2:	98 13       	cpse	r25, r24
 8b4:	83 c0       	rjmp	.+262    	; 0x9bc <__stack+0xbd>
                {
                    LCDWriteIntXY(0,1,str[k], -1);
 8b6:	61 e0       	ldi	r22, 0x01	; 1
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 8be:	f8 01       	movw	r30, r16
 8c0:	80 81       	ld	r24, Z
 8c2:	6f ef       	ldi	r22, 0xFF	; 255
 8c4:	7f ef       	ldi	r23, 0xFF	; 255
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteInt>
                    LCDWriteString("MATCH");
 8cc:	8d e5       	ldi	r24, 0x5D	; 93
 8ce:	91 e0       	ldi	r25, 0x01	; 1
 8d0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 8d4:	ff e7       	ldi	r31, 0x7F	; 127
 8d6:	28 e3       	ldi	r18, 0x38	; 56
 8d8:	81 e0       	ldi	r24, 0x01	; 1
 8da:	f1 50       	subi	r31, 0x01	; 1
 8dc:	20 40       	sbci	r18, 0x00	; 0
 8de:	80 40       	sbci	r24, 0x00	; 0
 8e0:	e1 f7       	brne	.-8      	; 0x8da <main+0x24a>
 8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <main+0x254>
 8e4:	00 00       	nop
                    _delay_ms(50);
                    LCDClear();
 8e6:	60 e0       	ldi	r22, 0x00	; 0
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                    validCard = 1;
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0f 5f       	subi	r16, 0xFF	; 255
 8f4:	1f 4f       	sbci	r17, 0xFF	; 255
                //   _delay_ms(1000);
            }
            _delay_ms(100);//test
            LCDClear();//test
            
            for(int k=0;k<5 ;k++){
 8f6:	e0 16       	cp	r14, r16
 8f8:	f1 06       	cpc	r15, r17
 8fa:	59 f6       	brne	.-106    	; 0x892 <main+0x202>
                else{
                    validCard = -1;
                }
                
            }
            if(validCard == 1){
 8fc:	81 30       	cpi	r24, 0x01	; 1
 8fe:	91 05       	cpc	r25, r1
 900:	09 f0       	breq	.+2      	; 0x904 <__stack+0x5>
 902:	5f c0       	rjmp	.+190    	; 0x9c2 <__stack+0xc3>
                LCDClear();
 904:	60 e0       	ldi	r22, 0x00	; 0
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 90c:	9f ef       	ldi	r25, 0xFF	; 255
 90e:	e4 e3       	ldi	r30, 0x34	; 52
 910:	fc e0       	ldi	r31, 0x0C	; 12
 912:	91 50       	subi	r25, 0x01	; 1
 914:	e0 40       	sbci	r30, 0x00	; 0
 916:	f0 40       	sbci	r31, 0x00	; 0
 918:	e1 f7       	brne	.-8      	; 0x912 <__stack+0x13>
 91a:	00 c0       	rjmp	.+0      	; 0x91c <__stack+0x1d>
 91c:	00 00       	nop
                _delay_ms(500);
                LCDWriteString("SUCCESS");
 91e:	83 e6       	ldi	r24, 0x63	; 99
 920:	91 e0       	ldi	r25, 0x01	; 1
 922:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
                open();
 926:	0e 94 77 01 	call	0x2ee	; 0x2ee <open.1831>
 92a:	ff e7       	ldi	r31, 0x7F	; 127
 92c:	2f e4       	ldi	r18, 0x4F	; 79
 92e:	82 e1       	ldi	r24, 0x12	; 18
 930:	f1 50       	subi	r31, 0x01	; 1
 932:	20 40       	sbci	r18, 0x00	; 0
 934:	80 40       	sbci	r24, 0x00	; 0
 936:	e1 f7       	brne	.-8      	; 0x930 <__stack+0x31>
 938:	00 c0       	rjmp	.+0      	; 0x93a <__stack+0x3b>
 93a:	00 00       	nop
                LCDWriteString("not valid");
                close();
            }
            
            _delay_ms(750);
            LCDClear();
 93c:	60 e0       	ldi	r22, 0x00	; 0
 93e:	81 e0       	ldi	r24, 0x01	; 1
 940:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
            LCDWriteString("CHECKED");
 944:	85 e7       	ldi	r24, 0x75	; 117
 946:	91 e0       	ldi	r25, 0x01	; 1
 948:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 94c:	9f e7       	ldi	r25, 0x7F	; 127
 94e:	ea e1       	ldi	r30, 0x1A	; 26
 950:	f6 e0       	ldi	r31, 0x06	; 6
 952:	91 50       	subi	r25, 0x01	; 1
 954:	e0 40       	sbci	r30, 0x00	; 0
 956:	f0 40       	sbci	r31, 0x00	; 0
 958:	e1 f7       	brne	.-8      	; 0x952 <__stack+0x53>
 95a:	00 c0       	rjmp	.+0      	; 0x95c <__stack+0x5d>
 95c:	00 00       	nop
            _delay_ms(250);
            LCDClear();
 95e:	60 e0       	ldi	r22, 0x00	; 0
 960:	81 e0       	ldi	r24, 0x01	; 1
 962:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
        }
        
        LCDWriteString("present card");
 966:	8d e7       	ldi	r24, 0x7D	; 125
 968:	91 e0       	ldi	r25, 0x01	; 1
 96a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 96e:	2f ef       	ldi	r18, 0xFF	; 255
 970:	89 e6       	ldi	r24, 0x69	; 105
 972:	98 e1       	ldi	r25, 0x18	; 24
 974:	21 50       	subi	r18, 0x01	; 1
 976:	80 40       	sbci	r24, 0x00	; 0
 978:	90 40       	sbci	r25, 0x00	; 0
 97a:	e1 f7       	brne	.-8      	; 0x974 <__stack+0x75>
 97c:	00 c0       	rjmp	.+0      	; 0x97e <__stack+0x7f>
 97e:	00 00       	nop
        _delay_ms(1000);
        LCDClear();
 980:	60 e0       	ldi	r22, 0x00	; 0
 982:	81 e0       	ldi	r24, 0x01	; 1
 984:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
    
    uint8_t card1[16] = {174,68,45,91,156}; //only 5 elements!!!
    int validCard = -2;
    
    while(1){
        byte = mfrc522_request(PICC_REQALL,str);
 988:	1e cf       	rjmp	.-452    	; 0x7c6 <main+0x136>
    byte = mfrc522_read(VersionReg);
    if(byte == 0x92)
    {
        LCDWriteStringXY(2,0,"MIFARE RC522v2");
        LCDWriteStringXY(4,1,"Detected");
    }else if(byte == 0x91 || byte==0x90)
 98a:	80 59       	subi	r24, 0x90	; 144
    {
        LCDWriteStringXY(2,0,"MIFARE RC522v1");
 98c:	60 e0       	ldi	r22, 0x00	; 0
    byte = mfrc522_read(VersionReg);
    if(byte == 0x92)
    {
        LCDWriteStringXY(2,0,"MIFARE RC522v2");
        LCDWriteStringXY(4,1,"Detected");
    }else if(byte == 0x91 || byte==0x90)
 98e:	82 30       	cpi	r24, 0x02	; 2
 990:	30 f4       	brcc	.+12     	; 0x99e <__stack+0x9f>
    {
        LCDWriteStringXY(2,0,"MIFARE RC522v1");
 992:	82 e0       	ldi	r24, 0x02	; 2
 994:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 998:	8a e2       	ldi	r24, 0x2A	; 42
 99a:	91 e0       	ldi	r25, 0x01	; 1
 99c:	d3 ce       	rjmp	.-602    	; 0x744 <main+0xb4>
        LCDWriteStringXY(4,1,"Detected");
    }else
    {
        LCDWriteStringXY(0,0,"No reader found");
 99e:	80 e0       	ldi	r24, 0x00	; 0
 9a0:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 9a4:	89 e3       	ldi	r24, 0x39	; 57
 9a6:	91 e0       	ldi	r25, 0x01	; 1
 9a8:	d5 ce       	rjmp	.-598    	; 0x754 <main+0xc4>
                    LCDWriteInt(str[byte], -1);
                
            }
            else
            {
                LCDWriteStringXY(0,1,"Error");
 9aa:	61 e0       	ldi	r22, 0x01	; 1
 9ac:	80 e0       	ldi	r24, 0x00	; 0
 9ae:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 9b2:	89 e4       	ldi	r24, 0x49	; 73
 9b4:	91 e0       	ldi	r25, 0x01	; 1
 9b6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 9ba:	33 cf       	rjmp	.-410    	; 0x822 <main+0x192>
                    _delay_ms(50);
                    LCDClear();
                    validCard = 1;
                }
                else{
                    validCard = -1;
 9bc:	8f ef       	ldi	r24, 0xFF	; 255
 9be:	9f ef       	ldi	r25, 0xFF	; 255
 9c0:	98 cf       	rjmp	.-208    	; 0x8f2 <main+0x262>
                _delay_ms(500);
                LCDWriteString("SUCCESS");
                open();
                validCard=5;
            }
            if(validCard == -1){
 9c2:	01 96       	adiw	r24, 0x01	; 1
 9c4:	09 f0       	breq	.+2      	; 0x9c8 <__stack+0xc9>
 9c6:	b1 cf       	rjmp	.-158    	; 0x92a <__stack+0x2b>
                LCDClear();
 9c8:	60 e0       	ldi	r22, 0x00	; 0
 9ca:	81 e0       	ldi	r24, 0x01	; 1
 9cc:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 9d0:	8f ef       	ldi	r24, 0xFF	; 255
 9d2:	90 e7       	ldi	r25, 0x70	; 112
 9d4:	e2 e0       	ldi	r30, 0x02	; 2
 9d6:	81 50       	subi	r24, 0x01	; 1
 9d8:	90 40       	sbci	r25, 0x00	; 0
 9da:	e0 40       	sbci	r30, 0x00	; 0
 9dc:	e1 f7       	brne	.-8      	; 0x9d6 <__stack+0xd7>
 9de:	00 c0       	rjmp	.+0      	; 0x9e0 <__stack+0xe1>
 9e0:	00 00       	nop
                _delay_ms(100);
                LCDWriteString("not valid");
 9e2:	8b e6       	ldi	r24, 0x6B	; 107
 9e4:	91 e0       	ldi	r25, 0x01	; 1
 9e6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 9ea:	9f cf       	rjmp	.-194    	; 0x92a <__stack+0x2b>

000009ec <__divmodhi4>:
 9ec:	97 fb       	bst	r25, 7
 9ee:	07 2e       	mov	r0, r23
 9f0:	16 f4       	brtc	.+4      	; 0x9f6 <__divmodhi4+0xa>
 9f2:	00 94       	com	r0
 9f4:	07 d0       	rcall	.+14     	; 0xa04 <__divmodhi4_neg1>
 9f6:	77 fd       	sbrc	r23, 7
 9f8:	09 d0       	rcall	.+18     	; 0xa0c <__divmodhi4_neg2>
 9fa:	0e 94 0a 05 	call	0xa14	; 0xa14 <__udivmodhi4>
 9fe:	07 fc       	sbrc	r0, 7
 a00:	05 d0       	rcall	.+10     	; 0xa0c <__divmodhi4_neg2>
 a02:	3e f4       	brtc	.+14     	; 0xa12 <__divmodhi4_exit>

00000a04 <__divmodhi4_neg1>:
 a04:	90 95       	com	r25
 a06:	81 95       	neg	r24
 a08:	9f 4f       	sbci	r25, 0xFF	; 255
 a0a:	08 95       	ret

00000a0c <__divmodhi4_neg2>:
 a0c:	70 95       	com	r23
 a0e:	61 95       	neg	r22
 a10:	7f 4f       	sbci	r23, 0xFF	; 255

00000a12 <__divmodhi4_exit>:
 a12:	08 95       	ret

00000a14 <__udivmodhi4>:
 a14:	aa 1b       	sub	r26, r26
 a16:	bb 1b       	sub	r27, r27
 a18:	51 e1       	ldi	r21, 0x11	; 17
 a1a:	07 c0       	rjmp	.+14     	; 0xa2a <__udivmodhi4_ep>

00000a1c <__udivmodhi4_loop>:
 a1c:	aa 1f       	adc	r26, r26
 a1e:	bb 1f       	adc	r27, r27
 a20:	a6 17       	cp	r26, r22
 a22:	b7 07       	cpc	r27, r23
 a24:	10 f0       	brcs	.+4      	; 0xa2a <__udivmodhi4_ep>
 a26:	a6 1b       	sub	r26, r22
 a28:	b7 0b       	sbc	r27, r23

00000a2a <__udivmodhi4_ep>:
 a2a:	88 1f       	adc	r24, r24
 a2c:	99 1f       	adc	r25, r25
 a2e:	5a 95       	dec	r21
 a30:	a9 f7       	brne	.-22     	; 0xa1c <__udivmodhi4_loop>
 a32:	80 95       	com	r24
 a34:	90 95       	com	r25
 a36:	bc 01       	movw	r22, r24
 a38:	cd 01       	movw	r24, r26
 a3a:	08 95       	ret

00000a3c <_exit>:
 a3c:	f8 94       	cli

00000a3e <__stop_program>:
 a3e:	ff cf       	rjmp	.-2      	; 0xa3e <__stop_program>
