
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800100  00000a6e  00000b02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00800174  00800174  00000b76  2**0
                  ALLOC
  3 .stab         00002724  00000000  00000000  00000b78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000130d  00000000  00000000  0000329c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000045a9  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000045bc  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  000045fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00004bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  00005192  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000051af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 37       	cpi	r26, 0x74	; 116
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e7       	ldi	r26, 0x74	; 116
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 3b       	cpi	r26, 0xB4	; 180
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 98 03 	call	0x730	; 0x730 <main>
  9e:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	80 7f       	andi	r24, 0xF0	; 240
  aa:	8a b9       	out	0x0a, r24	; 10

	//change LCD mode
	SET_RW();		//Read mode
  ac:	5e 9a       	sbi	0x0b, 6	; 11
	CLEAR_RS();		//Read status
  ae:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCDBusyLoop+0xc>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <LCDBusyLoop+0xe>

	
	do
	{

		SET_E();
  b4:	5c 9a       	sbi	0x0b, 4	; 11
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <LCDBusyLoop+0x12>
  b8:	00 c0       	rjmp	.+0      	; 0xba <LCDBusyLoop+0x14>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
  ba:	89 b1       	in	r24, 0x09	; 9
		status=status<<4;
  bc:	82 95       	swap	r24
  be:	80 7f       	andi	r24, 0xF0	; 240
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <LCDBusyLoop+0x1c>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <LCDBusyLoop+0x1e>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  c4:	5c 98       	cbi	0x0b, 4	; 11
  c6:	92 e0       	ldi	r25, 0x02	; 2
  c8:	9a 95       	dec	r25
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCDBusyLoop+0x22>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LCDBusyLoop+0x28>
		_delay_us(1);	//tEL

		SET_E();
  ce:	5c 9a       	sbi	0x0b, 4	; 11
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCDBusyLoop+0x2c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCDBusyLoop+0x2e>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
  d4:	99 b1       	in	r25, 0x09	; 9
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <LCDBusyLoop+0x32>
  d8:	00 c0       	rjmp	.+0      	; 0xda <LCDBusyLoop+0x34>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
  da:	5c 98       	cbi	0x0b, 4	; 11
  dc:	92 e0       	ldi	r25, 0x02	; 2
  de:	9a 95       	dec	r25
  e0:	f1 f7       	brne	.-4      	; 0xde <LCDBusyLoop+0x38>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCDBusyLoop+0x3e>
		_delay_us(1);	//tEL
	}while(busy);
  e4:	87 fd       	sbrc	r24, 7
  e6:	e6 cf       	rjmp	.-52     	; 0xb4 <LCDBusyLoop+0xe>

	CLEAR_RW();		//write mode
  e8:	5e 98       	cbi	0x0b, 6	; 11
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
  ea:	8a b1       	in	r24, 0x0a	; 10
  ec:	8f 60       	ori	r24, 0x0F	; 15
  ee:	8a b9       	out	0x0a, r24	; 10
  f0:	08 95       	ret

000000f2 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
  f2:	38 2f       	mov	r19, r24
  f4:	32 95       	swap	r19
  f6:	3f 70       	andi	r19, 0x0F	; 15
ln=(c & 0x0F);
  f8:	28 2f       	mov	r18, r24
  fa:	2f 70       	andi	r18, 0x0F	; 15

if(isdata==0)
  fc:	61 11       	cpse	r22, r1
  fe:	21 c0       	rjmp	.+66     	; 0x142 <LCDByte+0x50>
	CLEAR_RS();
 100:	5d 98       	cbi	0x0b, 5	; 11
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCDByte+0x12>
 104:	00 c0       	rjmp	.+0      	; 0x106 <LCDByte+0x14>
else
	SET_RS();

_delay_us(0.500);		//tAS

SET_E();
 106:	5c 9a       	sbi	0x0b, 4	; 11

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 108:	9b b1       	in	r25, 0x0b	; 11
 10a:	90 7f       	andi	r25, 0xF0	; 240
 10c:	93 2b       	or	r25, r19
LCD_DATA_PORT=temp;
 10e:	9b b9       	out	0x0b, r25	; 11
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	8a 95       	dec	r24
 114:	f1 f7       	brne	.-4      	; 0x112 <LCDByte+0x20>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 118:	5c 98       	cbi	0x0b, 4	; 11
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	8a 95       	dec	r24
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCDByte+0x2a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCDByte+0x30>

_delay_us(1);

//Send the lower nibble
SET_E();
 122:	5c 9a       	sbi	0x0b, 4	; 11

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	82 2b       	or	r24, r18

LCD_DATA_PORT=temp;
 12a:	8b b9       	out	0x0b, r24	; 11
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	8a 95       	dec	r24
 130:	f1 f7       	brne	.-4      	; 0x12e <LCDByte+0x3c>
 132:	00 c0       	rjmp	.+0      	; 0x134 <LCDByte+0x42>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 134:	5c 98       	cbi	0x0b, 4	; 11
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCDByte+0x46>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCDByte+0x4c>

_delay_us(1);			//tEL

LCDBusyLoop();
 13e:	0c 94 53 00 	jmp	0xa6	; 0xa6 <LCDBusyLoop>
ln=(c & 0x0F);

if(isdata==0)
	CLEAR_RS();
else
	SET_RS();
 142:	5d 9a       	sbi	0x0b, 5	; 11
 144:	de cf       	rjmp	.-68     	; 0x102 <LCDByte+0x10>

00000146 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	8f e5       	ldi	r24, 0x5F	; 95
 14c:	9a ee       	ldi	r25, 0xEA	; 234
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <LCDInit+0x8>
 152:	00 c0       	rjmp	.+0      	; 0x154 <LCDInit+0xe>
 154:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 156:	8a b1       	in	r24, 0x0a	; 10
 158:	8f 60       	ori	r24, 0x0F	; 15
 15a:	8a b9       	out	0x0a, r24	; 10
	LCD_E_DDR|=(1<<LCD_E_POS);
 15c:	54 9a       	sbi	0x0a, 4	; 10
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 15e:	55 9a       	sbi	0x0a, 5	; 10
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 160:	56 9a       	sbi	0x0a, 6	; 10

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 162:	8b b1       	in	r24, 0x0b	; 11
 164:	80 7f       	andi	r24, 0xF0	; 240
 166:	8b b9       	out	0x0b, r24	; 11
	CLEAR_E();
 168:	5c 98       	cbi	0x0b, 4	; 11
	CLEAR_RW();
 16a:	5e 98       	cbi	0x0b, 6	; 11
	CLEAR_RS();
 16c:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCDInit+0x2a>
 170:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 172:	5c 9a       	sbi	0x0b, 4	; 11
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 174:	59 9a       	sbi	0x0b, 1	; 11
 176:	92 e0       	ldi	r25, 0x02	; 2
 178:	9a 95       	dec	r25
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCDInit+0x32>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCDInit+0x38>
	_delay_us(1);
	CLEAR_E();
 17e:	5c 98       	cbi	0x0b, 4	; 11
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	8a 95       	dec	r24
 184:	f1 f7       	brne	.-4      	; 0x182 <LCDInit+0x3c>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LCDInit+0x42>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 188:	0e 94 53 00 	call	0xa6	; 0xa6 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	8c 2f       	mov	r24, r28
 190:	8c 60       	ori	r24, 0x0C	; 12
 192:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	88 e2       	ldi	r24, 0x28	; 40
 19a:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	80 e8       	ldi	r24, 0x80	; 128
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format

	
	LCDGotoXY(0,0);

}
 1a2:	cf 91       	pop	r28
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 1a4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <LCDByte>

000001a8 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	ec 01       	movw	r28, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 1b2:	88 81       	ld	r24, Y
 1b4:	81 11       	cpse	r24, r1
 1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <LCDWriteString+0x1a>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	08 95       	ret

	*****************************************************************/
 while(*msg!='\0')
 {
 	//Custom Char Support
	if(*msg=='%')
 1c2:	85 32       	cpi	r24, 0x25	; 37
 1c4:	99 f4       	brne	.+38     	; 0x1ec <LCDWriteString+0x44>
	{
		msg++;
 1c6:	8e 01       	movw	r16, r28
 1c8:	0f 5f       	subi	r16, 0xFF	; 255
 1ca:	1f 4f       	sbci	r17, 0xFF	; 255
		int8_t cc=*msg-'0';
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
		{
			LCDData(cc);
 1d0:	61 e0       	ldi	r22, 0x01	; 1
	if(*msg=='%')
	{
		msg++;
		int8_t cc=*msg-'0';

		if(cc>=0 && cc<=7)
 1d2:	88 30       	cpi	r24, 0x08	; 8
 1d4:	28 f4       	brcc	.+10     	; 0x1e0 <LCDWriteString+0x38>
			LCDData(cc);
		}
		else
		{
			LCDData('%');
			LCDData(*msg);
 1d6:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	}
	else
	{
		LCDData(*msg);
	}
	msg++;
 1da:	e8 01       	movw	r28, r16
 1dc:	21 96       	adiw	r28, 0x01	; 1
 1de:	e9 cf       	rjmp	.-46     	; 0x1b2 <LCDWriteString+0xa>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 1e0:	85 e2       	ldi	r24, 0x25	; 37
 1e2:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
			LCDData(*msg);
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	f5 cf       	rjmp	.-22     	; 0x1d6 <LCDWriteString+0x2e>
		}
	}
	else
	{
		LCDData(*msg);
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 1f2:	8e 01       	movw	r16, r28
 1f4:	f2 cf       	rjmp	.-28     	; 0x1da <LCDWriteString+0x32>

000001f6 <LCDWriteInt>:
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
{
 1f6:	ef 92       	push	r14
 1f8:	ff 92       	push	r15
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	00 d0       	rcall	.+0      	; 0x204 <LCDWriteInt+0xe>
 204:	00 d0       	rcall	.+0      	; 0x206 <LCDWriteInt+0x10>
 206:	1f 92       	push	r1
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	9b 01       	movw	r18, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 20e:	ae 01       	movw	r20, r28
 210:	4f 5f       	subi	r20, 0xFF	; 255
 212:	5f 4f       	sbci	r21, 0xFF	; 255
 214:	7a 01       	movw	r14, r20
 216:	45 e0       	ldi	r20, 0x05	; 5
 218:	f7 01       	movw	r30, r14
 21a:	11 92       	st	Z+, r1
 21c:	4a 95       	dec	r20
 21e:	e9 f7       	brne	.-6      	; 0x21a <LCDWriteInt+0x24>
 220:	fe 01       	movw	r30, r28
 222:	36 96       	adiw	r30, 0x06	; 6
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 224:	0a e0       	ldi	r16, 0x0A	; 10
 226:	10 e0       	ldi	r17, 0x00	; 0

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 228:	00 97       	sbiw	r24, 0x00	; 0
 22a:	f1 f4       	brne	.+60     	; 0x268 <LCDWriteInt+0x72>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 22c:	2f 3f       	cpi	r18, 0xFF	; 255
 22e:	ff ef       	ldi	r31, 0xFF	; 255
 230:	3f 07       	cpc	r19, r31
 232:	01 f5       	brne	.+64     	; 0x274 <LCDWriteInt+0x7e>
 234:	f7 01       	movw	r30, r14
 236:	8f 01       	movw	r16, r30
 238:	0e 19       	sub	r16, r14
 23a:	1f 09       	sbc	r17, r15
		while(str[j]==0) j++;
 23c:	81 91       	ld	r24, Z+
 23e:	88 23       	and	r24, r24
 240:	d1 f3       	breq	.-12     	; 0x236 <LCDWriteInt+0x40>
 242:	0e 0d       	add	r16, r14
 244:	1f 1d       	adc	r17, r15
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 246:	c8 01       	movw	r24, r16
 248:	8e 19       	sub	r24, r14
 24a:	9f 09       	sbc	r25, r15
 24c:	05 97       	sbiw	r24, 0x05	; 5
 24e:	bc f0       	brlt	.+46     	; 0x27e <LCDWriteInt+0x88>
	{
	LCDData(48+str[i]);
	}
}
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	1f 91       	pop	r17
 260:	0f 91       	pop	r16
 262:	ff 90       	pop	r15
 264:	ef 90       	pop	r14
 266:	08 95       	ret

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 268:	b8 01       	movw	r22, r16
 26a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__divmodhi4>
 26e:	82 93       	st	-Z, r24
	val=val/10;
 270:	cb 01       	movw	r24, r22
 272:	da cf       	rjmp	.-76     	; 0x228 <LCDWriteInt+0x32>
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
	else
		j=5-field_length;
 274:	05 e0       	ldi	r16, 0x05	; 5
 276:	10 e0       	ldi	r17, 0x00	; 0
 278:	02 1b       	sub	r16, r18
 27a:	13 0b       	sbc	r17, r19
 27c:	e2 cf       	rjmp	.-60     	; 0x242 <LCDWriteInt+0x4c>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 27e:	f8 01       	movw	r30, r16
 280:	81 91       	ld	r24, Z+
 282:	8f 01       	movw	r16, r30
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	80 5d       	subi	r24, 0xD0	; 208
 288:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 28c:	dc cf       	rjmp	.-72     	; 0x246 <LCDWriteInt+0x50>

0000028e <LCDGotoXY>:
	}
}
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 28e:	84 31       	cpi	r24, 0x14	; 20
 290:	78 f4       	brcc	.+30     	; 0x2b0 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
 292:	62 30       	cpi	r22, 0x02	; 2
 294:	49 f0       	breq	.+18     	; 0x2a8 <LCDGotoXY+0x1a>
 296:	63 30       	cpi	r22, 0x03	; 3
 298:	49 f0       	breq	.+18     	; 0x2ac <LCDGotoXY+0x1e>
 29a:	61 30       	cpi	r22, 0x01	; 1
 29c:	09 f4       	brne	.+2      	; 0x2a0 <LCDGotoXY+0x12>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 29e:	80 64       	ori	r24, 0x40	; 64
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	80 68       	ori	r24, 0x80	; 128
 2a4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <LCDByte>
			break;
		case 1:
			x|=0b01000000;
			break;
		case 2:
			x+=0x14;
 2a8:	8c 5e       	subi	r24, 0xEC	; 236
 2aa:	fa cf       	rjmp	.-12     	; 0x2a0 <LCDGotoXY+0x12>
			break;
		case 3:
			x+=0x54;
 2ac:	8c 5a       	subi	r24, 0xAC	; 172
 2ae:	f8 cf       	rjmp	.-16     	; 0x2a0 <LCDGotoXY+0x12>
 2b0:	08 95       	ret

000002b2 <LCDHexDumpXY>:
}



void LCDHexDumpXY(uint8_t x, uint8_t y,uint8_t d)
{
 2b2:	cf 93       	push	r28
 2b4:	c4 2f       	mov	r28, r20
	LCDGotoXY(x,y);
 2b6:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
	uint8_t byte = '0';
	(((d>>4)&0x0F)<=9) ? (byte='0'+((d>>4)&0x0F)) : (byte='A'+ ((d>>4)&0x0F)-0x0A);
 2ba:	8c 2f       	mov	r24, r28
 2bc:	82 95       	swap	r24
 2be:	8f 70       	andi	r24, 0x0F	; 15
 2c0:	8a 30       	cpi	r24, 0x0A	; 10
 2c2:	88 f4       	brcc	.+34     	; 0x2e6 <LCDHexDumpXY+0x34>
 2c4:	80 5d       	subi	r24, 0xD0	; 208
	LCDByte(byte,1);
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	LCDBusyLoop();
 2cc:	0e 94 53 00 	call	0xa6	; 0xa6 <LCDBusyLoop>
 2d0:	8c 2f       	mov	r24, r28
 2d2:	8f 70       	andi	r24, 0x0F	; 15
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
 2d4:	8a 30       	cpi	r24, 0x0A	; 10
 2d6:	48 f4       	brcc	.+18     	; 0x2ea <LCDHexDumpXY+0x38>
 2d8:	80 5d       	subi	r24, 0xD0	; 208
	LCDByte(byte,1);
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	LCDBusyLoop();
}
 2e0:	cf 91       	pop	r28
	LCDByte(byte,1);
	LCDBusyLoop();
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
	LCDByte(byte,1);
	LCDBusyLoop();
 2e2:	0c 94 53 00 	jmp	0xa6	; 0xa6 <LCDBusyLoop>

void LCDHexDumpXY(uint8_t x, uint8_t y,uint8_t d)
{
	LCDGotoXY(x,y);
	uint8_t byte = '0';
	(((d>>4)&0x0F)<=9) ? (byte='0'+((d>>4)&0x0F)) : (byte='A'+ ((d>>4)&0x0F)-0x0A);
 2e6:	89 5c       	subi	r24, 0xC9	; 201
 2e8:	ee cf       	rjmp	.-36     	; 0x2c6 <LCDHexDumpXY+0x14>
	LCDByte(byte,1);
	LCDBusyLoop();
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
 2ea:	89 5c       	subi	r24, 0xC9	; 201
 2ec:	f6 cf       	rjmp	.-20     	; 0x2da <LCDHexDumpXY+0x28>

000002ee <initServo>:
//            //make A5 output.
//            *ddr=BV(pin);      // PORTC declared as output 0xFF is all output 11111 so i have 8 bits i can set and 8 leds....
//            *port=BV(pin);     // PORTC is initially LOW OFF the led initially /
    //to do make the register parameter work

    DDRC = BV(5);
 2ee:	90 e2       	ldi	r25, 0x20	; 32
 2f0:	97 b9       	out	0x07, r25	; 7
        //set to closed position
        PORTC = (BV(5));
 2f2:	98 b9       	out	0x08, r25	; 8
 2f4:	ef ec       	ldi	r30, 0xCF	; 207
 2f6:	f7 e0       	ldi	r31, 0x07	; 7
 2f8:	31 97       	sbiw	r30, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <initServo+0xa>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <initServo+0x10>
 2fe:	00 00       	nop
        _delay_us(1000);
        PORTC   ^=BV(5);
 300:	88 b1       	in	r24, 0x08	; 8
 302:	89 27       	eor	r24, r25
 304:	88 b9       	out	0x08, r24	; 8
 306:	8f e6       	ldi	r24, 0x6F	; 111
 308:	94 e9       	ldi	r25, 0x94	; 148
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <initServo+0x1c>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <initServo+0x22>
 310:	00 00       	nop
 312:	08 95       	ret

00000314 <open>:
//         *port = (BV(pin));
//        _delay_us(1000);
//         *port   ^=BV(pin);
//        _delay_us(19000);
    
    PORTC = (BV(5));
 314:	80 e2       	ldi	r24, 0x20	; 32
 316:	88 b9       	out	0x08, r24	; 8
 318:	ef e9       	ldi	r30, 0x9F	; 159
 31a:	ff e0       	ldi	r31, 0x0F	; 15
 31c:	31 97       	sbiw	r30, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <open+0x8>
 320:	00 c0       	rjmp	.+0      	; 0x322 <open+0xe>
 322:	00 00       	nop
    _delay_us(2000);
   PORTC  ^=BV(5);
 324:	98 b1       	in	r25, 0x08	; 8
 326:	98 27       	eor	r25, r24
 328:	98 b9       	out	0x08, r25	; 8
 32a:	ef e9       	ldi	r30, 0x9F	; 159
 32c:	fc e8       	ldi	r31, 0x8C	; 140
 32e:	31 97       	sbiw	r30, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <open+0x1a>
 332:	00 c0       	rjmp	.+0      	; 0x334 <open+0x20>
 334:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 336:	ff ef       	ldi	r31, 0xFF	; 255
 338:	27 ea       	ldi	r18, 0xA7	; 167
 33a:	31 e6       	ldi	r19, 0x61	; 97
 33c:	f1 50       	subi	r31, 0x01	; 1
 33e:	20 40       	sbci	r18, 0x00	; 0
 340:	30 40       	sbci	r19, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <open+0x28>
 344:	00 c0       	rjmp	.+0      	; 0x346 <open+0x32>
 346:	00 00       	nop
    _delay_us(18000);
    
    _delay_ms(4000);
    
   PORTC = (BV(5));
 348:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34a:	ef ec       	ldi	r30, 0xCF	; 207
 34c:	f7 e0       	ldi	r31, 0x07	; 7
 34e:	31 97       	sbiw	r30, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <open+0x3a>
 352:	00 c0       	rjmp	.+0      	; 0x354 <open+0x40>
 354:	00 00       	nop
    _delay_us(1000);
   PORTC   ^=BV(5);
 356:	98 b1       	in	r25, 0x08	; 8
 358:	89 27       	eor	r24, r25
 35a:	88 b9       	out	0x08, r24	; 8
 35c:	8f e6       	ldi	r24, 0x6F	; 111
 35e:	94 e9       	ldi	r25, 0x94	; 148
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <open+0x4c>
 364:	00 c0       	rjmp	.+0      	; 0x366 <open+0x52>
 366:	00 00       	nop
    _delay_us(19000);
return 1;
    }
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	08 95       	ret

0000036e <close>:

int close(void){
    //ToDo: need to update this
        return 1;
}
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	08 95       	ret

00000374 <initButton>:


void initButton(){
   // uint8_t button = 3;
    //uint8_t ledB = 2;
    DDRC ^= BV(button); //set as input
 374:	97 b1       	in	r25, 0x07	; 7
 376:	28 e0       	ldi	r18, 0x08	; 8
 378:	92 27       	eor	r25, r18
 37a:	97 b9       	out	0x07, r25	; 7
    DDRC |= BV(ledB); //set output
 37c:	3a 9a       	sbi	0x07, 2	; 7
    
    PORTC ^= BV(button); // set low
 37e:	88 b1       	in	r24, 0x08	; 8
 380:	82 27       	eor	r24, r18
 382:	88 b9       	out	0x08, r24	; 8
 384:	08 95       	ret

00000386 <buttonRead>:
    
}

int buttonRead(){
    if(bit_is_clear(PINC, button)){
 386:	33 99       	sbic	0x06, 3	; 6
 388:	2c c0       	rjmp	.+88     	; 0x3e2 <buttonRead+0x5c>
        LCDClear();
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 392:	2f ef       	ldi	r18, 0xFF	; 255
 394:	89 ef       	ldi	r24, 0xF9	; 249
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	21 50       	subi	r18, 0x01	; 1
 39a:	80 40       	sbci	r24, 0x00	; 0
 39c:	90 40       	sbci	r25, 0x00	; 0
 39e:	e1 f7       	brne	.-8      	; 0x398 <buttonRead+0x12>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <buttonRead+0x1c>
 3a2:	00 00       	nop
        _delay_ms(40);
        LCDWriteString("button press");
 3a4:	8c e0       	ldi	r24, 0x0C	; 12
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
        open();
 3ac:	0e 94 8a 01 	call	0x314	; 0x314 <open>
 3b0:	2f ef       	ldi	r18, 0xFF	; 255
 3b2:	84 e3       	ldi	r24, 0x34	; 52
 3b4:	9c e0       	ldi	r25, 0x0C	; 12
 3b6:	21 50       	subi	r18, 0x01	; 1
 3b8:	80 40       	sbci	r24, 0x00	; 0
 3ba:	90 40       	sbci	r25, 0x00	; 0
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <buttonRead+0x30>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <buttonRead+0x3a>
 3c0:	00 00       	nop
 3c2:	2f ef       	ldi	r18, 0xFF	; 255
 3c4:	89 e6       	ldi	r24, 0x69	; 105
 3c6:	98 e1       	ldi	r25, 0x18	; 24
 3c8:	21 50       	subi	r18, 0x01	; 1
 3ca:	80 40       	sbci	r24, 0x00	; 0
 3cc:	90 40       	sbci	r25, 0x00	; 0
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <buttonRead+0x42>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <buttonRead+0x4c>
 3d2:	00 00       	nop
        _delay_ms(500);
        close();
        _delay_ms(1000);
        LCDClear();
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	08 95       	ret
        return 1;
    }
    return 0;
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	90 e0       	ldi	r25, 0x00	; 0
}
 3e6:	08 95       	ret

000003e8 <mfrc522_write>:
		mfrc522_write(TxControlReg,byte|0x03);
	}
}

void mfrc522_write(uint8_t reg, uint8_t data)
{
 3e8:	cf 93       	push	r28
 3ea:	c6 2f       	mov	r28, r22
	ENABLE_CHIP();
 3ec:	2a 98       	cbi	0x05, 2	; 5
	spi_transmit((reg<<1)&0x7E);
 3ee:	88 0f       	add	r24, r24
 3f0:	8e 77       	andi	r24, 0x7E	; 126
 3f2:	0e 94 92 03 	call	0x724	; 0x724 <spi_transmit>
	spi_transmit(data);
 3f6:	8c 2f       	mov	r24, r28
 3f8:	0e 94 92 03 	call	0x724	; 0x724 <spi_transmit>
	DISABLE_CHIP();
 3fc:	2a 9a       	sbi	0x05, 2	; 5
}
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <mfrc522_read>:

uint8_t mfrc522_read(uint8_t reg)
{
	uint8_t data;	
	ENABLE_CHIP();
 402:	2a 98       	cbi	0x05, 2	; 5
	spi_transmit(((reg<<1)&0x7E)|0x80);
 404:	88 0f       	add	r24, r24
 406:	8e 77       	andi	r24, 0x7E	; 126
 408:	80 68       	ori	r24, 0x80	; 128
 40a:	0e 94 92 03 	call	0x724	; 0x724 <spi_transmit>
	data = spi_transmit(0x00);
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	0e 94 92 03 	call	0x724	; 0x724 <spi_transmit>
	DISABLE_CHIP();
 414:	2a 9a       	sbi	0x05, 2	; 5
	return data;
}
 416:	08 95       	ret

00000418 <mfrc522_reset>:

void mfrc522_reset()
{
	mfrc522_write(CommandReg,SoftReset_CMD);
 418:	6f e0       	ldi	r22, 0x0F	; 15
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <mfrc522_write>

00000420 <mfrc522_init>:
#endif

void mfrc522_init()
{
	uint8_t byte;
	mfrc522_reset();
 420:	0e 94 0c 02 	call	0x418	; 0x418 <mfrc522_reset>
	
	mfrc522_write(TModeReg, 0x8D);
 424:	6d e8       	ldi	r22, 0x8D	; 141
 426:	8a e2       	ldi	r24, 0x2A	; 42
 428:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <mfrc522_write>
    mfrc522_write(TPrescalerReg, 0x3E);
 42c:	6e e3       	ldi	r22, 0x3E	; 62
 42e:	8b e2       	ldi	r24, 0x2B	; 43
 430:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <mfrc522_write>
    mfrc522_write(TReloadReg_1, 30);   
 434:	6e e1       	ldi	r22, 0x1E	; 30
 436:	8c e2       	ldi	r24, 0x2C	; 44
 438:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <mfrc522_write>
    mfrc522_write(TReloadReg_2, 0);	
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	8d e2       	ldi	r24, 0x2D	; 45
 440:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <mfrc522_write>
	mfrc522_write(TxASKReg, 0x40);	
 444:	60 e4       	ldi	r22, 0x40	; 64
 446:	85 e1       	ldi	r24, 0x15	; 21
 448:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D);
 44c:	6d e3       	ldi	r22, 0x3D	; 61
 44e:	81 e1       	ldi	r24, 0x11	; 17
 450:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <mfrc522_write>
	
	byte = mfrc522_read(TxControlReg);
 454:	84 e1       	ldi	r24, 0x14	; 20
 456:	0e 94 01 02 	call	0x402	; 0x402 <mfrc522_read>
	if(!(byte&0x03))
 45a:	98 2f       	mov	r25, r24
 45c:	93 70       	andi	r25, 0x03	; 3
 45e:	29 f4       	brne	.+10     	; 0x46a <mfrc522_init+0x4a>
	{
		mfrc522_write(TxControlReg,byte|0x03);
 460:	68 2f       	mov	r22, r24
 462:	63 60       	ori	r22, 0x03	; 3
 464:	84 e1       	ldi	r24, 0x14	; 20
 466:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <mfrc522_write>
 46a:	08 95       	ret

0000046c <mfrc522_to_card>:
   
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
 46c:	3f 92       	push	r3
 46e:	4f 92       	push	r4
 470:	5f 92       	push	r5
 472:	6f 92       	push	r6
 474:	7f 92       	push	r7
 476:	8f 92       	push	r8
 478:	9f 92       	push	r9
 47a:	af 92       	push	r10
 47c:	bf 92       	push	r11
 47e:	cf 92       	push	r12
 480:	df 92       	push	r13
 482:	ef 92       	push	r14
 484:	ff 92       	push	r15
 486:	0f 93       	push	r16
 488:	1f 93       	push	r17
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	d8 2e       	mov	r13, r24
 490:	5b 01       	movw	r10, r22
 492:	84 2e       	mov	r8, r20
 494:	79 01       	movw	r14, r18
 496:	e8 01       	movw	r28, r16
    uint8_t lastBits;
    uint8_t n;
    uint8_t	tmp;
    uint32_t i;

    switch (cmd)
 498:	8c e0       	ldi	r24, 0x0C	; 12
 49a:	d8 16       	cp	r13, r24
 49c:	09 f4       	brne	.+2      	; 0x4a0 <mfrc522_to_card+0x34>
 49e:	6b c0       	rjmp	.+214    	; 0x576 <mfrc522_to_card+0x10a>
 4a0:	ee e0       	ldi	r30, 0x0E	; 14
 4a2:	de 16       	cp	r13, r30
 4a4:	09 f4       	brne	.+2      	; 0x4a8 <mfrc522_to_card+0x3c>
 4a6:	6c c0       	rjmp	.+216    	; 0x580 <mfrc522_to_card+0x114>

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
 4a8:	31 2c       	mov	r3, r1
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
 4aa:	c1 2c       	mov	r12, r1
		default:
			break;
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
 4ac:	84 e0       	ldi	r24, 0x04	; 4
 4ae:	0e 94 01 02 	call	0x402	; 0x402 <mfrc522_read>
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
 4b2:	68 2f       	mov	r22, r24
 4b4:	6f 77       	andi	r22, 0x7F	; 127
 4b6:	84 e0       	ldi	r24, 0x04	; 4
 4b8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
 4bc:	8a e0       	ldi	r24, 0x0A	; 10
 4be:	0e 94 01 02 	call	0x402	; 0x402 <mfrc522_read>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
 4c2:	68 2f       	mov	r22, r24
 4c4:	60 68       	ori	r22, 0x80	; 128
 4c6:	8a e0       	ldi	r24, 0x0A	; 10
 4c8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <mfrc522_write>
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <mfrc522_write>
 4d4:	85 01       	movw	r16, r10

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 4d6:	41 2c       	mov	r4, r1
 4d8:	51 2c       	mov	r5, r1
 4da:	32 01       	movw	r6, r4
 4dc:	91 2c       	mov	r9, r1
 4de:	a1 2c       	mov	r10, r1
 4e0:	b1 2c       	mov	r11, r1
 4e2:	48 14       	cp	r4, r8
 4e4:	59 04       	cpc	r5, r9
 4e6:	6a 04       	cpc	r6, r10
 4e8:	7b 04       	cpc	r7, r11
 4ea:	08 f4       	brcc	.+2      	; 0x4ee <mfrc522_to_card+0x82>
 4ec:	4e c0       	rjmp	.+156    	; 0x58a <mfrc522_to_card+0x11e>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
 4ee:	6d 2d       	mov	r22, r13
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <mfrc522_write>
    if (cmd == Transceive_CMD)
 4f6:	8c e0       	ldi	r24, 0x0C	; 12
 4f8:	d8 12       	cpse	r13, r24
 4fa:	08 c0       	rjmp	.+16     	; 0x50c <mfrc522_to_card+0xa0>
    {    
		n=mfrc522_read(BitFramingReg);
 4fc:	8d e0       	ldi	r24, 0x0D	; 13
 4fe:	0e 94 01 02 	call	0x402	; 0x402 <mfrc522_read>
		mfrc522_write(BitFramingReg,n|0x80);  
 502:	68 2f       	mov	r22, r24
 504:	60 68       	ori	r22, 0x80	; 128
 506:	8d e0       	ldi	r24, 0x0D	; 13
 508:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 50c:	40 ed       	ldi	r20, 0xD0	; 208
 50e:	84 2e       	mov	r8, r20
 510:	47 e0       	ldi	r20, 0x07	; 7
 512:	94 2e       	mov	r9, r20
 514:	a1 2c       	mov	r10, r1
 516:	b1 2c       	mov	r11, r1
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
        i--;
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 518:	13 2d       	mov	r17, r3
 51a:	11 60       	ori	r17, 0x01	; 1
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
 51c:	84 e0       	ldi	r24, 0x04	; 4
 51e:	0e 94 01 02 	call	0x402	; 0x402 <mfrc522_read>
 522:	08 2f       	mov	r16, r24
        i--;
 524:	e1 e0       	ldi	r30, 0x01	; 1
 526:	8e 1a       	sub	r8, r30
 528:	91 08       	sbc	r9, r1
 52a:	a1 08       	sbc	r10, r1
 52c:	b1 08       	sbc	r11, r1
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 52e:	19 f0       	breq	.+6      	; 0x536 <mfrc522_to_card+0xca>
 530:	81 2f       	mov	r24, r17
 532:	80 23       	and	r24, r16
 534:	99 f3       	breq	.-26     	; 0x51c <mfrc522_to_card+0xb0>

	tmp=mfrc522_read(BitFramingReg);
 536:	8d e0       	ldi	r24, 0x0D	; 13
 538:	0e 94 01 02 	call	0x402	; 0x402 <mfrc522_read>
	mfrc522_write(BitFramingReg,tmp&(~0x80));
 53c:	68 2f       	mov	r22, r24
 53e:	6f 77       	andi	r22, 0x7F	; 127
 540:	8d e0       	ldi	r24, 0x0D	; 13
 542:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <mfrc522_write>
	
    if (i != 0)
 546:	89 28       	or	r8, r9
 548:	8a 28       	or	r8, r10
 54a:	8b 28       	or	r8, r11
 54c:	51 f5       	brne	.+84     	; 0x5a2 <mfrc522_to_card+0x136>
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
 54e:	03 e0       	ldi	r16, 0x03	; 3
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //mfrc522_write(cmdReg, PCD_IDLE); 

    return status;
}
 550:	80 2f       	mov	r24, r16
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	1f 91       	pop	r17
 558:	0f 91       	pop	r16
 55a:	ff 90       	pop	r15
 55c:	ef 90       	pop	r14
 55e:	df 90       	pop	r13
 560:	cf 90       	pop	r12
 562:	bf 90       	pop	r11
 564:	af 90       	pop	r10
 566:	9f 90       	pop	r9
 568:	8f 90       	pop	r8
 56a:	7f 90       	pop	r7
 56c:	6f 90       	pop	r6
 56e:	5f 90       	pop	r5
 570:	4f 90       	pop	r4
 572:	3f 90       	pop	r3
 574:	08 95       	ret
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
 576:	70 e3       	ldi	r23, 0x30	; 48
 578:	37 2e       	mov	r3, r23
			waitIRq = 0x10;
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
 57a:	e7 e7       	ldi	r30, 0x77	; 119
 57c:	ce 2e       	mov	r12, r30
			waitIRq = 0x30;
			break;
 57e:	96 cf       	rjmp	.-212    	; 0x4ac <mfrc522_to_card+0x40>
    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
 580:	50 e1       	ldi	r21, 0x10	; 16
 582:	35 2e       	mov	r3, r21

    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
 584:	62 e1       	ldi	r22, 0x12	; 18
 586:	c6 2e       	mov	r12, r22
 588:	91 cf       	rjmp	.-222    	; 0x4ac <mfrc522_to_card+0x40>
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
 58a:	f8 01       	movw	r30, r16
 58c:	61 91       	ld	r22, Z+
 58e:	8f 01       	movw	r16, r30
 590:	89 e0       	ldi	r24, 0x09	; 9
 592:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 596:	ff ef       	ldi	r31, 0xFF	; 255
 598:	4f 1a       	sub	r4, r31
 59a:	5f 0a       	sbc	r5, r31
 59c:	6f 0a       	sbc	r6, r31
 59e:	7f 0a       	sbc	r7, r31
 5a0:	a0 cf       	rjmp	.-192    	; 0x4e2 <mfrc522_to_card+0x76>
	tmp=mfrc522_read(BitFramingReg);
	mfrc522_write(BitFramingReg,tmp&(~0x80));
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 5a2:	86 e0       	ldi	r24, 0x06	; 6
 5a4:	0e 94 01 02 	call	0x402	; 0x402 <mfrc522_read>
 5a8:	8b 71       	andi	r24, 0x1B	; 27
 5aa:	89 f6       	brne	.-94     	; 0x54e <mfrc522_to_card+0xe2>
        {
            status = CARD_FOUND;
            if (n & irqEn & 0x01)
 5ac:	fc 2d       	mov	r31, r12
 5ae:	f1 70       	andi	r31, 0x01	; 1
 5b0:	cf 2e       	mov	r12, r31
 5b2:	c0 22       	and	r12, r16
 5b4:	e9 f1       	breq	.+122    	; 0x630 <mfrc522_to_card+0x1c4>
            {   
				status = CARD_NOT_FOUND;			//??   
 5b6:	02 e0       	ldi	r16, 0x02	; 2
			}

            if (cmd == Transceive_CMD)
 5b8:	8c e0       	ldi	r24, 0x0C	; 12
 5ba:	d8 12       	cpse	r13, r24
 5bc:	c9 cf       	rjmp	.-110    	; 0x550 <mfrc522_to_card+0xe4>
            {
               	n = mfrc522_read(FIFOLevelReg);
 5be:	8a e0       	ldi	r24, 0x0A	; 10
 5c0:	0e 94 01 02 	call	0x402	; 0x402 <mfrc522_read>
 5c4:	18 2f       	mov	r17, r24
              	lastBits = mfrc522_read(ControlReg) & 0x07;
 5c6:	8c e0       	ldi	r24, 0x0C	; 12
 5c8:	0e 94 01 02 	call	0x402	; 0x402 <mfrc522_read>
 5cc:	28 2f       	mov	r18, r24
 5ce:	27 70       	andi	r18, 0x07	; 7
 5d0:	81 2f       	mov	r24, r17
 5d2:	90 e0       	ldi	r25, 0x00	; 0
                if (lastBits)
 5d4:	79 f1       	breq	.+94     	; 0x634 <mfrc522_to_card+0x1c8>
                {   
					*back_data_len = (n-1)*8 + lastBits;   
 5d6:	01 97       	sbiw	r24, 0x01	; 1
 5d8:	33 e0       	ldi	r19, 0x03	; 3
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	3a 95       	dec	r19
 5e0:	e1 f7       	brne	.-8      	; 0x5da <mfrc522_to_card+0x16e>
 5e2:	82 0f       	add	r24, r18
 5e4:	91 1d       	adc	r25, r1
				}
                else
                {   
					*back_data_len = n*8;   
 5e6:	09 2e       	mov	r0, r25
 5e8:	00 0c       	add	r0, r0
 5ea:	aa 0b       	sbc	r26, r26
 5ec:	bb 0b       	sbc	r27, r27
 5ee:	88 83       	st	Y, r24
 5f0:	99 83       	std	Y+1, r25	; 0x01
 5f2:	aa 83       	std	Y+2, r26	; 0x02
 5f4:	bb 83       	std	Y+3, r27	; 0x03
				}

                if (n == 0)
 5f6:	11 23       	and	r17, r17
 5f8:	19 f1       	breq	.+70     	; 0x640 <mfrc522_to_card+0x1d4>
 5fa:	11 31       	cpi	r17, 0x11	; 17
 5fc:	08 f0       	brcs	.+2      	; 0x600 <mfrc522_to_card+0x194>
 5fe:	10 e1       	ldi	r17, 0x10	; 16
 600:	e7 01       	movw	r28, r14
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 602:	81 2c       	mov	r8, r1
 604:	91 2c       	mov	r9, r1
 606:	54 01       	movw	r10, r8
 608:	c1 2e       	mov	r12, r17
 60a:	d1 2c       	mov	r13, r1
 60c:	e1 2c       	mov	r14, r1
 60e:	f1 2c       	mov	r15, r1
 610:	8c 14       	cp	r8, r12
 612:	9d 04       	cpc	r9, r13
 614:	ae 04       	cpc	r10, r14
 616:	bf 04       	cpc	r11, r15
 618:	08 f0       	brcs	.+2      	; 0x61c <mfrc522_to_card+0x1b0>
 61a:	9a cf       	rjmp	.-204    	; 0x550 <mfrc522_to_card+0xe4>
                {   
					back_data[i] = mfrc522_read(FIFODataReg);    
 61c:	89 e0       	ldi	r24, 0x09	; 9
 61e:	0e 94 01 02 	call	0x402	; 0x402 <mfrc522_read>
 622:	89 93       	st	Y+, r24
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 624:	ef ef       	ldi	r30, 0xFF	; 255
 626:	8e 1a       	sub	r8, r30
 628:	9e 0a       	sbc	r9, r30
 62a:	ae 0a       	sbc	r10, r30
 62c:	be 0a       	sbc	r11, r30
 62e:	f0 cf       	rjmp	.-32     	; 0x610 <mfrc522_to_card+0x1a4>
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
 630:	01 e0       	ldi	r16, 0x01	; 1
 632:	c2 cf       	rjmp	.-124    	; 0x5b8 <mfrc522_to_card+0x14c>
                {   
					*back_data_len = (n-1)*8 + lastBits;   
				}
                else
                {   
					*back_data_len = n*8;   
 634:	23 e0       	ldi	r18, 0x03	; 3
 636:	88 0f       	add	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	2a 95       	dec	r18
 63c:	e1 f7       	brne	.-8      	; 0x636 <mfrc522_to_card+0x1ca>
 63e:	d3 cf       	rjmp	.-90     	; 0x5e6 <mfrc522_to_card+0x17a>
				}

                if (n == 0)
                {   
					n = 1;    
 640:	11 e0       	ldi	r17, 0x01	; 1
 642:	de cf       	rjmp	.-68     	; 0x600 <mfrc522_to_card+0x194>

00000644 <mfrc522_request>:
{
	mfrc522_write(CommandReg,SoftReset_CMD);
}

uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
 644:	ef 92       	push	r14
 646:	ff 92       	push	r15
 648:	0f 93       	push	r16
 64a:	1f 93       	push	r17
 64c:	cf 93       	push	r28
 64e:	df 93       	push	r29
 650:	00 d0       	rcall	.+0      	; 0x652 <mfrc522_request+0xe>
 652:	00 d0       	rcall	.+0      	; 0x654 <mfrc522_request+0x10>
 654:	cd b7       	in	r28, 0x3d	; 61
 656:	de b7       	in	r29, 0x3e	; 62
 658:	18 2f       	mov	r17, r24
 65a:	7b 01       	movw	r14, r22
	uint8_t  status;  
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
 65c:	67 e0       	ldi	r22, 0x07	; 7
 65e:	8d e0       	ldi	r24, 0x0D	; 13
 660:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <mfrc522_write>
	
	tag_type[0] = req_mode;
 664:	f7 01       	movw	r30, r14
 666:	10 83       	st	Z, r17
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
 668:	8e 01       	movw	r16, r28
 66a:	0f 5f       	subi	r16, 0xFF	; 255
 66c:	1f 4f       	sbci	r17, 0xFF	; 255
 66e:	97 01       	movw	r18, r14
 670:	41 e0       	ldi	r20, 0x01	; 1
 672:	b7 01       	movw	r22, r14
 674:	8c e0       	ldi	r24, 0x0C	; 12
 676:	0e 94 36 02 	call	0x46c	; 0x46c <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
 67a:	81 30       	cpi	r24, 0x01	; 1
 67c:	a1 f4       	brne	.+40     	; 0x6a6 <mfrc522_request+0x62>
 67e:	49 81       	ldd	r20, Y+1	; 0x01
 680:	5a 81       	ldd	r21, Y+2	; 0x02
 682:	6b 81       	ldd	r22, Y+3	; 0x03
 684:	7c 81       	ldd	r23, Y+4	; 0x04
 686:	40 31       	cpi	r20, 0x10	; 16
 688:	51 05       	cpc	r21, r1
 68a:	61 05       	cpc	r22, r1
 68c:	71 05       	cpc	r23, r1
 68e:	59 f4       	brne	.+22     	; 0x6a6 <mfrc522_request+0x62>
	{    
		status = ERROR;
	}
   
	return status;
}
 690:	0f 90       	pop	r0
 692:	0f 90       	pop	r0
 694:	0f 90       	pop	r0
 696:	0f 90       	pop	r0
 698:	df 91       	pop	r29
 69a:	cf 91       	pop	r28
 69c:	1f 91       	pop	r17
 69e:	0f 91       	pop	r16
 6a0:	ff 90       	pop	r15
 6a2:	ef 90       	pop	r14
 6a4:	08 95       	ret
	tag_type[0] = req_mode;
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);

	if ((status != CARD_FOUND) || (backBits != 0x10))
	{    
		status = ERROR;
 6a6:	83 e0       	ldi	r24, 0x03	; 3
	}
   
	return status;
 6a8:	f3 cf       	rjmp	.-26     	; 0x690 <mfrc522_request+0x4c>

000006aa <mfrc522_get_card_serial>:
    return status;
}


uint8_t mfrc522_get_card_serial(uint8_t * serial_out)
{
 6aa:	ef 92       	push	r14
 6ac:	ff 92       	push	r15
 6ae:	0f 93       	push	r16
 6b0:	1f 93       	push	r17
 6b2:	cf 93       	push	r28
 6b4:	df 93       	push	r29
 6b6:	00 d0       	rcall	.+0      	; 0x6b8 <mfrc522_get_card_serial+0xe>
 6b8:	00 d0       	rcall	.+0      	; 0x6ba <mfrc522_get_card_serial+0x10>
 6ba:	cd b7       	in	r28, 0x3d	; 61
 6bc:	de b7       	in	r29, 0x3e	; 62
 6be:	7c 01       	movw	r14, r24
	uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
    uint32_t unLen;
    
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 6c0:	60 e0       	ldi	r22, 0x00	; 0
 6c2:	8d e0       	ldi	r24, 0x0D	; 13
 6c4:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <mfrc522_write>
 
    serial_out[0] = PICC_ANTICOLL;
 6c8:	83 e9       	ldi	r24, 0x93	; 147
 6ca:	f7 01       	movw	r30, r14
 6cc:	80 83       	st	Z, r24
    serial_out[1] = 0x20;
 6ce:	80 e2       	ldi	r24, 0x20	; 32
 6d0:	81 83       	std	Z+1, r24	; 0x01
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
 6d2:	8e 01       	movw	r16, r28
 6d4:	0f 5f       	subi	r16, 0xFF	; 255
 6d6:	1f 4f       	sbci	r17, 0xFF	; 255
 6d8:	97 01       	movw	r18, r14
 6da:	42 e0       	ldi	r20, 0x02	; 2
 6dc:	b7 01       	movw	r22, r14
 6de:	8c e0       	ldi	r24, 0x0C	; 12
 6e0:	0e 94 36 02 	call	0x46c	; 0x46c <mfrc522_to_card>

    if (status == CARD_FOUND)
 6e4:	81 30       	cpi	r24, 0x01	; 1
 6e6:	71 f4       	brne	.+28     	; 0x704 <mfrc522_get_card_serial+0x5a>
 6e8:	f7 01       	movw	r30, r14
 6ea:	97 01       	movw	r18, r14
 6ec:	2c 5f       	subi	r18, 0xFC	; 252
 6ee:	3f 4f       	sbci	r19, 0xFF	; 255
 6f0:	90 e0       	ldi	r25, 0x00	; 0
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{   
		 	serNumCheck ^= serial_out[i];
 6f2:	41 91       	ld	r20, Z+
 6f4:	94 27       	eor	r25, r20
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);

    if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
 6f6:	e2 17       	cp	r30, r18
 6f8:	f3 07       	cpc	r31, r19
 6fa:	d9 f7       	brne	.-10     	; 0x6f2 <mfrc522_get_card_serial+0x48>
		{   
		 	serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
 6fc:	f7 01       	movw	r30, r14
 6fe:	24 81       	ldd	r18, Z+4	; 0x04
 700:	92 13       	cpse	r25, r18
		{   
			status = ERROR;    
 702:	83 e0       	ldi	r24, 0x03	; 3
		}
    }
    return status;
}
 704:	0f 90       	pop	r0
 706:	0f 90       	pop	r0
 708:	0f 90       	pop	r0
 70a:	0f 90       	pop	r0
 70c:	df 91       	pop	r29
 70e:	cf 91       	pop	r28
 710:	1f 91       	pop	r17
 712:	0f 91       	pop	r16
 714:	ff 90       	pop	r15
 716:	ef 90       	pop	r14
 718:	08 95       	ret

0000071a <spi_init>:
#include <spi.h>

#if SPI_CONFIG_AS_MASTER
void spi_init()
{
	SPI_DDR = (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 71a:	8c e2       	ldi	r24, 0x2C	; 44
 71c:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//prescaler 16
 71e:	81 e5       	ldi	r24, 0x51	; 81
 720:	8c bd       	out	0x2c, r24	; 44
 722:	08 95       	ret

00000724 <spi_transmit>:
 724:	8e bd       	out	0x2e, r24	; 46
 726:	0d b4       	in	r0, 0x2d	; 45
 728:	07 fe       	sbrs	r0, 7
 72a:	fd cf       	rjmp	.-6      	; 0x726 <spi_transmit+0x2>
 72c:	8e b5       	in	r24, 0x2e	; 46
 72e:	08 95       	ret

00000730 <main>:


int main(void)
{
 730:	cf 93       	push	r28
 732:	df 93       	push	r29
 734:	cd b7       	in	r28, 0x3d	; 61
 736:	de b7       	in	r29, 0x3e	; 62
 738:	60 97       	sbiw	r28, 0x10	; 16
 73a:	0f b6       	in	r0, 0x3f	; 63
 73c:	f8 94       	cli
 73e:	de bf       	out	0x3e, r29	; 62
 740:	0f be       	out	0x3f, r0	; 63
 742:	cd bf       	out	0x3d, r28	; 61

    initServo(PORTC, DDRC, 5); //make servo an output at pin 5
 744:	67 b1       	in	r22, 0x07	; 7
 746:	88 b1       	in	r24, 0x08	; 8
 748:	70 e0       	ldi	r23, 0x00	; 0
 74a:	45 e0       	ldi	r20, 0x05	; 5
 74c:	50 e0       	ldi	r21, 0x00	; 0
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	0e 94 77 01 	call	0x2ee	; 0x2ee <initServo>
 754:	2f e7       	ldi	r18, 0x7F	; 127
 756:	88 e3       	ldi	r24, 0x38	; 56
 758:	91 e0       	ldi	r25, 0x01	; 1
 75a:	21 50       	subi	r18, 0x01	; 1
 75c:	80 40       	sbci	r24, 0x00	; 0
 75e:	90 40       	sbci	r25, 0x00	; 0
 760:	e1 f7       	brne	.-8      	; 0x75a <main+0x2a>
 762:	00 c0       	rjmp	.+0      	; 0x764 <main+0x34>
 764:	00 00       	nop

    uint8_t byte;
    uint8_t str[MAX_LEN];
    _delay_ms(50);
    LCDInit(LS_BLINK);
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	0e 94 a3 00 	call	0x146	; 0x146 <LCDInit>
    LCDWriteStringXY(2,0,"ECEN1310 RFID Tag Reader");
 76c:	60 e0       	ldi	r22, 0x00	; 0
 76e:	82 e0       	ldi	r24, 0x02	; 2
 770:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 774:	89 e1       	ldi	r24, 0x19	; 25
 776:	91 e0       	ldi	r25, 0x01	; 1
 778:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>

    spi_init(); //start communication for rfid
 77c:	0e 94 8d 03 	call	0x71a	; 0x71a <spi_init>
 780:	ef ef       	ldi	r30, 0xFF	; 255
 782:	f9 e6       	ldi	r31, 0x69	; 105
 784:	28 e1       	ldi	r18, 0x18	; 24
 786:	e1 50       	subi	r30, 0x01	; 1
 788:	f0 40       	sbci	r31, 0x00	; 0
 78a:	20 40       	sbci	r18, 0x00	; 0
 78c:	e1 f7       	brne	.-8      	; 0x786 <main+0x56>
 78e:	00 c0       	rjmp	.+0      	; 0x790 <main+0x60>
 790:	00 00       	nop
    _delay_ms(1000);
    LCDClear();
 792:	60 e0       	ldi	r22, 0x00	; 0
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>

    open();
 79a:	0e 94 8a 01 	call	0x314	; 0x314 <open>
    close();

    //init reader
    mfrc522_init();
 79e:	0e 94 10 02 	call	0x420	; 0x420 <mfrc522_init>
 7a2:	8f ef       	ldi	r24, 0xFF	; 255
 7a4:	9e e9       	ldi	r25, 0x9E	; 158
 7a6:	e4 e2       	ldi	r30, 0x24	; 36
 7a8:	81 50       	subi	r24, 0x01	; 1
 7aa:	90 40       	sbci	r25, 0x00	; 0
 7ac:	e0 40       	sbci	r30, 0x00	; 0
 7ae:	e1 f7       	brne	.-8      	; 0x7a8 <main+0x78>
 7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <main+0x82>
 7b2:	00 00       	nop
//    mfrc522_write(ComIEnReg,byte|0x20);
//    byte = mfrc522_read(DivIEnReg);
//    mfrc522_write(DivIEnReg,byte|0x80);

    _delay_ms(1500);
    LCDClear();
 7b4:	60 e0       	ldi	r22, 0x00	; 0
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 7bc:	1e 01       	movw	r2, r28
 7be:	f6 e0       	ldi	r31, 0x06	; 6
 7c0:	2f 0e       	add	r2, r31
 7c2:	31 1c       	adc	r3, r1
            if(validCard == 1){
                LCDClear();
                _delay_ms(500);
                LCDWriteString("SUCCESS");
                open();
                validCard=5;
 7c4:	25 e0       	ldi	r18, 0x05	; 5
 7c6:	42 2e       	mov	r4, r18
 7c8:	51 2c       	mov	r5, r1
                {
                    LCDWriteIntXY(0,1,str[k], -1);
                    LCDWriteString("MATCH"); //jk i am testing
                    _delay_ms(50);
                    LCDClear();
                    validCard = 1;
 7ca:	66 24       	eor	r6, r6
 7cc:	63 94       	inc	r6
 7ce:	71 2c       	mov	r7, r1
 7d0:	4e 01       	movw	r8, r28
 7d2:	29 e0       	ldi	r18, 0x09	; 9
 7d4:	82 0e       	add	r8, r18
 7d6:	91 1c       	adc	r9, r1
    _delay_ms(1500);
    LCDClear();


while(1){
        byte = mfrc522_request(PICC_REQALL,str);
 7d8:	be 01       	movw	r22, r28
 7da:	6f 5f       	subi	r22, 0xFF	; 255
 7dc:	7f 4f       	sbci	r23, 0xFF	; 255
 7de:	82 e5       	ldi	r24, 0x52	; 82
 7e0:	0e 94 22 03 	call	0x644	; 0x644 <mfrc522_request>
 7e4:	18 2f       	mov	r17, r24

        LCDHexDumpXY(0,0,byte);
 7e6:	48 2f       	mov	r20, r24
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	80 e0       	ldi	r24, 0x00	; 0
 7ec:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCDHexDumpXY>
        buttonRead();
 7f0:	0e 94 c3 01 	call	0x386	; 0x386 <buttonRead>
    
        if(byte == CARD_FOUND)
 7f4:	11 30       	cpi	r17, 0x01	; 1
 7f6:	09 f0       	breq	.+2      	; 0x7fa <main+0xca>
 7f8:	f7 c0       	rjmp	.+494    	; 0x9e8 <__stack+0xe9>
        {
            byte = mfrc522_get_card_serial(str);
 7fa:	ce 01       	movw	r24, r28
 7fc:	01 96       	adiw	r24, 0x01	; 1
 7fe:	0e 94 55 03 	call	0x6aa	; 0x6aa <mfrc522_get_card_serial>
            if(byte == CARD_FOUND)
 802:	81 30       	cpi	r24, 0x01	; 1
 804:	09 f0       	breq	.+2      	; 0x808 <main+0xd8>
 806:	f9 c0       	rjmp	.+498    	; 0x9fa <__stack+0xfb>
 808:	8f e5       	ldi	r24, 0x5F	; 95
 80a:	9a ee       	ldi	r25, 0xEA	; 234
 80c:	01 97       	sbiw	r24, 0x01	; 1
 80e:	f1 f7       	brne	.-4      	; 0x80c <main+0xdc>
 810:	00 c0       	rjmp	.+0      	; 0x812 <main+0xe2>
 812:	00 00       	nop
            {
                _delay_ms(30);
                LCDClear();
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 81c:	8e 01       	movw	r16, r28
 81e:	0f 5f       	subi	r16, 0xFF	; 255
 820:	1f 4f       	sbci	r17, 0xFF	; 255
                for(byte=0;byte<8;byte++){
                    // LCDHexDumpXY(byte*2,0,str[byte]);
                    //       LCDHexDumpXY(byte*2, 0, str[byte]);
                  //  LCDWriteString(" ");
                  
                    LCDWriteInt(str[byte], -1);
 822:	f8 01       	movw	r30, r16
 824:	81 91       	ld	r24, Z+
 826:	8f 01       	movw	r16, r30
 828:	6f ef       	ldi	r22, 0xFF	; 255
 82a:	7f ef       	ldi	r23, 0xFF	; 255
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteInt>
 832:	ff ef       	ldi	r31, 0xFF	; 255
 834:	29 e6       	ldi	r18, 0x69	; 105
 836:	88 e1       	ldi	r24, 0x18	; 24
 838:	f1 50       	subi	r31, 0x01	; 1
 83a:	20 40       	sbci	r18, 0x00	; 0
 83c:	80 40       	sbci	r24, 0x00	; 0
 83e:	e1 f7       	brne	.-8      	; 0x838 <main+0x108>
 840:	00 c0       	rjmp	.+0      	; 0x842 <main+0x112>
 842:	00 00       	nop
            if(byte == CARD_FOUND)
            {
                _delay_ms(30);
                LCDClear();

                for(byte=0;byte<8;byte++){
 844:	08 15       	cp	r16, r8
 846:	19 05       	cpc	r17, r9
 848:	61 f7       	brne	.-40     	; 0x822 <main+0xf2>
            else
            { //not a valid card found
                LCDWriteStringXY(0,1,"Error");
            }

            LCDWriteStringXY(0, 1, "Card Comparison");
 84a:	61 e0       	ldi	r22, 0x01	; 1
 84c:	80 e0       	ldi	r24, 0x00	; 0
 84e:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 852:	88 e3       	ldi	r24, 0x38	; 56
 854:	91 e0       	ldi	r25, 0x01	; 1
 856:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 85a:	9f ef       	ldi	r25, 0xFF	; 255
 85c:	e9 e6       	ldi	r30, 0x69	; 105
 85e:	f8 e1       	ldi	r31, 0x18	; 24
 860:	91 50       	subi	r25, 0x01	; 1
 862:	e0 40       	sbci	r30, 0x00	; 0
 864:	f0 40       	sbci	r31, 0x00	; 0
 866:	e1 f7       	brne	.-8      	; 0x860 <main+0x130>
 868:	00 c0       	rjmp	.+0      	; 0x86a <main+0x13a>
 86a:	00 00       	nop
            _delay_ms(1000);
            LCDClear(); //test
 86c:	60 e0       	ldi	r22, 0x00	; 0
 86e:	81 e0       	ldi	r24, 0x01	; 1
 870:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 874:	8e 01       	movw	r16, r28
 876:	0f 5f       	subi	r16, 0xFF	; 255
 878:	1f 4f       	sbci	r17, 0xFF	; 255
 87a:	78 01       	movw	r14, r16
 87c:	ef e5       	ldi	r30, 0x5F	; 95
 87e:	fa ee       	ldi	r31, 0xEA	; 234
 880:	31 97       	sbiw	r30, 0x01	; 1
 882:	f1 f7       	brne	.-4      	; 0x880 <main+0x150>
 884:	00 c0       	rjmp	.+0      	; 0x886 <main+0x156>
 886:	00 00       	nop
            for(int i=0; i<5; i++){
                _delay_ms(30);//test
                //LCDWriteStringXY(0,0,"i:  ");                 // LCDWriteIntXY(5,0, i,1);//test
                LCDWriteInt(str[i], -1);//test
 888:	f7 01       	movw	r30, r14
 88a:	81 91       	ld	r24, Z+
 88c:	7f 01       	movw	r14, r30
 88e:	6f ef       	ldi	r22, 0xFF	; 255
 890:	7f ef       	ldi	r23, 0xFF	; 255
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteInt>
            }

            LCDWriteStringXY(0, 1, "Card Comparison");
            _delay_ms(1000);
            LCDClear(); //test
            for(int i=0; i<5; i++){
 898:	e2 14       	cp	r14, r2
 89a:	f3 04       	cpc	r15, r3
 89c:	79 f7       	brne	.-34     	; 0x87c <main+0x14c>
 89e:	ff ef       	ldi	r31, 0xFF	; 255
 8a0:	20 e7       	ldi	r18, 0x70	; 112
 8a2:	82 e0       	ldi	r24, 0x02	; 2
 8a4:	f1 50       	subi	r31, 0x01	; 1
 8a6:	20 40       	sbci	r18, 0x00	; 0
 8a8:	80 40       	sbci	r24, 0x00	; 0
 8aa:	e1 f7       	brne	.-8      	; 0x8a4 <main+0x174>
 8ac:	00 c0       	rjmp	.+0      	; 0x8ae <main+0x17e>
 8ae:	00 00       	nop
                //LCDWriteStringXY(0,0,"i:  ");                 // LCDWriteIntXY(5,0, i,1);//test
                LCDWriteInt(str[i], -1);//test
                //   _delay_ms(1000);
            }
            _delay_ms(100);//test
            LCDClear();//test
 8b0:	60 e0       	ldi	r22, 0x00	; 0
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 8b8:	82 e0       	ldi	r24, 0x02	; 2
 8ba:	a8 2e       	mov	r10, r24
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	b8 2e       	mov	r11, r24
 8c0:	97 e0       	ldi	r25, 0x07	; 7
 8c2:	c9 2e       	mov	r12, r25
 8c4:	91 e0       	ldi	r25, 0x01	; 1
 8c6:	d9 2e       	mov	r13, r25

            for(int k=0;k<5 ;k++){
                // LCDHexDumpXY(byte*2,0,str[byte]);
                //       LCDHexDumpXY(byte*2, 0, str[byte]);
                LCDWriteIntXY(0,1,str[k], -1);
 8c8:	61 e0       	ldi	r22, 0x01	; 1
 8ca:	80 e0       	ldi	r24, 0x00	; 0
 8cc:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 8d0:	f8 01       	movw	r30, r16
 8d2:	80 81       	ld	r24, Z
 8d4:	6f ef       	ldi	r22, 0xFF	; 255
 8d6:	7f ef       	ldi	r23, 0xFF	; 255
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteInt>
                if(str[k] == card2[k] || str[k] == card1[k]) //this is where you are testing
 8de:	f8 01       	movw	r30, r16
 8e0:	80 81       	ld	r24, Z
 8e2:	f5 01       	movw	r30, r10
 8e4:	91 91       	ld	r25, Z+
 8e6:	5f 01       	movw	r10, r30
 8e8:	89 17       	cp	r24, r25
 8ea:	21 f0       	breq	.+8      	; 0x8f4 <main+0x1c4>
 8ec:	f6 01       	movw	r30, r12
 8ee:	90 81       	ld	r25, Z
 8f0:	89 13       	cpse	r24, r25
 8f2:	8c c0       	rjmp	.+280    	; 0xa0c <__stack+0x10d>
                {
                    LCDWriteIntXY(0,1,str[k], -1);
 8f4:	61 e0       	ldi	r22, 0x01	; 1
 8f6:	80 e0       	ldi	r24, 0x00	; 0
 8f8:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 8fc:	f8 01       	movw	r30, r16
 8fe:	80 81       	ld	r24, Z
 900:	6f ef       	ldi	r22, 0xFF	; 255
 902:	7f ef       	ldi	r23, 0xFF	; 255
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteInt>
                    LCDWriteString("MATCH"); //jk i am testing
 90a:	88 e4       	ldi	r24, 0x48	; 72
 90c:	91 e0       	ldi	r25, 0x01	; 1
 90e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 912:	ff e7       	ldi	r31, 0x7F	; 127
 914:	28 e3       	ldi	r18, 0x38	; 56
 916:	81 e0       	ldi	r24, 0x01	; 1
 918:	f1 50       	subi	r31, 0x01	; 1
 91a:	20 40       	sbci	r18, 0x00	; 0
 91c:	80 40       	sbci	r24, 0x00	; 0
 91e:	e1 f7       	brne	.-8      	; 0x918 <__stack+0x19>
 920:	00 c0       	rjmp	.+0      	; 0x922 <__stack+0x23>
 922:	00 00       	nop
                    _delay_ms(50);
                    LCDClear();
 924:	60 e0       	ldi	r22, 0x00	; 0
 926:	81 e0       	ldi	r24, 0x01	; 1
 928:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
                    validCard = 1;
 92c:	70 92 01 01 	sts	0x0101, r7
 930:	60 92 00 01 	sts	0x0100, r6
 934:	0f 5f       	subi	r16, 0xFF	; 255
 936:	1f 4f       	sbci	r17, 0xFF	; 255
 938:	9f ef       	ldi	r25, 0xFF	; 255
 93a:	c9 1a       	sub	r12, r25
 93c:	d9 0a       	sbc	r13, r25
                //   _delay_ms(1000);
            }
            _delay_ms(100);//test
            LCDClear();//test

            for(int k=0;k<5 ;k++){
 93e:	0e 15       	cp	r16, r14
 940:	1f 05       	cpc	r17, r15
 942:	11 f6       	brne	.-124    	; 0x8c8 <main+0x198>
                else{
                    validCard = -1;
                }

            } //end of for loop checking if valid card
            if(validCard == 1){
 944:	80 91 00 01 	lds	r24, 0x0100
 948:	90 91 01 01 	lds	r25, 0x0101
 94c:	01 97       	sbiw	r24, 0x01	; 1
 94e:	b9 f4       	brne	.+46     	; 0x97e <__stack+0x7f>
                LCDClear();
 950:	60 e0       	ldi	r22, 0x00	; 0
 952:	81 e0       	ldi	r24, 0x01	; 1
 954:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 958:	ef ef       	ldi	r30, 0xFF	; 255
 95a:	f4 e3       	ldi	r31, 0x34	; 52
 95c:	2c e0       	ldi	r18, 0x0C	; 12
 95e:	e1 50       	subi	r30, 0x01	; 1
 960:	f0 40       	sbci	r31, 0x00	; 0
 962:	20 40       	sbci	r18, 0x00	; 0
 964:	e1 f7       	brne	.-8      	; 0x95e <__stack+0x5f>
 966:	00 c0       	rjmp	.+0      	; 0x968 <__stack+0x69>
 968:	00 00       	nop
                _delay_ms(500);
                LCDWriteString("SUCCESS");
 96a:	8e e4       	ldi	r24, 0x4E	; 78
 96c:	91 e0       	ldi	r25, 0x01	; 1
 96e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
                open();
 972:	0e 94 8a 01 	call	0x314	; 0x314 <open>
                validCard=5;
 976:	50 92 01 01 	sts	0x0101, r5
 97a:	40 92 00 01 	sts	0x0100, r4
            } //end if test worked
            if(validCard == -1){
 97e:	80 91 00 01 	lds	r24, 0x0100
 982:	90 91 01 01 	lds	r25, 0x0101
 986:	01 96       	adiw	r24, 0x01	; 1
 988:	89 f4       	brne	.+34     	; 0x9ac <__stack+0xad>
                LCDClear();
 98a:	60 e0       	ldi	r22, 0x00	; 0
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
 992:	ff ef       	ldi	r31, 0xFF	; 255
 994:	20 e7       	ldi	r18, 0x70	; 112
 996:	82 e0       	ldi	r24, 0x02	; 2
 998:	f1 50       	subi	r31, 0x01	; 1
 99a:	20 40       	sbci	r18, 0x00	; 0
 99c:	80 40       	sbci	r24, 0x00	; 0
 99e:	e1 f7       	brne	.-8      	; 0x998 <__stack+0x99>
 9a0:	00 c0       	rjmp	.+0      	; 0x9a2 <__stack+0xa3>
 9a2:	00 00       	nop
                _delay_ms(100);
                LCDWriteString("not valid");
 9a4:	86 e5       	ldi	r24, 0x56	; 86
 9a6:	91 e0       	ldi	r25, 0x01	; 1
 9a8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 9ac:	9f e7       	ldi	r25, 0x7F	; 127
 9ae:	ef e4       	ldi	r30, 0x4F	; 79
 9b0:	f2 e1       	ldi	r31, 0x12	; 18
 9b2:	91 50       	subi	r25, 0x01	; 1
 9b4:	e0 40       	sbci	r30, 0x00	; 0
 9b6:	f0 40       	sbci	r31, 0x00	; 0
 9b8:	e1 f7       	brne	.-8      	; 0x9b2 <__stack+0xb3>
 9ba:	00 c0       	rjmp	.+0      	; 0x9bc <__stack+0xbd>
 9bc:	00 00       	nop
                close();
            } //end of loop for checking valid card

            _delay_ms(750);
            LCDClear();
 9be:	60 e0       	ldi	r22, 0x00	; 0
 9c0:	81 e0       	ldi	r24, 0x01	; 1
 9c2:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
            LCDWriteString("CHECKED");
 9c6:	80 e6       	ldi	r24, 0x60	; 96
 9c8:	91 e0       	ldi	r25, 0x01	; 1
 9ca:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 9ce:	2f e7       	ldi	r18, 0x7F	; 127
 9d0:	8a e1       	ldi	r24, 0x1A	; 26
 9d2:	96 e0       	ldi	r25, 0x06	; 6
 9d4:	21 50       	subi	r18, 0x01	; 1
 9d6:	80 40       	sbci	r24, 0x00	; 0
 9d8:	90 40       	sbci	r25, 0x00	; 0
 9da:	e1 f7       	brne	.-8      	; 0x9d4 <__stack+0xd5>
 9dc:	00 c0       	rjmp	.+0      	; 0x9de <__stack+0xdf>
 9de:	00 00       	nop
            _delay_ms(250);
            LCDClear();
 9e0:	60 e0       	ldi	r22, 0x00	; 0
 9e2:	81 e0       	ldi	r24, 0x01	; 1
 9e4:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
            
        } //end of valid card found

    LCDWriteStringXY(0,0,"Present Tag");
 9e8:	60 e0       	ldi	r22, 0x00	; 0
 9ea:	80 e0       	ldi	r24, 0x00	; 0
 9ec:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 9f0:	88 e6       	ldi	r24, 0x68	; 104
 9f2:	91 e0       	ldi	r25, 0x01	; 1
 9f4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
    _delay_ms(1500);
    LCDClear();


while(1){
        byte = mfrc522_request(PICC_REQALL,str);
 9f8:	ef ce       	rjmp	.-546    	; 0x7d8 <main+0xa8>
                }

            }
            else
            { //not a valid card found
                LCDWriteStringXY(0,1,"Error");
 9fa:	61 e0       	ldi	r22, 0x01	; 1
 9fc:	80 e0       	ldi	r24, 0x00	; 0
 9fe:	0e 94 47 01 	call	0x28e	; 0x28e <LCDGotoXY>
 a02:	82 e3       	ldi	r24, 0x32	; 50
 a04:	91 e0       	ldi	r25, 0x01	; 1
 a06:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteString>
 a0a:	1f cf       	rjmp	.-450    	; 0x84a <main+0x11a>
                    _delay_ms(50);
                    LCDClear();
                    validCard = 1;
                }
                else{
                    validCard = -1;
 a0c:	8f ef       	ldi	r24, 0xFF	; 255
 a0e:	9f ef       	ldi	r25, 0xFF	; 255
 a10:	90 93 01 01 	sts	0x0101, r25
 a14:	80 93 00 01 	sts	0x0100, r24
 a18:	8d cf       	rjmp	.-230    	; 0x934 <__stack+0x35>

00000a1a <__divmodhi4>:
 a1a:	97 fb       	bst	r25, 7
 a1c:	07 2e       	mov	r0, r23
 a1e:	16 f4       	brtc	.+4      	; 0xa24 <__divmodhi4+0xa>
 a20:	00 94       	com	r0
 a22:	07 d0       	rcall	.+14     	; 0xa32 <__divmodhi4_neg1>
 a24:	77 fd       	sbrc	r23, 7
 a26:	09 d0       	rcall	.+18     	; 0xa3a <__divmodhi4_neg2>
 a28:	0e 94 21 05 	call	0xa42	; 0xa42 <__udivmodhi4>
 a2c:	07 fc       	sbrc	r0, 7
 a2e:	05 d0       	rcall	.+10     	; 0xa3a <__divmodhi4_neg2>
 a30:	3e f4       	brtc	.+14     	; 0xa40 <__divmodhi4_exit>

00000a32 <__divmodhi4_neg1>:
 a32:	90 95       	com	r25
 a34:	81 95       	neg	r24
 a36:	9f 4f       	sbci	r25, 0xFF	; 255
 a38:	08 95       	ret

00000a3a <__divmodhi4_neg2>:
 a3a:	70 95       	com	r23
 a3c:	61 95       	neg	r22
 a3e:	7f 4f       	sbci	r23, 0xFF	; 255

00000a40 <__divmodhi4_exit>:
 a40:	08 95       	ret

00000a42 <__udivmodhi4>:
 a42:	aa 1b       	sub	r26, r26
 a44:	bb 1b       	sub	r27, r27
 a46:	51 e1       	ldi	r21, 0x11	; 17
 a48:	07 c0       	rjmp	.+14     	; 0xa58 <__udivmodhi4_ep>

00000a4a <__udivmodhi4_loop>:
 a4a:	aa 1f       	adc	r26, r26
 a4c:	bb 1f       	adc	r27, r27
 a4e:	a6 17       	cp	r26, r22
 a50:	b7 07       	cpc	r27, r23
 a52:	10 f0       	brcs	.+4      	; 0xa58 <__udivmodhi4_ep>
 a54:	a6 1b       	sub	r26, r22
 a56:	b7 0b       	sbc	r27, r23

00000a58 <__udivmodhi4_ep>:
 a58:	88 1f       	adc	r24, r24
 a5a:	99 1f       	adc	r25, r25
 a5c:	5a 95       	dec	r21
 a5e:	a9 f7       	brne	.-22     	; 0xa4a <__udivmodhi4_loop>
 a60:	80 95       	com	r24
 a62:	90 95       	com	r25
 a64:	bc 01       	movw	r22, r24
 a66:	cd 01       	movw	r24, r26
 a68:	08 95       	ret

00000a6a <_exit>:
 a6a:	f8 94       	cli

00000a6c <__stop_program>:
 a6c:	ff cf       	rjmp	.-2      	; 0xa6c <__stop_program>
