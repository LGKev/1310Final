
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000010e  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000708  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e98  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001724  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001738  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  0000230e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  0000232b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  78:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initIO>:

#define BV(x) (1<<x)     // shifts bits by x. and sets the bit to 1 or 0 based on x 0 is zero shift, 1st bit.


void initIO(void) {
    DDRC |= BV(2); //port c pin 2 output
  80:	3a 9a       	sbi	0x07, 2	; 7
    DDRC |= BV(1); //port c pin 2 output
  82:	39 9a       	sbi	0x07, 1	; 7
    DDRC ^= BV(0);
  84:	97 b1       	in	r25, 0x07	; 7
  86:	21 e0       	ldi	r18, 0x01	; 1
  88:	92 27       	eor	r25, r18
  8a:	97 b9       	out	0x07, r25	; 7
    PORTC ^= BV(0); //don't forget to set as input
  8c:	88 b1       	in	r24, 0x08	; 8
  8e:	82 27       	eor	r24, r18
  90:	88 b9       	out	0x08, r24	; 8
  92:	08 95       	ret

00000094 <main>:

    
}

int main(void) {
	initIO();
  94:	0e 94 40 00 	call	0x80	; 0x80 <initIO>

	while (1) {
        PORTC |= BV(2);
        _delay_ms(30);
        PORTC ^= BV(2);
  98:	24 e0       	ldi	r18, 0x04	; 4
        _delay_ms(30);
        
        PORTC |= BV(1);
        _delay_ms(30);
        PORTC ^= BV(1);
  9a:	92 e0       	ldi	r25, 0x02	; 2

int main(void) {
	initIO();

	while (1) {
        PORTC |= BV(2);
  9c:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	ef e5       	ldi	r30, 0x5F	; 95
  a0:	fa ee       	ldi	r31, 0xEA	; 234
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0xe>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x14>
  a8:	00 00       	nop
        _delay_ms(30);
        PORTC ^= BV(2);
  aa:	88 b1       	in	r24, 0x08	; 8
  ac:	82 27       	eor	r24, r18
  ae:	88 b9       	out	0x08, r24	; 8
  b0:	ef e5       	ldi	r30, 0x5F	; 95
  b2:	fa ee       	ldi	r31, 0xEA	; 234
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x20>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x26>
  ba:	00 00       	nop
        _delay_ms(30);
        
        PORTC |= BV(1);
  bc:	41 9a       	sbi	0x08, 1	; 8
  be:	ef e5       	ldi	r30, 0x5F	; 95
  c0:	fa ee       	ldi	r31, 0xEA	; 234
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x2e>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x34>
  c8:	00 00       	nop
        _delay_ms(30);
        PORTC ^= BV(1);
  ca:	88 b1       	in	r24, 0x08	; 8
  cc:	89 27       	eor	r24, r25
  ce:	88 b9       	out	0x08, r24	; 8
  d0:	ef e5       	ldi	r30, 0x5F	; 95
  d2:	fa ee       	ldi	r31, 0xEA	; 234
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x40>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x46>
  da:	00 00       	nop
        _delay_ms(30);
        
    
        
        while(bit_is_clear(PINC, 0)){
  dc:	30 99       	sbic	0x06, 0	; 6
  de:	de cf       	rjmp	.-68     	; 0x9c <main+0x8>
            PORTC |= BV(1);
  e0:	41 9a       	sbi	0x08, 1	; 8
  e2:	ff ef       	ldi	r31, 0xFF	; 255
  e4:	33 ec       	ldi	r19, 0xC3	; 195
  e6:	49 e0       	ldi	r20, 0x09	; 9
  e8:	f1 50       	subi	r31, 0x01	; 1
  ea:	30 40       	sbci	r19, 0x00	; 0
  ec:	40 40       	sbci	r20, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x54>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x5e>
  f2:	00 00       	nop
            _delay_ms(400);
            PORTC ^= BV(1);
  f4:	88 b1       	in	r24, 0x08	; 8
  f6:	89 27       	eor	r24, r25
  f8:	88 b9       	out	0x08, r24	; 8
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	e3 ec       	ldi	r30, 0xC3	; 195
  fe:	f9 e0       	ldi	r31, 0x09	; 9
 100:	81 50       	subi	r24, 0x01	; 1
 102:	e0 40       	sbci	r30, 0x00	; 0
 104:	f0 40       	sbci	r31, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x6c>
 108:	e7 cf       	rjmp	.-50     	; 0xd8 <main+0x44>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
