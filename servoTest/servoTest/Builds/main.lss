
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000012e  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000780  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ebf  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000017e3  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017f4  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  000023ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000023e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  78:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initIO>:
#include <stdio.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

void initIO(void) {
  80:	08 95       	ret

00000082 <open>:
#define BV(x) (1<<x)


int open(void){
    
    PORTC = (BV(5));
  82:	90 e2       	ldi	r25, 0x20	; 32
  84:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	ef e9       	ldi	r30, 0x9F	; 159
  88:	ff e0       	ldi	r31, 0x0F	; 15
  8a:	31 97       	sbiw	r30, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <open+0x8>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <open+0xe>
  90:	00 00       	nop
    _delay_us(2000);
    PORTC  ^=BV(5);
  92:	88 b1       	in	r24, 0x08	; 8
  94:	89 27       	eor	r24, r25
  96:	88 b9       	out	0x08, r24	; 8
  98:	8f e9       	ldi	r24, 0x9F	; 159
  9a:	9c e8       	ldi	r25, 0x8C	; 140
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <open+0x1a>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <open+0x20>
  a2:	00 00       	nop
    _delay_us(18000);
    
    return 1;
}
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	08 95       	ret

000000aa <close>:

int close(void){
    //ToDo: need to update this
    //close sequence
    PORTC = (BV(5));
  aa:	90 e2       	ldi	r25, 0x20	; 32
  ac:	98 b9       	out	0x08, r25	; 8
  ae:	ef ec       	ldi	r30, 0xCF	; 207
  b0:	f7 e0       	ldi	r31, 0x07	; 7
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <close+0x8>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <close+0xe>
  b8:	00 00       	nop
    _delay_us(1000);
    PORTC   ^=BV(5);
  ba:	88 b1       	in	r24, 0x08	; 8
  bc:	89 27       	eor	r24, r25
  be:	88 b9       	out	0x08, r24	; 8
  c0:	8f e6       	ldi	r24, 0x6F	; 111
  c2:	94 e9       	ldi	r25, 0x94	; 148
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <close+0x1a>
  c8:	00 c0       	rjmp	.+0      	; 0xca <close+0x20>
  ca:	00 00       	nop
    _delay_us(19000);
    return 1;
}
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	08 95       	ret

000000d2 <initServo>:
    //            //make A5 output.
    //            *ddr=BV(pin);      // PORTC declared as output 0xFF is all output 11111 so i have 8 bits i can set and 8 leds....
    //            *port=BV(pin);     // PORTC is initially LOW OFF the led initially /
    //to do make the register parameter work
    
    DDRC = BV(5);
  d2:	90 e2       	ldi	r25, 0x20	; 32
  d4:	97 b9       	out	0x07, r25	; 7
    //set to closed position
    PORTC = (BV(5));
  d6:	98 b9       	out	0x08, r25	; 8
  d8:	ef ec       	ldi	r30, 0xCF	; 207
  da:	f7 e0       	ldi	r31, 0x07	; 7
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <initServo+0xa>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <initServo+0x10>
  e2:	00 00       	nop
    _delay_us(1000);
    PORTC   ^=BV(5);
  e4:	88 b1       	in	r24, 0x08	; 8
  e6:	89 27       	eor	r24, r25
  e8:	88 b9       	out	0x08, r24	; 8
  ea:	8f e6       	ldi	r24, 0x6F	; 111
  ec:	94 e9       	ldi	r25, 0x94	; 148
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <initServo+0x1c>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <initServo+0x22>
  f4:	00 00       	nop
  f6:	08 95       	ret

000000f8 <main>:
    
}

int main(void) {
   
    initServo();
  f8:	0e 94 69 00 	call	0xd2	; 0xd2 <initServo>
    while(1){
        open();
  fc:	0e 94 41 00 	call	0x82	; 0x82 <open>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	89 e6       	ldi	r24, 0x69	; 105
 104:	98 e1       	ldi	r25, 0x18	; 24
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0xe>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x18>
 110:	00 00       	nop
        _delay_ms(1000);
        close();
 112:	0e 94 55 00 	call	0xaa	; 0xaa <close>
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	89 e6       	ldi	r24, 0x69	; 105
 11a:	98 e1       	ldi	r25, 0x18	; 24
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x24>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x2e>
 126:	00 00       	nop
 128:	e9 cf       	rjmp	.-46     	; 0xfc <main+0x4>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
